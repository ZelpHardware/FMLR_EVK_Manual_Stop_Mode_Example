
MY_FMLR_EVK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c28  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f54  08006f54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f5c  08006f5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f5c  08006f5c  00016f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f60  08006f60  00016f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006f64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  20000070  08006fd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08006fd4  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cca  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000253c  00000000  00000000  00031d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f00  00000000  00000000  000342a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000351a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151b5  00000000  00000000  00035fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001328d  00000000  00000000  0004b15d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fcbf  00000000  00000000  0005e3ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de0a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e8c  00000000  00000000  000de0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006cd0 	.word	0x08006cd0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08006cd0 	.word	0x08006cd0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80004c4:	4b07      	ldr	r3, [pc, #28]	; (80004e4 <RetargetInit+0x28>)
 80004c6:	687a      	ldr	r2, [r7, #4]
 80004c8:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <RetargetInit+0x2c>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	6898      	ldr	r0, [r3, #8]
 80004d0:	2300      	movs	r3, #0
 80004d2:	2202      	movs	r2, #2
 80004d4:	2100      	movs	r1, #0
 80004d6:	f005 fb6b 	bl	8005bb0 <setvbuf>
}
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	46bd      	mov	sp, r7
 80004de:	b002      	add	sp, #8
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	2000008c 	.word	0x2000008c
 80004e8:	2000000c 	.word	0x2000000c

080004ec <_isatty>:

int _isatty(int fd) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	db04      	blt.n	8000504 <_isatty+0x18>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	dc01      	bgt.n	8000504 <_isatty+0x18>
    return 1;
 8000500:	2301      	movs	r3, #1
 8000502:	e005      	b.n	8000510 <_isatty+0x24>

  errno = EBADF;
 8000504:	f005 fb08 	bl	8005b18 <__errno>
 8000508:	0003      	movs	r3, r0
 800050a:	2209      	movs	r2, #9
 800050c:	601a      	str	r2, [r3, #0]
  return 0;
 800050e:	2300      	movs	r3, #0
}
 8000510:	0018      	movs	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	b002      	add	sp, #8
 8000516:	bd80      	pop	{r7, pc}

08000518 <_write>:

int _write(int fd, char* ptr, int len) {
 8000518:	b5b0      	push	{r4, r5, r7, lr}
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	2b01      	cmp	r3, #1
 8000528:	d002      	beq.n	8000530 <_write+0x18>
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2b02      	cmp	r3, #2
 800052e:	d114      	bne.n	800055a <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <_write+0x58>)
 8000532:	6818      	ldr	r0, [r3, #0]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	b29a      	uxth	r2, r3
 8000538:	2517      	movs	r5, #23
 800053a:	197c      	adds	r4, r7, r5
 800053c:	2301      	movs	r3, #1
 800053e:	425b      	negs	r3, r3
 8000540:	68b9      	ldr	r1, [r7, #8]
 8000542:	f004 fcf3 	bl	8004f2c <HAL_UART_Transmit>
 8000546:	0003      	movs	r3, r0
 8000548:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 800054a:	197b      	adds	r3, r7, r5
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <_write+0x3e>
      return len;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	e008      	b.n	8000568 <_write+0x50>
    else
      return EIO;
 8000556:	2305      	movs	r3, #5
 8000558:	e006      	b.n	8000568 <_write+0x50>
  }
  errno = EBADF;
 800055a:	f005 fadd 	bl	8005b18 <__errno>
 800055e:	0003      	movs	r3, r0
 8000560:	2209      	movs	r2, #9
 8000562:	601a      	str	r2, [r3, #0]
  return -1;
 8000564:	2301      	movs	r3, #1
 8000566:	425b      	negs	r3, r3
}
 8000568:	0018      	movs	r0, r3
 800056a:	46bd      	mov	sp, r7
 800056c:	b006      	add	sp, #24
 800056e:	bdb0      	pop	{r4, r5, r7, pc}
 8000570:	2000008c 	.word	0x2000008c

08000574 <_close>:

int _close(int fd) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	db04      	blt.n	800058c <_close+0x18>
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b02      	cmp	r3, #2
 8000586:	dc01      	bgt.n	800058c <_close+0x18>
    return 0;
 8000588:	2300      	movs	r3, #0
 800058a:	e006      	b.n	800059a <_close+0x26>

  errno = EBADF;
 800058c:	f005 fac4 	bl	8005b18 <__errno>
 8000590:	0003      	movs	r3, r0
 8000592:	2209      	movs	r2, #9
 8000594:	601a      	str	r2, [r3, #0]
  return -1;
 8000596:	2301      	movs	r3, #1
 8000598:	425b      	negs	r3, r3
}
 800059a:	0018      	movs	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	b002      	add	sp, #8
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	60b9      	str	r1, [r7, #8]
 80005ac:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80005ae:	f005 fab3 	bl	8005b18 <__errno>
 80005b2:	0003      	movs	r3, r0
 80005b4:	2209      	movs	r2, #9
 80005b6:	601a      	str	r2, [r3, #0]
  return -1;
 80005b8:	2301      	movs	r3, #1
 80005ba:	425b      	negs	r3, r3
}
 80005bc:	0018      	movs	r0, r3
 80005be:	46bd      	mov	sp, r7
 80005c0:	b004      	add	sp, #16
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <_read>:

int _read(int fd, char* ptr, int len) {
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d113      	bne.n	80005fe <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80005d6:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <_read+0x50>)
 80005d8:	6818      	ldr	r0, [r3, #0]
 80005da:	2517      	movs	r5, #23
 80005dc:	197c      	adds	r4, r7, r5
 80005de:	2301      	movs	r3, #1
 80005e0:	425b      	negs	r3, r3
 80005e2:	68b9      	ldr	r1, [r7, #8]
 80005e4:	2201      	movs	r2, #1
 80005e6:	f004 fd49 	bl	800507c <HAL_UART_Receive>
 80005ea:	0003      	movs	r3, r0
 80005ec:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 80005ee:	197b      	adds	r3, r7, r5
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <_read+0x36>
      return 1;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e008      	b.n	800060c <_read+0x48>
    else
      return EIO;
 80005fa:	2305      	movs	r3, #5
 80005fc:	e006      	b.n	800060c <_read+0x48>
  }
  errno = EBADF;
 80005fe:	f005 fa8b 	bl	8005b18 <__errno>
 8000602:	0003      	movs	r3, r0
 8000604:	2209      	movs	r2, #9
 8000606:	601a      	str	r2, [r3, #0]
  return -1;
 8000608:	2301      	movs	r3, #1
 800060a:	425b      	negs	r3, r3
}
 800060c:	0018      	movs	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	b006      	add	sp, #24
 8000612:	bdb0      	pop	{r4, r5, r7, pc}
 8000614:	2000008c 	.word	0x2000008c

08000618 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	db08      	blt.n	800063a <_fstat+0x22>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b02      	cmp	r3, #2
 800062c:	dc05      	bgt.n	800063a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	0192      	lsls	r2, r2, #6
 8000634:	605a      	str	r2, [r3, #4]
    return 0;
 8000636:	2300      	movs	r3, #0
 8000638:	e005      	b.n	8000646 <_fstat+0x2e>
  }

  errno = EBADF;
 800063a:	f005 fa6d 	bl	8005b18 <__errno>
 800063e:	0003      	movs	r3, r0
 8000640:	2209      	movs	r2, #9
 8000642:	601a      	str	r2, [r3, #0]
  return 0;
 8000644:	2300      	movs	r3, #0
}
 8000646:	0018      	movs	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f001 f8fb 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f93b 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 fb9b 	bl	8000d98 <MX_GPIO_Init>
  MX_ADC_Init();
 8000662:	f000 f9a9 	bl	80009b8 <MX_ADC_Init>
  MX_SPI1_Init();
 8000666:	f000 faf7 	bl	8000c58 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800066a:	f000 fb65 	bl	8000d38 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800066e:	f000 fb2b 	bl	8000cc8 <MX_SPI2_Init>
  MX_I2C1_Init();
 8000672:	f000 fa15 	bl	8000aa0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000676:	f000 fa53 	bl	8000b20 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 800067a:	4b82      	ldr	r3, [pc, #520]	; (8000884 <main+0x234>)
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff ff1d 	bl	80004bc <RetargetInit>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000682:	4b81      	ldr	r3, [pc, #516]	; (8000888 <main+0x238>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a81      	ldr	r2, [pc, #516]	; (800088c <main+0x23c>)
 8000688:	401a      	ands	r2, r3
 800068a:	4b7f      	ldr	r3, [pc, #508]	; (8000888 <main+0x238>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	0149      	lsls	r1, r1, #5
 8000690:	430a      	orrs	r2, r1
 8000692:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Check SHT31 communication over I2C
   uint8_t reset_cmd[2] = {0x30, 0xa2};
 8000694:	210c      	movs	r1, #12
 8000696:	187b      	adds	r3, r7, r1
 8000698:	4a7d      	ldr	r2, [pc, #500]	; (8000890 <main+0x240>)
 800069a:	801a      	strh	r2, [r3, #0]
   if (HAL_I2C_Master_Transmit(&hi2c1, SHT31_ADDRESS, reset_cmd, 2, 1000) == HAL_OK) {
 800069c:	187a      	adds	r2, r7, r1
 800069e:	487d      	ldr	r0, [pc, #500]	; (8000894 <main+0x244>)
 80006a0:	23fa      	movs	r3, #250	; 0xfa
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2302      	movs	r3, #2
 80006a8:	218a      	movs	r1, #138	; 0x8a
 80006aa:	f001 ff71 	bl	8002590 <HAL_I2C_Master_Transmit>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d104      	bne.n	80006bc <main+0x6c>
 	  printf("\n\rSHT31 successfully reset!");
 80006b2:	4b79      	ldr	r3, [pc, #484]	; (8000898 <main+0x248>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f005 fa61 	bl	8005b7c <iprintf>
 80006ba:	e003      	b.n	80006c4 <main+0x74>
   }
   else {
 	  printf("\n\rSHT31 reset failed...");
 80006bc:	4b77      	ldr	r3, [pc, #476]	; (800089c <main+0x24c>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f005 fa5c 	bl	8005b7c <iprintf>
   }


     // SX1272 is in FSO/OOK mode after reset
     HAL_GPIO_WritePin (RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 80006c4:	4b76      	ldr	r3, [pc, #472]	; (80008a0 <main+0x250>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	2104      	movs	r1, #4
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 feac 	bl	8002428 <HAL_GPIO_WritePin>
     HAL_Delay(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f001 f92d 	bl	8001930 <HAL_Delay>
     HAL_GPIO_WritePin (RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_SET);
 80006d6:	4b72      	ldr	r3, [pc, #456]	; (80008a0 <main+0x250>)
 80006d8:	2201      	movs	r2, #1
 80006da:	2104      	movs	r1, #4
 80006dc:	0018      	movs	r0, r3
 80006de:	f001 fea3 	bl	8002428 <HAL_GPIO_WritePin>
     HAL_Delay(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f001 f924 	bl	8001930 <HAL_Delay>
     HAL_GPIO_WritePin (RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 80006e8:	4b6d      	ldr	r3, [pc, #436]	; (80008a0 <main+0x250>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2104      	movs	r1, #4
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fe9a 	bl	8002428 <HAL_GPIO_WritePin>
     HAL_Delay(10);
 80006f4:	200a      	movs	r0, #10
 80006f6:	f001 f91b 	bl	8001930 <HAL_Delay>
     // Send command to put Semtech SX1272 to sleep and then LoRa mode, after reading its ID register
     uint8_t sx_id = readRegSpi(&hspi2,0x42);
 80006fa:	250f      	movs	r5, #15
 80006fc:	197c      	adds	r4, r7, r5
 80006fe:	4b69      	ldr	r3, [pc, #420]	; (80008a4 <main+0x254>)
 8000700:	2142      	movs	r1, #66	; 0x42
 8000702:	0018      	movs	r0, r3
 8000704:	f000 fcb7 	bl	8001076 <readRegSpi>
 8000708:	0003      	movs	r3, r0
 800070a:	7023      	strb	r3, [r4, #0]
     printf("\n\rSX1272 chip ID: %x", sx_id);
 800070c:	197b      	adds	r3, r7, r5
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	4b65      	ldr	r3, [pc, #404]	; (80008a8 <main+0x258>)
 8000712:	0011      	movs	r1, r2
 8000714:	0018      	movs	r0, r3
 8000716:	f005 fa31 	bl	8005b7c <iprintf>
     // Don't forget to set Bit7 (MSB) of register address for writing!
     writeRegSpi(&hspi2, 0xC0, 0xFF); // DIOmapping1  to --
 800071a:	4b62      	ldr	r3, [pc, #392]	; (80008a4 <main+0x254>)
 800071c:	22ff      	movs	r2, #255	; 0xff
 800071e:	21c0      	movs	r1, #192	; 0xc0
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fc7b 	bl	800101c <writeRegSpi>
     writeRegSpi(&hspi2, 0xC1, 0xFF); // DIOmapping2 to --
 8000726:	4b5f      	ldr	r3, [pc, #380]	; (80008a4 <main+0x254>)
 8000728:	22ff      	movs	r2, #255	; 0xff
 800072a:	21c1      	movs	r1, #193	; 0xc1
 800072c:	0018      	movs	r0, r3
 800072e:	f000 fc75 	bl	800101c <writeRegSpi>
     HAL_Delay(10);
 8000732:	200a      	movs	r0, #10
 8000734:	f001 f8fc 	bl	8001930 <HAL_Delay>
     writeRegSpi(&hspi2, 0x81, 0x01); // CRTL1 to STBY mode
 8000738:	4b5a      	ldr	r3, [pc, #360]	; (80008a4 <main+0x254>)
 800073a:	2201      	movs	r2, #1
 800073c:	2181      	movs	r1, #129	; 0x81
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fc6c 	bl	800101c <writeRegSpi>
     HAL_Delay(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f001 f8f3 	bl	8001930 <HAL_Delay>
     writeRegSpi(&hspi2, 0xA4, 0x07); // REGOSC to CLKOUT=off
 800074a:	4b56      	ldr	r3, [pc, #344]	; (80008a4 <main+0x254>)
 800074c:	2207      	movs	r2, #7
 800074e:	21a4      	movs	r1, #164	; 0xa4
 8000750:	0018      	movs	r0, r3
 8000752:	f000 fc63 	bl	800101c <writeRegSpi>
     HAL_Delay(10);
 8000756:	200a      	movs	r0, #10
 8000758:	f001 f8ea 	bl	8001930 <HAL_Delay>
     writeRegSpi(&hspi2, 0x81, 0x00); // CTRL1 to SLEEP mode
 800075c:	4b51      	ldr	r3, [pc, #324]	; (80008a4 <main+0x254>)
 800075e:	2200      	movs	r2, #0
 8000760:	2181      	movs	r1, #129	; 0x81
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fc5a 	bl	800101c <writeRegSpi>

     //Change SX1272 to LoRa mode from default FSK/OOK:
     HAL_Delay(10);
 8000768:	200a      	movs	r0, #10
 800076a:	f001 f8e1 	bl	8001930 <HAL_Delay>
     writeRegSpi(&hspi2, 0x81, 0x80); // CTRL1 to SLEEP mode
 800076e:	4b4d      	ldr	r3, [pc, #308]	; (80008a4 <main+0x254>)
 8000770:	2280      	movs	r2, #128	; 0x80
 8000772:	2181      	movs	r1, #129	; 0x81
 8000774:	0018      	movs	r0, r3
 8000776:	f000 fc51 	bl	800101c <writeRegSpi>
     HAL_GPIO_WritePin (CS_RF_GPIO_Port, CS_RF_Pin, GPIO_PIN_SET);
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	2201      	movs	r2, #1
 8000780:	2110      	movs	r1, #16
 8000782:	0018      	movs	r0, r3
 8000784:	f001 fe50 	bl	8002428 <HAL_GPIO_WritePin>
     printf("\n\rSX1272 should be in STOP mode...");
 8000788:	4b48      	ldr	r3, [pc, #288]	; (80008ac <main+0x25c>)
 800078a:	0018      	movs	r0, r3
 800078c:	f005 f9f6 	bl	8005b7c <iprintf>

     // Read flash ID, then put flash to deep sleep
    uint8_t read_id_cmd[4] = {0x9F,0x55,0xAA,0x55};
 8000790:	2408      	movs	r4, #8
 8000792:	193b      	adds	r3, r7, r4
 8000794:	4a46      	ldr	r2, [pc, #280]	; (80008b0 <main+0x260>)
 8000796:	601a      	str	r2, [r3, #0]
    uint8_t read_result[4];
    HAL_GPIO_WritePin (FS_CS_GPIO_Port, FS_CS_Pin, GPIO_PIN_RESET);
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	019b      	lsls	r3, r3, #6
 800079c:	4845      	ldr	r0, [pc, #276]	; (80008b4 <main+0x264>)
 800079e:	2200      	movs	r2, #0
 80007a0:	0019      	movs	r1, r3
 80007a2:	f001 fe41 	bl	8002428 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi1, read_id_cmd, read_result, 4, SPI_TIMEOUT_SECS);
 80007a6:	1d3a      	adds	r2, r7, #4
 80007a8:	1939      	adds	r1, r7, r4
 80007aa:	4843      	ldr	r0, [pc, #268]	; (80008b8 <main+0x268>)
 80007ac:	2303      	movs	r3, #3
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2304      	movs	r3, #4
 80007b2:	f004 f86d 	bl	8004890 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin (FS_CS_GPIO_Port, FS_CS_Pin, GPIO_PIN_SET);
 80007b6:	2380      	movs	r3, #128	; 0x80
 80007b8:	019b      	lsls	r3, r3, #6
 80007ba:	483e      	ldr	r0, [pc, #248]	; (80008b4 <main+0x264>)
 80007bc:	2201      	movs	r2, #1
 80007be:	0019      	movs	r1, r3
 80007c0:	f001 fe32 	bl	8002428 <HAL_GPIO_WritePin>
    printf("\n\rMX25 chip ID: %x %x %x",read_result[1], read_result[2], read_result[3]);
 80007c4:	1d3b      	adds	r3, r7, #4
 80007c6:	785b      	ldrb	r3, [r3, #1]
 80007c8:	0019      	movs	r1, r3
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	789b      	ldrb	r3, [r3, #2]
 80007ce:	001a      	movs	r2, r3
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	78db      	ldrb	r3, [r3, #3]
 80007d4:	4839      	ldr	r0, [pc, #228]	; (80008bc <main+0x26c>)
 80007d6:	f005 f9d1 	bl	8005b7c <iprintf>
    uint8_t sleep_command[1] = {0xB9};
 80007da:	003b      	movs	r3, r7
 80007dc:	4a38      	ldr	r2, [pc, #224]	; (80008c0 <main+0x270>)
 80007de:	7812      	ldrb	r2, [r2, #0]
 80007e0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin (FS_CS_GPIO_Port, FS_CS_Pin, GPIO_PIN_RESET);
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	019b      	lsls	r3, r3, #6
 80007e6:	4833      	ldr	r0, [pc, #204]	; (80008b4 <main+0x264>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	0019      	movs	r1, r3
 80007ec:	f001 fe1c 	bl	8002428 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, sleep_command, 1, SPI_TIMEOUT_SECS);
 80007f0:	0039      	movs	r1, r7
 80007f2:	4831      	ldr	r0, [pc, #196]	; (80008b8 <main+0x268>)
 80007f4:	2303      	movs	r3, #3
 80007f6:	2201      	movs	r2, #1
 80007f8:	f003 fdcd 	bl	8004396 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin (FS_CS_GPIO_Port, FS_CS_Pin, GPIO_PIN_SET);
 80007fc:	2380      	movs	r3, #128	; 0x80
 80007fe:	019b      	lsls	r3, r3, #6
 8000800:	482c      	ldr	r0, [pc, #176]	; (80008b4 <main+0x264>)
 8000802:	2201      	movs	r2, #1
 8000804:	0019      	movs	r1, r3
 8000806:	f001 fe0f 	bl	8002428 <HAL_GPIO_WritePin>
    printf("\n\rMX25 put to deep sleep.");
 800080a:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <main+0x274>)
 800080c:	0018      	movs	r0, r3
 800080e:	f005 f9b5 	bl	8005b7c <iprintf>

    printf("\n\rsetting SPI1/2 lines to low power state...");
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <main+0x278>)
 8000814:	0018      	movs	r0, r3
 8000816:	f005 f9b1 	bl	8005b7c <iprintf>
    spiToLowPowerState();
 800081a:	f000 fd07 	bl	800122c <spiToLowPowerState>




  printf("\n\rAbout to put STM32 to STOP mode...");
 800081e:	4b2b      	ldr	r3, [pc, #172]	; (80008cc <main+0x27c>)
 8000820:	0018      	movs	r0, r3
 8000822:	f005 f9ab 	bl	8005b7c <iprintf>
  // Blink LED a few times
  for (int i=0; i<3; i++)
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
 800082a:	e00e      	b.n	800084a <main+0x1fa>
  {
	setRgbLed(MAGENTA);
 800082c:	2005      	movs	r0, #5
 800082e:	f000 fc4d 	bl	80010cc <setRgbLed>
	HAL_Delay(SHORT_BLINK);
 8000832:	2064      	movs	r0, #100	; 0x64
 8000834:	f001 f87c 	bl	8001930 <HAL_Delay>
	setRgbLed(BLACK);
 8000838:	2007      	movs	r0, #7
 800083a:	f000 fc47 	bl	80010cc <setRgbLed>
	HAL_Delay(SHORT_BLINK);
 800083e:	2064      	movs	r0, #100	; 0x64
 8000840:	f001 f876 	bl	8001930 <HAL_Delay>
  for (int i=0; i<3; i++)
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	3301      	adds	r3, #1
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	2b02      	cmp	r3, #2
 800084e:	dded      	ble.n	800082c <main+0x1dc>
  }

  void EnterStopMode(void);

  for (int i=0; i<3; i++)
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	e00e      	b.n	8000874 <main+0x224>
  {
	setRgbLed(YELLOW);
 8000856:	2001      	movs	r0, #1
 8000858:	f000 fc38 	bl	80010cc <setRgbLed>
	HAL_Delay(SHORT_BLINK);
 800085c:	2064      	movs	r0, #100	; 0x64
 800085e:	f001 f867 	bl	8001930 <HAL_Delay>
	setRgbLed(BLACK);
 8000862:	2007      	movs	r0, #7
 8000864:	f000 fc32 	bl	80010cc <setRgbLed>
	HAL_Delay(SHORT_BLINK);
 8000868:	2064      	movs	r0, #100	; 0x64
 800086a:	f001 f861 	bl	8001930 <HAL_Delay>
  for (int i=0; i<3; i++)
 800086e:	693b      	ldr	r3, [r7, #16]
 8000870:	3301      	adds	r3, #1
 8000872:	613b      	str	r3, [r7, #16]
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	2b02      	cmp	r3, #2
 8000878:	dded      	ble.n	8000856 <main+0x206>
  }
  printf("\n\rThis should not print yet...");
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <main+0x280>)
 800087c:	0018      	movs	r0, r3
 800087e:	f005 f97d 	bl	8005b7c <iprintf>

  while (1)
 8000882:	e7fe      	b.n	8000882 <main+0x232>
 8000884:	2000020c 	.word	0x2000020c
 8000888:	40007000 	.word	0x40007000
 800088c:	ffffe7ff 	.word	0xffffe7ff
 8000890:	ffffa230 	.word	0xffffa230
 8000894:	200000ec 	.word	0x200000ec
 8000898:	08006ce8 	.word	0x08006ce8
 800089c:	08006d04 	.word	0x08006d04
 80008a0:	50000800 	.word	0x50000800
 80008a4:	200001b4 	.word	0x200001b4
 80008a8:	08006d1c 	.word	0x08006d1c
 80008ac:	08006d34 	.word	0x08006d34
 80008b0:	55aa559f 	.word	0x55aa559f
 80008b4:	50000400 	.word	0x50000400
 80008b8:	2000015c 	.word	0x2000015c
 80008bc:	08006d58 	.word	0x08006d58
 80008c0:	08006e08 	.word	0x08006e08
 80008c4:	08006d74 	.word	0x08006d74
 80008c8:	08006d90 	.word	0x08006d90
 80008cc:	08006dc0 	.word	0x08006dc0
 80008d0:	08006de8 	.word	0x08006de8

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b09b      	sub	sp, #108	; 0x6c
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	2434      	movs	r4, #52	; 0x34
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	0018      	movs	r0, r3
 80008e0:	2334      	movs	r3, #52	; 0x34
 80008e2:	001a      	movs	r2, r3
 80008e4:	2100      	movs	r1, #0
 80008e6:	f005 f941 	bl	8005b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ea:	2320      	movs	r3, #32
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	0018      	movs	r0, r3
 80008f0:	2314      	movs	r3, #20
 80008f2:	001a      	movs	r2, r3
 80008f4:	2100      	movs	r1, #0
 80008f6:	f005 f939 	bl	8005b6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fa:	003b      	movs	r3, r7
 80008fc:	0018      	movs	r0, r3
 80008fe:	2320      	movs	r3, #32
 8000900:	001a      	movs	r2, r3
 8000902:	2100      	movs	r1, #0
 8000904:	f005 f932 	bl	8005b6c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <SystemClock_Config+0xdc>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a29      	ldr	r2, [pc, #164]	; (80009b4 <SystemClock_Config+0xe0>)
 800090e:	401a      	ands	r2, r3
 8000910:	4b27      	ldr	r3, [pc, #156]	; (80009b0 <SystemClock_Config+0xdc>)
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	0109      	lsls	r1, r1, #4
 8000916:	430a      	orrs	r2, r1
 8000918:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800091a:	0021      	movs	r1, r4
 800091c:	187b      	adds	r3, r7, r1
 800091e:	220a      	movs	r2, #10
 8000920:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV4;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2209      	movs	r2, #9
 8000926:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2210      	movs	r2, #16
 800092c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2201      	movs	r2, #1
 8000932:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000934:	187b      	adds	r3, r7, r1
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	187b      	adds	r3, r7, r1
 800093c:	0018      	movs	r0, r3
 800093e:	f002 f953 	bl	8002be8 <HAL_RCC_OscConfig>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000946:	f000 fd0f 	bl	8001368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094a:	2120      	movs	r1, #32
 800094c:	187b      	adds	r3, r7, r1
 800094e:	220f      	movs	r2, #15
 8000950:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2201      	movs	r2, #1
 8000956:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2100      	movs	r1, #0
 800096e:	0018      	movs	r0, r3
 8000970:	f002 fcb6 	bl	80032e0 <HAL_RCC_ClockConfig>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000978:	f000 fcf6 	bl	8001368 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800097c:	003b      	movs	r3, r7
 800097e:	2229      	movs	r2, #41	; 0x29
 8000980:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000982:	003b      	movs	r3, r7
 8000984:	2201      	movs	r2, #1
 8000986:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000988:	003b      	movs	r3, r7
 800098a:	2200      	movs	r2, #0
 800098c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800098e:	003b      	movs	r3, r7
 8000990:	2280      	movs	r2, #128	; 0x80
 8000992:	0292      	lsls	r2, r2, #10
 8000994:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000996:	003b      	movs	r3, r7
 8000998:	0018      	movs	r0, r3
 800099a:	f002 fec5 	bl	8003728 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80009a2:	f000 fce1 	bl	8001368 <Error_Handler>
  }
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b01b      	add	sp, #108	; 0x6c
 80009ac:	bd90      	pop	{r4, r7, pc}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	40007000 	.word	0x40007000
 80009b4:	ffffe7ff 	.word	0xffffe7ff

080009b8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009be:	003b      	movs	r3, r7
 80009c0:	0018      	movs	r0, r3
 80009c2:	2308      	movs	r3, #8
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f005 f8d0 	bl	8005b6c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80009cc:	4b30      	ldr	r3, [pc, #192]	; (8000a90 <MX_ADC_Init+0xd8>)
 80009ce:	4a31      	ldr	r2, [pc, #196]	; (8000a94 <MX_ADC_Init+0xdc>)
 80009d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80009d2:	4b2f      	ldr	r3, [pc, #188]	; (8000a90 <MX_ADC_Init+0xd8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80009d8:	4b2d      	ldr	r3, [pc, #180]	; (8000a90 <MX_ADC_Init+0xd8>)
 80009da:	22c0      	movs	r2, #192	; 0xc0
 80009dc:	0612      	lsls	r2, r2, #24
 80009de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80009e0:	4b2b      	ldr	r3, [pc, #172]	; (8000a90 <MX_ADC_Init+0xd8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009e6:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <MX_ADC_Init+0xd8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_ADC_Init+0xd8>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_ADC_Init+0xd8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80009f8:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <MX_ADC_Init+0xd8>)
 80009fa:	2220      	movs	r2, #32
 80009fc:	2100      	movs	r1, #0
 80009fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a00:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a02:	2221      	movs	r2, #33	; 0x21
 8000a04:	2100      	movs	r1, #0
 8000a06:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a10:	22c2      	movs	r2, #194	; 0xc2
 8000a12:	32ff      	adds	r2, #255	; 0xff
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a18:	222c      	movs	r2, #44	; 0x2c
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a20:	2204      	movs	r2, #4
 8000a22:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f000 ff9a 	bl	8001978 <HAL_ADC_Init>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000a48:	f000 fc8e 	bl	8001368 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <MX_ADC_Init+0xe0>)
 8000a50:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000a52:	003b      	movs	r3, r7
 8000a54:	2280      	movs	r2, #128	; 0x80
 8000a56:	0152      	lsls	r2, r2, #5
 8000a58:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a5a:	003a      	movs	r2, r7
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a5e:	0011      	movs	r1, r2
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 f8fd 	bl	8001c60 <HAL_ADC_ConfigChannel>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000a6a:	f000 fc7d 	bl	8001368 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000a6e:	003b      	movs	r3, r7
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <MX_ADC_Init+0xe4>)
 8000a72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a74:	003a      	movs	r2, r7
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_ADC_Init+0xd8>)
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f001 f8f0 	bl	8001c60 <HAL_ADC_ConfigChannel>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000a84:	f000 fc70 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b002      	add	sp, #8
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000090 	.word	0x20000090
 8000a94:	40012400 	.word	0x40012400
 8000a98:	48040000 	.word	0x48040000
 8000a9c:	44020000 	.word	0x44020000

08000aa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <MX_I2C1_Init+0x78>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aac:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <MX_I2C1_Init+0x7c>)
 8000aae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ab0:	4b18      	ldr	r3, [pc, #96]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ab6:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000adc:	0018      	movs	r0, r3
 8000ade:	f001 fcc1 	bl	8002464 <HAL_I2C_Init>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ae6:	f000 fc3f 	bl	8001368 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aea:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000aec:	2100      	movs	r1, #0
 8000aee:	0018      	movs	r0, r3
 8000af0:	f001 ffe2 	bl	8002ab8 <HAL_I2CEx_ConfigAnalogFilter>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000af8:	f000 fc36 	bl	8001368 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <MX_I2C1_Init+0x74>)
 8000afe:	2100      	movs	r1, #0
 8000b00:	0018      	movs	r0, r3
 8000b02:	f002 f825 	bl	8002b50 <HAL_I2CEx_ConfigDigitalFilter>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b0a:	f000 fc2d 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200000ec 	.word	0x200000ec
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	00000e14 	.word	0x00000e14

08000b20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b090      	sub	sp, #64	; 0x40
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000b26:	232c      	movs	r3, #44	; 0x2c
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	2314      	movs	r3, #20
 8000b2e:	001a      	movs	r2, r3
 8000b30:	2100      	movs	r1, #0
 8000b32:	f005 f81b 	bl	8005b6c <memset>
  RTC_DateTypeDef sDate = {0};
 8000b36:	2328      	movs	r3, #40	; 0x28
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000b3e:	003b      	movs	r3, r7
 8000b40:	0018      	movs	r0, r3
 8000b42:	2328      	movs	r3, #40	; 0x28
 8000b44:	001a      	movs	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f005 f810 	bl	8005b6c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b4c:	4b40      	ldr	r3, [pc, #256]	; (8000c50 <MX_RTC_Init+0x130>)
 8000b4e:	4a41      	ldr	r2, [pc, #260]	; (8000c54 <MX_RTC_Init+0x134>)
 8000b50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b52:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <MX_RTC_Init+0x130>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b58:	4b3d      	ldr	r3, [pc, #244]	; (8000c50 <MX_RTC_Init+0x130>)
 8000b5a:	227f      	movs	r2, #127	; 0x7f
 8000b5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <MX_RTC_Init+0x130>)
 8000b60:	22ff      	movs	r2, #255	; 0xff
 8000b62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b64:	4b3a      	ldr	r3, [pc, #232]	; (8000c50 <MX_RTC_Init+0x130>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b6a:	4b39      	ldr	r3, [pc, #228]	; (8000c50 <MX_RTC_Init+0x130>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b70:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <MX_RTC_Init+0x130>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b76:	4b36      	ldr	r3, [pc, #216]	; (8000c50 <MX_RTC_Init+0x130>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b7c:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <MX_RTC_Init+0x130>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f002 ff18 	bl	80039b4 <HAL_RTC_Init>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000b88:	f000 fbee 	bl	8001368 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000b8c:	212c      	movs	r1, #44	; 0x2c
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000bac:	1879      	adds	r1, r7, r1
 8000bae:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <MX_RTC_Init+0x130>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f002 ff9c 	bl	8003af0 <HAL_RTC_SetTime>
 8000bb8:	1e03      	subs	r3, r0, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000bbc:	f000 fbd4 	bl	8001368 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000bc0:	2128      	movs	r1, #40	; 0x28
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2201      	movs	r2, #1
 8000bcc:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000bda:	1879      	adds	r1, r7, r1
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_RTC_Init+0x130>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	0018      	movs	r0, r3
 8000be2:	f003 f849 	bl	8003c78 <HAL_RTC_SetDate>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000bea:	f000 fbbd 	bl	8001368 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000bee:	003b      	movs	r3, r7
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000bf4:	003b      	movs	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000c00:	003b      	movs	r3, r7
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c06:	003b      	movs	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000c24:	003b      	movs	r3, r7
 8000c26:	2220      	movs	r2, #32
 8000c28:	2101      	movs	r1, #1
 8000c2a:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000c2c:	003b      	movs	r3, r7
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	0052      	lsls	r2, r2, #1
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000c34:	0039      	movs	r1, r7
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_RTC_Init+0x130>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f003 f8ca 	bl	8003dd4 <HAL_RTC_SetAlarm_IT>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <MX_RTC_Init+0x128>
  {
    Error_Handler();
 8000c44:	f000 fb90 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b010      	add	sp, #64	; 0x40
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000138 	.word	0x20000138
 8000c54:	40002800 	.word	0x40002800

08000c58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c5e:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <MX_SPI1_Init+0x6c>)
 8000c60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c64:	2282      	movs	r2, #130	; 0x82
 8000c66:	0052      	lsls	r2, r2, #1
 8000c68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	0092      	lsls	r2, r2, #2
 8000c88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <MX_SPI1_Init+0x68>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f003 fab6 	bl	800421c <HAL_SPI_Init>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000cb4:	f000 fb58 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	2000015c 	.word	0x2000015c
 8000cc4:	40013000 	.word	0x40013000

08000cc8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000cce:	4a19      	ldr	r2, [pc, #100]	; (8000d34 <MX_SPI2_Init+0x6c>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000cd4:	2282      	movs	r2, #130	; 0x82
 8000cd6:	0052      	lsls	r2, r2, #1
 8000cd8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cda:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce6:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cec:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000cf4:	2280      	movs	r2, #128	; 0x80
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <MX_SPI2_Init+0x68>)
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f003 fa7e 	bl	800421c <HAL_SPI_Init>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d24:	f000 fb20 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	200001b4 	.word	0x200001b4
 8000d34:	40003800 	.word	0x40003800

08000d38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d3e:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <MX_USART1_UART_Init+0x5c>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d44:	22e1      	movs	r2, #225	; 0xe1
 8000d46:	0252      	lsls	r2, r2, #9
 8000d48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <MX_USART1_UART_Init+0x58>)
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f004 f881 	bl	8004e84 <HAL_UART_Init>
 8000d82:	1e03      	subs	r3, r0, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d86:	f000 faef 	bl	8001368 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000020c 	.word	0x2000020c
 8000d94:	40013800 	.word	0x40013800

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b08b      	sub	sp, #44	; 0x2c
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	2414      	movs	r4, #20
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	0018      	movs	r0, r3
 8000da4:	2314      	movs	r3, #20
 8000da6:	001a      	movs	r2, r3
 8000da8:	2100      	movs	r1, #0
 8000daa:	f004 fedf 	bl	8005b6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dae:	4b94      	ldr	r3, [pc, #592]	; (8001000 <MX_GPIO_Init+0x268>)
 8000db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000db2:	4b93      	ldr	r3, [pc, #588]	; (8001000 <MX_GPIO_Init+0x268>)
 8000db4:	2104      	movs	r1, #4
 8000db6:	430a      	orrs	r2, r1
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dba:	4b91      	ldr	r3, [pc, #580]	; (8001000 <MX_GPIO_Init+0x268>)
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b8e      	ldr	r3, [pc, #568]	; (8001000 <MX_GPIO_Init+0x268>)
 8000dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dca:	4b8d      	ldr	r3, [pc, #564]	; (8001000 <MX_GPIO_Init+0x268>)
 8000dcc:	2102      	movs	r1, #2
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd2:	4b8b      	ldr	r3, [pc, #556]	; (8001000 <MX_GPIO_Init+0x268>)
 8000dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b88      	ldr	r3, [pc, #544]	; (8001000 <MX_GPIO_Init+0x268>)
 8000de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de2:	4b87      	ldr	r3, [pc, #540]	; (8001000 <MX_GPIO_Init+0x268>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	430a      	orrs	r2, r1
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dea:	4b85      	ldr	r3, [pc, #532]	; (8001000 <MX_GPIO_Init+0x268>)
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	2201      	movs	r2, #1
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	4b82      	ldr	r3, [pc, #520]	; (8001000 <MX_GPIO_Init+0x268>)
 8000df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dfa:	4b81      	ldr	r3, [pc, #516]	; (8001000 <MX_GPIO_Init+0x268>)
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e02:	4b7f      	ldr	r3, [pc, #508]	; (8001000 <MX_GPIO_Init+0x268>)
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	2208      	movs	r2, #8
 8000e08:	4013      	ands	r3, r2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0e:	4b7c      	ldr	r3, [pc, #496]	; (8001000 <MX_GPIO_Init+0x268>)
 8000e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e12:	4b7b      	ldr	r3, [pc, #492]	; (8001000 <MX_GPIO_Init+0x268>)
 8000e14:	2180      	movs	r1, #128	; 0x80
 8000e16:	430a      	orrs	r2, r1
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e1a:	4b79      	ldr	r3, [pc, #484]	; (8001000 <MX_GPIO_Init+0x268>)
 8000e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1e:	2280      	movs	r2, #128	; 0x80
 8000e20:	4013      	ands	r3, r2
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDF_Pin|FS_CS_Pin, GPIO_PIN_SET);
 8000e26:	2384      	movs	r3, #132	; 0x84
 8000e28:	019b      	lsls	r3, r3, #6
 8000e2a:	4876      	ldr	r0, [pc, #472]	; (8001004 <MX_GPIO_Init+0x26c>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	0019      	movs	r1, r3
 8000e30:	f001 fafa 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LEDR_Pin|LEDG_Pin, GPIO_PIN_SET);
 8000e34:	4b74      	ldr	r3, [pc, #464]	; (8001008 <MX_GPIO_Init+0x270>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	2103      	movs	r1, #3
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f001 faf4 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LEDB_Pin|RESET_RF_Pin, GPIO_PIN_SET);
 8000e40:	4b72      	ldr	r3, [pc, #456]	; (800100c <MX_GPIO_Init+0x274>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	2106      	movs	r1, #6
 8000e46:	0018      	movs	r0, r3
 8000e48:	f001 faee 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_RF_GPIO_Port, CS_RF_Pin, GPIO_PIN_SET);
 8000e4c:	23a0      	movs	r3, #160	; 0xa0
 8000e4e:	05db      	lsls	r3, r3, #23
 8000e50:	2201      	movs	r2, #1
 8000e52:	2110      	movs	r1, #16
 8000e54:	0018      	movs	r0, r3
 8000e56:	f001 fae7 	bl	8002428 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13_Pin PC11_Pin PC10_Pin PC12_Pin
                           PC9_Pin PC0_Pin PC7_Pin PC8_Pin
                           PC6_Pin */
  GPIO_InitStruct.Pin = PC13_Pin|PC11_Pin|PC10_Pin|PC12_Pin
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	4a6c      	ldr	r2, [pc, #432]	; (8001010 <MX_GPIO_Init+0x278>)
 8000e5e:	601a      	str	r2, [r3, #0]
                          |PC9_Pin|PC0_Pin|PC7_Pin|PC8_Pin
                          |PC6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	2200      	movs	r2, #0
 8000e64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	2202      	movs	r2, #2
 8000e6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	4a67      	ldr	r2, [pc, #412]	; (800100c <MX_GPIO_Init+0x274>)
 8000e70:	0019      	movs	r1, r3
 8000e72:	0010      	movs	r0, r2
 8000e74:	f001 f878 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15_Pin PA12_Pin PA11_Pin PA8_Pin
                           PA2_Pin PA5_Pin BUTTON_Pin PA3_Pin */
  GPIO_InitStruct.Pin = PA15_Pin|PA12_Pin|PA11_Pin|PA8_Pin
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	4a66      	ldr	r2, [pc, #408]	; (8001014 <MX_GPIO_Init+0x27c>)
 8000e7c:	601a      	str	r2, [r3, #0]
                          |PA2_Pin|PA5_Pin|BUTTON_Pin|PA3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2202      	movs	r2, #2
 8000e88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	193a      	adds	r2, r7, r4
 8000e8c:	23a0      	movs	r3, #160	; 0xa0
 8000e8e:	05db      	lsls	r3, r3, #23
 8000e90:	0011      	movs	r1, r2
 8000e92:	0018      	movs	r0, r3
 8000e94:	f001 f868 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDF_Pin */
  GPIO_InitStruct.Pin = LEDF_Pin;
 8000e98:	0021      	movs	r1, r4
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2280      	movs	r2, #128	; 0x80
 8000e9e:	0052      	lsls	r2, r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea2:	000c      	movs	r4, r1
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LEDF_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	4a52      	ldr	r2, [pc, #328]	; (8001004 <MX_GPIO_Init+0x26c>)
 8000eba:	0019      	movs	r1, r3
 8000ebc:	0010      	movs	r0, r2
 8000ebe:	f001 f853 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2_Pin */
  GPIO_InitStruct.Pin = PD2_Pin;
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PD2_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	4a50      	ldr	r2, [pc, #320]	; (8001018 <MX_GPIO_Init+0x280>)
 8000ed8:	0019      	movs	r1, r3
 8000eda:	0010      	movs	r0, r2
 8000edc:	f001 f844 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDR_Pin LEDG_Pin */
  GPIO_InitStruct.Pin = LEDR_Pin|LEDG_Pin;
 8000ee0:	193b      	adds	r3, r7, r4
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	2201      	movs	r2, #1
 8000eea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	193b      	adds	r3, r7, r4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	4a43      	ldr	r2, [pc, #268]	; (8001008 <MX_GPIO_Init+0x270>)
 8000efc:	0019      	movs	r1, r3
 8000efe:	0010      	movs	r0, r2
 8000f00:	f001 f832 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7_Pin PB0_Pin PB1_Pin PB2_Pin */
  GPIO_InitStruct.Pin = PB7_Pin|PB0_Pin|PB1_Pin|PB2_Pin;
 8000f04:	193b      	adds	r3, r7, r4
 8000f06:	2287      	movs	r2, #135	; 0x87
 8000f08:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	2202      	movs	r2, #2
 8000f14:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	4a3a      	ldr	r2, [pc, #232]	; (8001004 <MX_GPIO_Init+0x26c>)
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	0010      	movs	r0, r2
 8000f1e:	f001 f823 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin RESET_RF_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|RESET_RF_Pin;
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	2206      	movs	r2, #6
 8000f26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	4a33      	ldr	r2, [pc, #204]	; (800100c <MX_GPIO_Init+0x274>)
 8000f3e:	0019      	movs	r1, r3
 8000f40:	0010      	movs	r0, r2
 8000f42:	f001 f811 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO1_Pin DIO0_Pin DIO2_Pin */
  GPIO_InitStruct.Pin = DIO1_Pin|DIO0_Pin|DIO2_Pin;
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	22c2      	movs	r2, #194	; 0xc2
 8000f4a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	2203      	movs	r2, #3
 8000f50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f58:	193a      	adds	r2, r7, r4
 8000f5a:	23a0      	movs	r3, #160	; 0xa0
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 f801 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : FS_CS_Pin */
  GPIO_InitStruct.Pin = FS_CS_Pin;
 8000f66:	0021      	movs	r1, r4
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	0192      	lsls	r2, r2, #6
 8000f6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f70:	000c      	movs	r4, r1
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2211      	movs	r2, #17
 8000f76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	2200      	movs	r2, #0
 8000f82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(FS_CS_GPIO_Port, &GPIO_InitStruct);
 8000f84:	193b      	adds	r3, r7, r4
 8000f86:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <MX_GPIO_Init+0x26c>)
 8000f88:	0019      	movs	r1, r3
 8000f8a:	0010      	movs	r0, r2
 8000f8c:	f000 ffec 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_RF_Pin */
  GPIO_InitStruct.Pin = CS_RF_Pin;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	2210      	movs	r2, #16
 8000f94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2201      	movs	r2, #1
 8000f9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(CS_RF_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	193a      	adds	r2, r7, r4
 8000faa:	23a0      	movs	r3, #160	; 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	0011      	movs	r1, r2
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 ffd9 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO3_Pin DIO4_Pin */
  GPIO_InitStruct.Pin = DIO3_Pin|DIO4_Pin;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	2230      	movs	r2, #48	; 0x30
 8000fba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	193b      	adds	r3, r7, r4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc8:	193b      	adds	r3, r7, r4
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <MX_GPIO_Init+0x274>)
 8000fcc:	0019      	movs	r1, r3
 8000fce:	0010      	movs	r0, r2
 8000fd0:	f000 ffca 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO5_Pin RF_SW_Pin */
  GPIO_InitStruct.Pin = DIO5_Pin|RF_SW_Pin;
 8000fd4:	0021      	movs	r1, r4
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	22c0      	movs	r2, #192	; 0xc0
 8000fda:	0152      	lsls	r2, r2, #5
 8000fdc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <MX_GPIO_Init+0x26c>)
 8000fee:	0019      	movs	r1, r3
 8000ff0:	0010      	movs	r0, r2
 8000ff2:	f000 ffb9 	bl	8001f68 <HAL_GPIO_Init>

}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b00b      	add	sp, #44	; 0x2c
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	40021000 	.word	0x40021000
 8001004:	50000400 	.word	0x50000400
 8001008:	50001c00 	.word	0x50001c00
 800100c:	50000800 	.word	0x50000800
 8001010:	00003fc1 	.word	0x00003fc1
 8001014:	0000992d 	.word	0x0000992d
 8001018:	50000c00 	.word	0x50000c00

0800101c <writeRegSpi>:
  MX_ADC_Init();
  HAL_ADCEx_Calibration_Start(&hadc,ADC_SINGLE_ENDED);
}

void writeRegSpi(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	0008      	movs	r0, r1
 8001026:	0011      	movs	r1, r2
 8001028:	1cfb      	adds	r3, r7, #3
 800102a:	1c02      	adds	r2, r0, #0
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	1cbb      	adds	r3, r7, #2
 8001030:	1c0a      	adds	r2, r1, #0
 8001032:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin (CS_RF_GPIO_Port, CS_RF_Pin, GPIO_PIN_RESET);
 8001034:	23a0      	movs	r3, #160	; 0xa0
 8001036:	05db      	lsls	r3, r3, #23
 8001038:	2200      	movs	r2, #0
 800103a:	2110      	movs	r1, #16
 800103c:	0018      	movs	r0, r3
 800103e:	f001 f9f3 	bl	8002428 <HAL_GPIO_WritePin>
	uint8_t reg_data[2] = {reg, data};
 8001042:	210c      	movs	r1, #12
 8001044:	187b      	adds	r3, r7, r1
 8001046:	1cfa      	adds	r2, r7, #3
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	187b      	adds	r3, r7, r1
 800104e:	1cba      	adds	r2, r7, #2
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(hspi, reg_data, TWO_BYTES, SPI_TIMEOUT_SECS);
 8001054:	1879      	adds	r1, r7, r1
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	2303      	movs	r3, #3
 800105a:	2202      	movs	r2, #2
 800105c:	f003 f99b 	bl	8004396 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin (CS_RF_GPIO_Port, CS_RF_Pin, GPIO_PIN_SET);
 8001060:	23a0      	movs	r3, #160	; 0xa0
 8001062:	05db      	lsls	r3, r3, #23
 8001064:	2201      	movs	r2, #1
 8001066:	2110      	movs	r1, #16
 8001068:	0018      	movs	r0, r3
 800106a:	f001 f9dd 	bl	8002428 <HAL_GPIO_WritePin>

}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b004      	add	sp, #16
 8001074:	bd80      	pop	{r7, pc}

08001076 <readRegSpi>:

uint8_t readRegSpi(SPI_HandleTypeDef *hspi, uint8_t reg)
{
 8001076:	b590      	push	{r4, r7, lr}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	000a      	movs	r2, r1
 8001080:	1cfb      	adds	r3, r7, #3
 8001082:	701a      	strb	r2, [r3, #0]
    uint8_t data = 0;
 8001084:	240f      	movs	r4, #15
 8001086:	193b      	adds	r3, r7, r4
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin (CS_RF_GPIO_Port, CS_RF_Pin, GPIO_PIN_RESET);
 800108c:	23a0      	movs	r3, #160	; 0xa0
 800108e:	05db      	lsls	r3, r3, #23
 8001090:	2200      	movs	r2, #0
 8001092:	2110      	movs	r1, #16
 8001094:	0018      	movs	r0, r3
 8001096:	f001 f9c7 	bl	8002428 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi, &reg, ONE_BYTE, SPI_TIMEOUT_SECS);
 800109a:	1cf9      	adds	r1, r7, #3
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	2303      	movs	r3, #3
 80010a0:	2201      	movs	r2, #1
 80010a2:	f003 f978 	bl	8004396 <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi,  &data, ONE_BYTE, SPI_TIMEOUT_SECS);
 80010a6:	1939      	adds	r1, r7, r4
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	2303      	movs	r3, #3
 80010ac:	2201      	movs	r2, #1
 80010ae:	f003 fac9 	bl	8004644 <HAL_SPI_Receive>
    HAL_GPIO_WritePin (CS_RF_GPIO_Port, CS_RF_Pin, GPIO_PIN_SET);
 80010b2:	23a0      	movs	r3, #160	; 0xa0
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	2201      	movs	r2, #1
 80010b8:	2110      	movs	r1, #16
 80010ba:	0018      	movs	r0, r3
 80010bc:	f001 f9b4 	bl	8002428 <HAL_GPIO_WritePin>
    return data;
 80010c0:	193b      	adds	r3, r7, r4
 80010c2:	781b      	ldrb	r3, [r3, #0]
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b005      	add	sp, #20
 80010ca:	bd90      	pop	{r4, r7, pc}

080010cc <setRgbLed>:


void setRgbLed(int led) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

	switch (led) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b07      	cmp	r3, #7
 80010d8:	d900      	bls.n	80010dc <setRgbLed+0x10>
 80010da:	e09d      	b.n	8001218 <setRgbLed+0x14c>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	009a      	lsls	r2, r3, #2
 80010e0:	4b4f      	ldr	r3, [pc, #316]	; (8001220 <setRgbLed+0x154>)
 80010e2:	18d3      	adds	r3, r2, r3
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	469f      	mov	pc, r3
	case RED:
		  HAL_GPIO_WritePin (LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 80010e8:	4b4e      	ldr	r3, [pc, #312]	; (8001224 <setRgbLed+0x158>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	2101      	movs	r1, #1
 80010ee:	0018      	movs	r0, r3
 80010f0:	f001 f99a 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <setRgbLed+0x158>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	2102      	movs	r1, #2
 80010fa:	0018      	movs	r0, r3
 80010fc:	f001 f994 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001100:	4b49      	ldr	r3, [pc, #292]	; (8001228 <setRgbLed+0x15c>)
 8001102:	2201      	movs	r2, #1
 8001104:	2102      	movs	r1, #2
 8001106:	0018      	movs	r0, r3
 8001108:	f001 f98e 	bl	8002428 <HAL_GPIO_WritePin>
		  break;
 800110c:	e084      	b.n	8001218 <setRgbLed+0x14c>
	case YELLOW:
		  HAL_GPIO_WritePin (LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 800110e:	4b45      	ldr	r3, [pc, #276]	; (8001224 <setRgbLed+0x158>)
 8001110:	2200      	movs	r2, #0
 8001112:	2101      	movs	r1, #1
 8001114:	0018      	movs	r0, r3
 8001116:	f001 f987 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <setRgbLed+0x158>)
 800111c:	2200      	movs	r2, #0
 800111e:	2102      	movs	r1, #2
 8001120:	0018      	movs	r0, r3
 8001122:	f001 f981 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001126:	4b40      	ldr	r3, [pc, #256]	; (8001228 <setRgbLed+0x15c>)
 8001128:	2201      	movs	r2, #1
 800112a:	2102      	movs	r1, #2
 800112c:	0018      	movs	r0, r3
 800112e:	f001 f97b 	bl	8002428 <HAL_GPIO_WritePin>
		  break;
 8001132:	e071      	b.n	8001218 <setRgbLed+0x14c>
case GREEN:
		  HAL_GPIO_WritePin (LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 8001134:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <setRgbLed+0x158>)
 8001136:	2201      	movs	r2, #1
 8001138:	2101      	movs	r1, #1
 800113a:	0018      	movs	r0, r3
 800113c:	f001 f974 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <setRgbLed+0x158>)
 8001142:	2200      	movs	r2, #0
 8001144:	2102      	movs	r1, #2
 8001146:	0018      	movs	r0, r3
 8001148:	f001 f96e 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <setRgbLed+0x15c>)
 800114e:	2201      	movs	r2, #1
 8001150:	2102      	movs	r1, #2
 8001152:	0018      	movs	r0, r3
 8001154:	f001 f968 	bl	8002428 <HAL_GPIO_WritePin>
		  break;
 8001158:	e05e      	b.n	8001218 <setRgbLed+0x14c>
	case CYAN:
		  HAL_GPIO_WritePin (LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 800115a:	4b32      	ldr	r3, [pc, #200]	; (8001224 <setRgbLed+0x158>)
 800115c:	2201      	movs	r2, #1
 800115e:	2101      	movs	r1, #1
 8001160:	0018      	movs	r0, r3
 8001162:	f001 f961 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <setRgbLed+0x158>)
 8001168:	2200      	movs	r2, #0
 800116a:	2102      	movs	r1, #2
 800116c:	0018      	movs	r0, r3
 800116e:	f001 f95b 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <setRgbLed+0x15c>)
 8001174:	2200      	movs	r2, #0
 8001176:	2102      	movs	r1, #2
 8001178:	0018      	movs	r0, r3
 800117a:	f001 f955 	bl	8002428 <HAL_GPIO_WritePin>
			  break;
 800117e:	e04b      	b.n	8001218 <setRgbLed+0x14c>
	case BLUE:
		  HAL_GPIO_WritePin (LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 8001180:	4b28      	ldr	r3, [pc, #160]	; (8001224 <setRgbLed+0x158>)
 8001182:	2201      	movs	r2, #1
 8001184:	2101      	movs	r1, #1
 8001186:	0018      	movs	r0, r3
 8001188:	f001 f94e 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <setRgbLed+0x158>)
 800118e:	2201      	movs	r2, #1
 8001190:	2102      	movs	r1, #2
 8001192:	0018      	movs	r0, r3
 8001194:	f001 f948 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <setRgbLed+0x15c>)
 800119a:	2200      	movs	r2, #0
 800119c:	2102      	movs	r1, #2
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 f942 	bl	8002428 <HAL_GPIO_WritePin>
		  break;
 80011a4:	e038      	b.n	8001218 <setRgbLed+0x14c>
	case MAGENTA:
		  HAL_GPIO_WritePin (LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <setRgbLed+0x158>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	2101      	movs	r1, #1
 80011ac:	0018      	movs	r0, r3
 80011ae:	f001 f93b 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <setRgbLed+0x158>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	2102      	movs	r1, #2
 80011b8:	0018      	movs	r0, r3
 80011ba:	f001 f935 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <setRgbLed+0x15c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	2102      	movs	r1, #2
 80011c4:	0018      	movs	r0, r3
 80011c6:	f001 f92f 	bl	8002428 <HAL_GPIO_WritePin>
		  break;
 80011ca:	e025      	b.n	8001218 <setRgbLed+0x14c>
	case WHITE:
		  HAL_GPIO_WritePin (LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_RESET);
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <setRgbLed+0x158>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	2101      	movs	r1, #1
 80011d2:	0018      	movs	r0, r3
 80011d4:	f001 f928 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_RESET);
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <setRgbLed+0x158>)
 80011da:	2200      	movs	r2, #0
 80011dc:	2102      	movs	r1, #2
 80011de:	0018      	movs	r0, r3
 80011e0:	f001 f922 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <setRgbLed+0x15c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	2102      	movs	r1, #2
 80011ea:	0018      	movs	r0, r3
 80011ec:	f001 f91c 	bl	8002428 <HAL_GPIO_WritePin>
		  break;
 80011f0:	e012      	b.n	8001218 <setRgbLed+0x14c>
	case BLACK:
		  HAL_GPIO_WritePin (LEDR_GPIO_Port, LEDR_Pin, GPIO_PIN_SET);
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <setRgbLed+0x158>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	2101      	movs	r1, #1
 80011f8:	0018      	movs	r0, r3
 80011fa:	f001 f915 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDG_GPIO_Port, LEDG_Pin, GPIO_PIN_SET);
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <setRgbLed+0x158>)
 8001200:	2201      	movs	r2, #1
 8001202:	2102      	movs	r1, #2
 8001204:	0018      	movs	r0, r3
 8001206:	f001 f90f 	bl	8002428 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin (LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <setRgbLed+0x15c>)
 800120c:	2201      	movs	r2, #1
 800120e:	2102      	movs	r1, #2
 8001210:	0018      	movs	r0, r3
 8001212:	f001 f909 	bl	8002428 <HAL_GPIO_WritePin>
		  break;
 8001216:	46c0      	nop			; (mov r8, r8)

	}
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}
 8001220:	08006e30 	.word	0x08006e30
 8001224:	50001c00 	.word	0x50001c00
 8001228:	50000800 	.word	0x50000800

0800122c <spiToLowPowerState>:

void spiToLowPowerState(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	0018      	movs	r0, r3
 8001236:	2314      	movs	r3, #20
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f004 fc96 	bl	8005b6c <memset>

    // SPI1 to MX25 Flash - drive lines as low outputs
    HAL_SPI_DeInit(&hspi1);
 8001240:	4b46      	ldr	r3, [pc, #280]	; (800135c <spiToLowPowerState+0x130>)
 8001242:	0018      	movs	r0, r3
 8001244:	f003 f87e 	bl	8004344 <HAL_SPI_DeInit>
    GPIO_InitStruct.Pin = SCK_P_Pin;
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	2208      	movs	r2, #8
 800124c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2201      	movs	r2, #1
 8001252:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_WritePin (SCK_P_GPIO_Port, SCK_P_Pin, GPIO_PIN_RESET);
 8001260:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <spiToLowPowerState+0x134>)
 8001262:	2200      	movs	r2, #0
 8001264:	2108      	movs	r1, #8
 8001266:	0018      	movs	r0, r3
 8001268:	f001 f8de 	bl	8002428 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(SCK_P_GPIO_Port, &GPIO_InitStruct);
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4a3c      	ldr	r2, [pc, #240]	; (8001360 <spiToLowPowerState+0x134>)
 8001270:	0019      	movs	r1, r3
 8001272:	0010      	movs	r0, r2
 8001274:	f000 fe78 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOSI_P_Pin;
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2220      	movs	r2, #32
 800127c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2201      	movs	r2, #1
 8001282:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_WritePin (MOSI_P_GPIO_Port, MOSI_P_Pin, GPIO_PIN_RESET);
 8001290:	4b33      	ldr	r3, [pc, #204]	; (8001360 <spiToLowPowerState+0x134>)
 8001292:	2200      	movs	r2, #0
 8001294:	2120      	movs	r1, #32
 8001296:	0018      	movs	r0, r3
 8001298:	f001 f8c6 	bl	8002428 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(MOSI_P_GPIO_Port, &GPIO_InitStruct);
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4a30      	ldr	r2, [pc, #192]	; (8001360 <spiToLowPowerState+0x134>)
 80012a0:	0019      	movs	r1, r3
 80012a2:	0010      	movs	r0, r2
 80012a4:	f000 fe60 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_P_Pin;
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2210      	movs	r2, #16
 80012ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2201      	movs	r2, #1
 80012b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
    HAL_GPIO_WritePin (MISO_P_GPIO_Port, MISO_P_Pin, GPIO_PIN_RESET);
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <spiToLowPowerState+0x134>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	2110      	movs	r1, #16
 80012c6:	0018      	movs	r0, r3
 80012c8:	f001 f8ae 	bl	8002428 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(MISO_P_GPIO_Port, &GPIO_InitStruct);
 80012cc:	1d3b      	adds	r3, r7, #4
 80012ce:	4a24      	ldr	r2, [pc, #144]	; (8001360 <spiToLowPowerState+0x134>)
 80012d0:	0019      	movs	r1, r3
 80012d2:	0010      	movs	r0, r2
 80012d4:	f000 fe48 	bl	8001f68 <HAL_GPIO_Init>

    // SPI2 to SX1272 - drive lines as low outputs
    HAL_SPI_DeInit(&hspi2);
 80012d8:	4b22      	ldr	r3, [pc, #136]	; (8001364 <spiToLowPowerState+0x138>)
 80012da:	0018      	movs	r0, r3
 80012dc:	f003 f832 	bl	8004344 <HAL_SPI_DeInit>
    GPIO_InitStruct.Pin = SCK_RF_Pin;
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2280      	movs	r2, #128	; 0x80
 80012e4:	00d2      	lsls	r2, r2, #3
 80012e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2203      	movs	r2, #3
 80012ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(SCK_RF_GPIO_Port, &GPIO_InitStruct);
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <spiToLowPowerState+0x134>)
 80012fe:	0019      	movs	r1, r3
 8001300:	0010      	movs	r0, r2
 8001302:	f000 fe31 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOSI_RF_Pin;
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	0212      	lsls	r2, r2, #8
 800130c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2203      	movs	r2, #3
 8001312:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(MOSI_RF_GPIO_Port, &GPIO_InitStruct);
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <spiToLowPowerState+0x134>)
 8001324:	0019      	movs	r1, r3
 8001326:	0010      	movs	r0, r2
 8001328:	f000 fe1e 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MISO_RF_Pin;
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	01d2      	lsls	r2, r2, #7
 8001332:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	2203      	movs	r2, #3
 8001338:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(MISO_RF_GPIO_Port, &GPIO_InitStruct);
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4a05      	ldr	r2, [pc, #20]	; (8001360 <spiToLowPowerState+0x134>)
 800134a:	0019      	movs	r1, r3
 800134c:	0010      	movs	r0, r2
 800134e:	f000 fe0b 	bl	8001f68 <HAL_GPIO_Init>
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b006      	add	sp, #24
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	2000015c 	.word	0x2000015c
 8001360:	50000400 	.word	0x50000400
 8001364:	200001b4 	.word	0x200001b4

08001368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800136c:	b672      	cpsid	i
}
 800136e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("\n\n\rOoops! Something went wrong...\n\r");
 8001370:	4b02      	ldr	r3, [pc, #8]	; (800137c <Error_Handler+0x14>)
 8001372:	0018      	movs	r0, r3
 8001374:	f004 fc02 	bl	8005b7c <iprintf>
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x10>
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	08006e0c 	.word	0x08006e0c

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <HAL_MspInit+0x24>)
 8001386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x24>)
 800138a:	2101      	movs	r1, #1
 800138c:	430a      	orrs	r2, r1
 800138e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <HAL_MspInit+0x24>)
 8001392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_MspInit+0x24>)
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	0549      	lsls	r1, r1, #21
 800139a:	430a      	orrs	r2, r1
 800139c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40021000 	.word	0x40021000

080013a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_ADC_MspInit+0x28>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d106      	bne.n	80013c8 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_ADC_MspInit+0x2c>)
 80013bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013be:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_ADC_MspInit+0x2c>)
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0089      	lsls	r1, r1, #2
 80013c4:	430a      	orrs	r2, r1
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013c8:	46c0      	nop			; (mov r8, r8)
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b002      	add	sp, #8
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40012400 	.word	0x40012400
 80013d4:	40021000 	.word	0x40021000

080013d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	240c      	movs	r4, #12
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	0018      	movs	r0, r3
 80013e6:	2314      	movs	r3, #20
 80013e8:	001a      	movs	r2, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	f004 fbbe 	bl	8005b6c <memset>
  if(hi2c->Instance==I2C1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_I2C_MspInit+0xa8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d13e      	bne.n	8001478 <HAL_I2C_MspInit+0xa0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_I2C_MspInit+0xac>)
 80013fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_I2C_MspInit+0xac>)
 8001400:	2102      	movs	r1, #2
 8001402:	430a      	orrs	r2, r1
 8001404:	62da      	str	r2, [r3, #44]	; 0x2c
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <HAL_I2C_MspInit+0xac>)
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1SDA_Pin;
 8001412:	193b      	adds	r3, r7, r4
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	0092      	lsls	r2, r2, #2
 8001418:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141a:	193b      	adds	r3, r7, r4
 800141c:	2212      	movs	r2, #18
 800141e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	193b      	adds	r3, r7, r4
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001426:	193b      	adds	r3, r7, r4
 8001428:	2202      	movs	r2, #2
 800142a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800142c:	193b      	adds	r3, r7, r4
 800142e:	2204      	movs	r2, #4
 8001430:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(I2C1SDA_GPIO_Port, &GPIO_InitStruct);
 8001432:	193b      	adds	r3, r7, r4
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <HAL_I2C_MspInit+0xb0>)
 8001436:	0019      	movs	r1, r3
 8001438:	0010      	movs	r0, r2
 800143a:	f000 fd95 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1CLK_Pin;
 800143e:	0021      	movs	r1, r4
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2240      	movs	r2, #64	; 0x40
 8001444:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2212      	movs	r2, #18
 800144a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2202      	movs	r2, #2
 8001456:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2201      	movs	r2, #1
 800145c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(I2C1CLK_GPIO_Port, &GPIO_InitStruct);
 800145e:	187b      	adds	r3, r7, r1
 8001460:	4a09      	ldr	r2, [pc, #36]	; (8001488 <HAL_I2C_MspInit+0xb0>)
 8001462:	0019      	movs	r1, r3
 8001464:	0010      	movs	r0, r2
 8001466:	f000 fd7f 	bl	8001f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_I2C_MspInit+0xac>)
 800146c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800146e:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_I2C_MspInit+0xac>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	0389      	lsls	r1, r1, #14
 8001474:	430a      	orrs	r2, r1
 8001476:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b009      	add	sp, #36	; 0x24
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	40005400 	.word	0x40005400
 8001484:	40021000 	.word	0x40021000
 8001488:	50000400 	.word	0x50000400

0800148c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_RTC_MspInit+0x38>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10e      	bne.n	80014bc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_RTC_MspInit+0x3c>)
 80014a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_RTC_MspInit+0x3c>)
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	02c9      	lsls	r1, r1, #11
 80014a8:	430a      	orrs	r2, r1
 80014aa:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	2002      	movs	r0, #2
 80014b2:	f000 fd27 	bl	8001f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80014b6:	2002      	movs	r0, #2
 80014b8:	f000 fd39 	bl	8001f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40002800 	.word	0x40002800
 80014c8:	40021000 	.word	0x40021000

080014cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b08b      	sub	sp, #44	; 0x2c
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	2414      	movs	r4, #20
 80014d6:	193b      	adds	r3, r7, r4
 80014d8:	0018      	movs	r0, r3
 80014da:	2314      	movs	r3, #20
 80014dc:	001a      	movs	r2, r3
 80014de:	2100      	movs	r1, #0
 80014e0:	f004 fb44 	bl	8005b6c <memset>
  if(hspi->Instance==SPI1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a46      	ldr	r2, [pc, #280]	; (8001604 <HAL_SPI_MspInit+0x138>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d13e      	bne.n	800156c <HAL_SPI_MspInit+0xa0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014ee:	4b46      	ldr	r3, [pc, #280]	; (8001608 <HAL_SPI_MspInit+0x13c>)
 80014f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f2:	4b45      	ldr	r3, [pc, #276]	; (8001608 <HAL_SPI_MspInit+0x13c>)
 80014f4:	2180      	movs	r1, #128	; 0x80
 80014f6:	0149      	lsls	r1, r1, #5
 80014f8:	430a      	orrs	r2, r1
 80014fa:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b42      	ldr	r3, [pc, #264]	; (8001608 <HAL_SPI_MspInit+0x13c>)
 80014fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001500:	4b41      	ldr	r3, [pc, #260]	; (8001608 <HAL_SPI_MspInit+0x13c>)
 8001502:	2102      	movs	r1, #2
 8001504:	430a      	orrs	r2, r1
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
 8001508:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <HAL_SPI_MspInit+0x13c>)
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	2202      	movs	r2, #2
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = MISO_P_Pin;
 8001514:	193b      	adds	r3, r7, r4
 8001516:	2210      	movs	r2, #16
 8001518:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	193b      	adds	r3, r7, r4
 800151c:	2202      	movs	r2, #2
 800151e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001520:	193b      	adds	r3, r7, r4
 8001522:	2201      	movs	r2, #1
 8001524:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	193b      	adds	r3, r7, r4
 8001528:	2203      	movs	r2, #3
 800152a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800152c:	193b      	adds	r3, r7, r4
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MISO_P_GPIO_Port, &GPIO_InitStruct);
 8001532:	193b      	adds	r3, r7, r4
 8001534:	4a35      	ldr	r2, [pc, #212]	; (800160c <HAL_SPI_MspInit+0x140>)
 8001536:	0019      	movs	r1, r3
 8001538:	0010      	movs	r0, r2
 800153a:	f000 fd15 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCK_P_Pin|MOSI_P_Pin;
 800153e:	0021      	movs	r1, r4
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2228      	movs	r2, #40	; 0x28
 8001544:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2202      	movs	r2, #2
 800154a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	187b      	adds	r3, r7, r1
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001552:	187b      	adds	r3, r7, r1
 8001554:	2203      	movs	r2, #3
 8001556:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001558:	187b      	adds	r3, r7, r1
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	187b      	adds	r3, r7, r1
 8001560:	4a2a      	ldr	r2, [pc, #168]	; (800160c <HAL_SPI_MspInit+0x140>)
 8001562:	0019      	movs	r1, r3
 8001564:	0010      	movs	r0, r2
 8001566:	f000 fcff 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800156a:	e046      	b.n	80015fa <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI2)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <HAL_SPI_MspInit+0x144>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d141      	bne.n	80015fa <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_SPI_MspInit+0x13c>)
 8001578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800157a:	4b23      	ldr	r3, [pc, #140]	; (8001608 <HAL_SPI_MspInit+0x13c>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	01c9      	lsls	r1, r1, #7
 8001580:	430a      	orrs	r2, r1
 8001582:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_SPI_MspInit+0x13c>)
 8001586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_SPI_MspInit+0x13c>)
 800158a:	2102      	movs	r1, #2
 800158c:	430a      	orrs	r2, r1
 800158e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_SPI_MspInit+0x13c>)
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	2202      	movs	r2, #2
 8001596:	4013      	ands	r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOSI_RF_Pin|MISO_RF_Pin;
 800159c:	2114      	movs	r1, #20
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	22c0      	movs	r2, #192	; 0xc0
 80015a2:	0212      	lsls	r2, r2, #8
 80015a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	000c      	movs	r4, r1
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	2202      	movs	r2, #2
 80015ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	193b      	adds	r3, r7, r4
 80015b6:	2203      	movs	r2, #3
 80015b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80015ba:	193b      	adds	r3, r7, r4
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	193b      	adds	r3, r7, r4
 80015c2:	4a12      	ldr	r2, [pc, #72]	; (800160c <HAL_SPI_MspInit+0x140>)
 80015c4:	0019      	movs	r1, r3
 80015c6:	0010      	movs	r0, r2
 80015c8:	f000 fcce 	bl	8001f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_RF_Pin;
 80015cc:	0021      	movs	r1, r4
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2280      	movs	r2, #128	; 0x80
 80015d2:	00d2      	lsls	r2, r2, #3
 80015d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2202      	movs	r2, #2
 80015da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2203      	movs	r2, #3
 80015e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2205      	movs	r2, #5
 80015ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SCK_RF_GPIO_Port, &GPIO_InitStruct);
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	4a06      	ldr	r2, [pc, #24]	; (800160c <HAL_SPI_MspInit+0x140>)
 80015f2:	0019      	movs	r1, r3
 80015f4:	0010      	movs	r0, r2
 80015f6:	f000 fcb7 	bl	8001f68 <HAL_GPIO_Init>
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b00b      	add	sp, #44	; 0x2c
 8001600:	bd90      	pop	{r4, r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	40013000 	.word	0x40013000
 8001608:	40021000 	.word	0x40021000
 800160c:	50000400 	.word	0x50000400
 8001610:	40003800 	.word	0x40003800

08001614 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a12      	ldr	r2, [pc, #72]	; (800166c <HAL_SPI_MspDeInit+0x58>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d10b      	bne.n	800163e <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_SPI_MspDeInit+0x5c>)
 8001628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_SPI_MspDeInit+0x5c>)
 800162c:	4911      	ldr	r1, [pc, #68]	; (8001674 <HAL_SPI_MspDeInit+0x60>)
 800162e:	400a      	ands	r2, r1
 8001630:	635a      	str	r2, [r3, #52]	; 0x34
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, MISO_P_Pin|SCK_P_Pin|MOSI_P_Pin);
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <HAL_SPI_MspDeInit+0x64>)
 8001634:	2138      	movs	r1, #56	; 0x38
 8001636:	0018      	movs	r0, r3
 8001638:	f000 fe14 	bl	8002264 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800163c:	e011      	b.n	8001662 <HAL_SPI_MspDeInit+0x4e>
  else if(hspi->Instance==SPI2)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_SPI_MspDeInit+0x68>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d10c      	bne.n	8001662 <HAL_SPI_MspDeInit+0x4e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_SPI_MspDeInit+0x5c>)
 800164a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_SPI_MspDeInit+0x5c>)
 800164e:	490c      	ldr	r1, [pc, #48]	; (8001680 <HAL_SPI_MspDeInit+0x6c>)
 8001650:	400a      	ands	r2, r1
 8001652:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOB, MOSI_RF_Pin|MISO_RF_Pin|SCK_RF_Pin);
 8001654:	23c4      	movs	r3, #196	; 0xc4
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_SPI_MspDeInit+0x64>)
 800165a:	0019      	movs	r1, r3
 800165c:	0010      	movs	r0, r2
 800165e:	f000 fe01 	bl	8002264 <HAL_GPIO_DeInit>
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40013000 	.word	0x40013000
 8001670:	40021000 	.word	0x40021000
 8001674:	ffffefff 	.word	0xffffefff
 8001678:	50000400 	.word	0x50000400
 800167c:	40003800 	.word	0x40003800
 8001680:	ffffbfff 	.word	0xffffbfff

08001684 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001684:	b590      	push	{r4, r7, lr}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	240c      	movs	r4, #12
 800168e:	193b      	adds	r3, r7, r4
 8001690:	0018      	movs	r0, r3
 8001692:	2314      	movs	r3, #20
 8001694:	001a      	movs	r2, r3
 8001696:	2100      	movs	r1, #0
 8001698:	f004 fa68 	bl	8005b6c <memset>
  if(huart->Instance==USART1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a24      	ldr	r2, [pc, #144]	; (8001734 <HAL_UART_MspInit+0xb0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d141      	bne.n	800172a <HAL_UART_MspInit+0xa6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	01c9      	lsls	r1, r1, #7
 80016b0:	430a      	orrs	r2, r1
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016ba:	2101      	movs	r1, #1
 80016bc:	430a      	orrs	r2, r1
 80016be:	62da      	str	r2, [r3, #44]	; 0x2c
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_UART_MspInit+0xb4>)
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	2201      	movs	r2, #1
 80016c6:	4013      	ands	r3, r2
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = UART_RX_Pin;
 80016cc:	193b      	adds	r3, r7, r4
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	00d2      	lsls	r2, r2, #3
 80016d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	193b      	adds	r3, r7, r4
 80016d6:	2202      	movs	r2, #2
 80016d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	2203      	movs	r2, #3
 80016e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	2204      	movs	r2, #4
 80016ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UART_RX_GPIO_Port, &GPIO_InitStruct);
 80016ec:	193a      	adds	r2, r7, r4
 80016ee:	23a0      	movs	r3, #160	; 0xa0
 80016f0:	05db      	lsls	r3, r3, #23
 80016f2:	0011      	movs	r1, r2
 80016f4:	0018      	movs	r0, r3
 80016f6:	f000 fc37 	bl	8001f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = UART_TX_Pin;
 80016fa:	0021      	movs	r1, r4
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	2280      	movs	r2, #128	; 0x80
 8001700:	0092      	lsls	r2, r2, #2
 8001702:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2202      	movs	r2, #2
 8001708:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001710:	187b      	adds	r3, r7, r1
 8001712:	2202      	movs	r2, #2
 8001714:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2204      	movs	r2, #4
 800171a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(UART_TX_GPIO_Port, &GPIO_InitStruct);
 800171c:	187a      	adds	r2, r7, r1
 800171e:	23a0      	movs	r3, #160	; 0xa0
 8001720:	05db      	lsls	r3, r3, #23
 8001722:	0011      	movs	r1, r2
 8001724:	0018      	movs	r0, r3
 8001726:	f000 fc1f 	bl	8001f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b009      	add	sp, #36	; 0x24
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	40013800 	.word	0x40013800
 8001738:	40021000 	.word	0x40021000

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <NMI_Handler+0x4>

08001742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <HardFault_Handler+0x4>

08001748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001760:	f000 f8ca 	bl	80018f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <RTC_IRQHandler+0x14>)
 8001772:	0018      	movs	r0, r3
 8001774:	f002 fc7a 	bl	800406c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001778:	46c0      	nop			; (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	20000138 	.word	0x20000138

08001784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <_sbrk+0x5c>)
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <_sbrk+0x60>)
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <_sbrk+0x64>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <_sbrk+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	18d3      	adds	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d207      	bcs.n	80017c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b4:	f004 f9b0 	bl	8005b18 <__errno>
 80017b8:	0003      	movs	r3, r0
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017be:	2301      	movs	r3, #1
 80017c0:	425b      	negs	r3, r3
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	18d2      	adds	r2, r2, r3
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <_sbrk+0x64>)
 80017d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b006      	add	sp, #24
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20005000 	.word	0x20005000
 80017e4:	00000400 	.word	0x00000400
 80017e8:	20000290 	.word	0x20000290
 80017ec:	200002a8 	.word	0x200002a8

080017f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f4:	46c0      	nop			; (mov r8, r8)
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80017fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001800:	480d      	ldr	r0, [pc, #52]	; (8001838 <LoopForever+0x6>)
  ldr r1, =_edata
 8001802:	490e      	ldr	r1, [pc, #56]	; (800183c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001804:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <LoopForever+0xe>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0b      	ldr	r2, [pc, #44]	; (8001844 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001818:	4c0b      	ldr	r4, [pc, #44]	; (8001848 <LoopForever+0x16>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001826:	f7ff ffe3 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800182a:	f004 f97b 	bl	8005b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7fe ff0f 	bl	8000650 <main>

08001832 <LoopForever>:

LoopForever:
    b LoopForever
 8001832:	e7fe      	b.n	8001832 <LoopForever>
   ldr   r0, =_estack
 8001834:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001840:	08006f64 	.word	0x08006f64
  ldr r2, =_sbss
 8001844:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001848:	200002a8 	.word	0x200002a8

0800184c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC1_COMP_IRQHandler>
	...

08001850 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_Init+0x3c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_Init+0x3c>)
 8001862:	2140      	movs	r1, #64	; 0x40
 8001864:	430a      	orrs	r2, r1
 8001866:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001868:	2003      	movs	r0, #3
 800186a:	f000 f811 	bl	8001890 <HAL_InitTick>
 800186e:	1e03      	subs	r3, r0, #0
 8001870:	d003      	beq.n	800187a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
 8001878:	e001      	b.n	800187e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800187a:	f7ff fd81 	bl	8001380 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800187e:	1dfb      	adds	r3, r7, #7
 8001880:	781b      	ldrb	r3, [r3, #0]
}
 8001882:	0018      	movs	r0, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	b002      	add	sp, #8
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40022000 	.word	0x40022000

08001890 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001890:	b590      	push	{r4, r7, lr}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <HAL_InitTick+0x5c>)
 800189a:	681c      	ldr	r4, [r3, #0]
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_InitTick+0x60>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	0019      	movs	r1, r3
 80018a2:	23fa      	movs	r3, #250	; 0xfa
 80018a4:	0098      	lsls	r0, r3, #2
 80018a6:	f7fe fc39 	bl	800011c <__udivsi3>
 80018aa:	0003      	movs	r3, r0
 80018ac:	0019      	movs	r1, r3
 80018ae:	0020      	movs	r0, r4
 80018b0:	f7fe fc34 	bl	800011c <__udivsi3>
 80018b4:	0003      	movs	r3, r0
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 fb49 	bl	8001f4e <HAL_SYSTICK_Config>
 80018bc:	1e03      	subs	r3, r0, #0
 80018be:	d001      	beq.n	80018c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e00f      	b.n	80018e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	d80b      	bhi.n	80018e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	2301      	movs	r3, #1
 80018ce:	425b      	negs	r3, r3
 80018d0:	2200      	movs	r2, #0
 80018d2:	0018      	movs	r0, r3
 80018d4:	f000 fb16 	bl	8001f04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_InitTick+0x64>)
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
}
 80018e4:	0018      	movs	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b003      	add	sp, #12
 80018ea:	bd90      	pop	{r4, r7, pc}
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000008 	.word	0x20000008
 80018f4:	20000004 	.word	0x20000004

080018f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_IncTick+0x1c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	001a      	movs	r2, r3
 8001902:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_IncTick+0x20>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	18d2      	adds	r2, r2, r3
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_IncTick+0x20>)
 800190a:	601a      	str	r2, [r3, #0]
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	20000008 	.word	0x20000008
 8001918:	20000294 	.word	0x20000294

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b02      	ldr	r3, [pc, #8]	; (800192c <HAL_GetTick+0x10>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	20000294 	.word	0x20000294

08001930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001938:	f7ff fff0 	bl	800191c <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	3301      	adds	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_Delay+0x44>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	001a      	movs	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	189b      	adds	r3, r3, r2
 8001954:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	f7ff ffe0 	bl	800191c <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	429a      	cmp	r2, r3
 8001966:	d8f7      	bhi.n	8001958 <HAL_Delay+0x28>
  {
  }
}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b004      	add	sp, #16
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	20000008 	.word	0x20000008

08001978 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e159      	b.n	8001c3e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10a      	bne.n	80019a8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2250      	movs	r2, #80	; 0x50
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7ff fd00 	bl	80013a8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ac:	2210      	movs	r2, #16
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b10      	cmp	r3, #16
 80019b2:	d005      	beq.n	80019c0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2204      	movs	r2, #4
 80019bc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80019be:	d00b      	beq.n	80019d8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c4:	2210      	movs	r2, #16
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2250      	movs	r2, #80	; 0x50
 80019d0:	2100      	movs	r1, #0
 80019d2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e132      	b.n	8001c3e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019dc:	4a9a      	ldr	r2, [pc, #616]	; (8001c48 <HAL_ADC_Init+0x2d0>)
 80019de:	4013      	ands	r3, r2
 80019e0:	2202      	movs	r2, #2
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2203      	movs	r2, #3
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d108      	bne.n	8001a08 <HAL_ADC_Init+0x90>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_ADC_Init+0x90>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <HAL_ADC_Init+0x92>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d149      	bne.n	8001aa2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	23c0      	movs	r3, #192	; 0xc0
 8001a14:	061b      	lsls	r3, r3, #24
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d00b      	beq.n	8001a32 <HAL_ADC_Init+0xba>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	05db      	lsls	r3, r3, #23
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d005      	beq.n	8001a32 <HAL_ADC_Init+0xba>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	2380      	movs	r3, #128	; 0x80
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d111      	bne.n	8001a56 <HAL_ADC_Init+0xde>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	0092      	lsls	r2, r2, #2
 8001a3e:	0892      	lsrs	r2, r2, #2
 8001a40:	611a      	str	r2, [r3, #16]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6919      	ldr	r1, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	611a      	str	r2, [r3, #16]
 8001a54:	e014      	b.n	8001a80 <HAL_ADC_Init+0x108>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0092      	lsls	r2, r2, #2
 8001a62:	0892      	lsrs	r2, r2, #2
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	4b79      	ldr	r3, [pc, #484]	; (8001c4c <HAL_ADC_Init+0x2d4>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <HAL_ADC_Init+0x2d4>)
 8001a6c:	4978      	ldr	r1, [pc, #480]	; (8001c50 <HAL_ADC_Init+0x2d8>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	4b76      	ldr	r3, [pc, #472]	; (8001c4c <HAL_ADC_Init+0x2d4>)
 8001a74:	6819      	ldr	r1, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4b74      	ldr	r3, [pc, #464]	; (8001c4c <HAL_ADC_Init+0x2d4>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2118      	movs	r1, #24
 8001a8c:	438a      	bics	r2, r1
 8001a8e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68d9      	ldr	r1, [r3, #12]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001aa2:	4b6a      	ldr	r3, [pc, #424]	; (8001c4c <HAL_ADC_Init+0x2d4>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b69      	ldr	r3, [pc, #420]	; (8001c4c <HAL_ADC_Init+0x2d4>)
 8001aa8:	496a      	ldr	r1, [pc, #424]	; (8001c54 <HAL_ADC_Init+0x2dc>)
 8001aaa:	400a      	ands	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001aae:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <HAL_ADC_Init+0x2d4>)
 8001ab0:	6819      	ldr	r1, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab6:	065a      	lsls	r2, r3, #25
 8001ab8:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <HAL_ADC_Init+0x2d4>)
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	055b      	lsls	r3, r3, #21
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d108      	bne.n	8001ade <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	0549      	lsls	r1, r1, #21
 8001ada:	430a      	orrs	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	495b      	ldr	r1, [pc, #364]	; (8001c58 <HAL_ADC_Init+0x2e0>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68d9      	ldr	r1, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d101      	bne.n	8001b04 <HAL_ADC_Init+0x18c>
 8001b00:	2304      	movs	r3, #4
 8001b02:	e000      	b.n	8001b06 <HAL_ADC_Init+0x18e>
 8001b04:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001b06:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2020      	movs	r0, #32
 8001b0c:	5c1b      	ldrb	r3, [r3, r0]
 8001b0e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001b10:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	202c      	movs	r0, #44	; 0x2c
 8001b16:	5c1b      	ldrb	r3, [r3, r0]
 8001b18:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b1a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001b20:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001b28:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001b30:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3e:	23c2      	movs	r3, #194	; 0xc2
 8001b40:	33ff      	adds	r3, #255	; 0xff
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d00b      	beq.n	8001b5e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68d9      	ldr	r1, [r3, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2221      	movs	r2, #33	; 0x21
 8001b62:	5c9b      	ldrb	r3, [r3, r2]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d11a      	bne.n	8001b9e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	5c9b      	ldrb	r3, [r3, r2]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	0249      	lsls	r1, r1, #9
 8001b80:	430a      	orrs	r2, r1
 8001b82:	60da      	str	r2, [r3, #12]
 8001b84:	e00b      	b.n	8001b9e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	431a      	orrs	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	2201      	movs	r2, #1
 8001b98:	431a      	orrs	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d11f      	bne.n	8001be6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	492a      	ldr	r1, [pc, #168]	; (8001c5c <HAL_ADC_Init+0x2e4>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6919      	ldr	r1, [r3, #16]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001bc4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001bca:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2101      	movs	r1, #1
 8001be0:	430a      	orrs	r2, r1
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	e00e      	b.n	8001c04 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2201      	movs	r2, #1
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d107      	bne.n	8001c04 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2101      	movs	r1, #1
 8001c00:	438a      	bics	r2, r1
 8001c02:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2107      	movs	r1, #7
 8001c10:	438a      	bics	r2, r1
 8001c12:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6959      	ldr	r1, [r3, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c30:	2203      	movs	r2, #3
 8001c32:	4393      	bics	r3, r2
 8001c34:	2201      	movs	r2, #1
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b002      	add	sp, #8
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	fffffefd 	.word	0xfffffefd
 8001c4c:	40012708 	.word	0x40012708
 8001c50:	ffc3ffff 	.word	0xffc3ffff
 8001c54:	fdffffff 	.word	0xfdffffff
 8001c58:	fffe0219 	.word	0xfffe0219
 8001c5c:	fffffc03 	.word	0xfffffc03

08001c60 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2250      	movs	r2, #80	; 0x50
 8001c6e:	5c9b      	ldrb	r3, [r3, r2]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_ConfigChannel+0x18>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e06c      	b.n	8001d52 <HAL_ADC_ConfigChannel+0xf2>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2250      	movs	r2, #80	; 0x50
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	2204      	movs	r2, #4
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d00b      	beq.n	8001ca4 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	2220      	movs	r2, #32
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2250      	movs	r2, #80	; 0x50
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e056      	b.n	8001d52 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a2c      	ldr	r2, [pc, #176]	; (8001d5c <HAL_ADC_ConfigChannel+0xfc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d028      	beq.n	8001d00 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	035b      	lsls	r3, r3, #13
 8001cba:	0b5a      	lsrs	r2, r3, #13
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	02db      	lsls	r3, r3, #11
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d009      	beq.n	8001ce4 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_ADC_ConfigChannel+0x100>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <HAL_ADC_ConfigChannel+0x100>)
 8001cd6:	2180      	movs	r1, #128	; 0x80
 8001cd8:	0409      	lsls	r1, r1, #16
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001cde:	200a      	movs	r0, #10
 8001ce0:	f000 f844 	bl	8001d6c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	029b      	lsls	r3, r3, #10
 8001cec:	4013      	ands	r3, r2
 8001cee:	d02b      	beq.n	8001d48 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_ADC_ConfigChannel+0x100>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_ADC_ConfigChannel+0x100>)
 8001cf6:	2180      	movs	r1, #128	; 0x80
 8001cf8:	03c9      	lsls	r1, r1, #15
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e023      	b.n	8001d48 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	035b      	lsls	r3, r3, #13
 8001d0c:	0b5b      	lsrs	r3, r3, #13
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	400a      	ands	r2, r1
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	02db      	lsls	r3, r3, #11
 8001d20:	4013      	ands	r3, r2
 8001d22:	d005      	beq.n	8001d30 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001d24:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_ADC_ConfigChannel+0x100>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_ADC_ConfigChannel+0x100>)
 8001d2a:	490e      	ldr	r1, [pc, #56]	; (8001d64 <HAL_ADC_ConfigChannel+0x104>)
 8001d2c:	400a      	ands	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	029b      	lsls	r3, r3, #10
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d005      	beq.n	8001d48 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_ADC_ConfigChannel+0x100>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_ADC_ConfigChannel+0x100>)
 8001d42:	4909      	ldr	r1, [pc, #36]	; (8001d68 <HAL_ADC_ConfigChannel+0x108>)
 8001d44:	400a      	ands	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2250      	movs	r2, #80	; 0x50
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b002      	add	sp, #8
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	00001001 	.word	0x00001001
 8001d60:	40012708 	.word	0x40012708
 8001d64:	ff7fffff 	.word	0xff7fffff
 8001d68:	ffbfffff 	.word	0xffbfffff

08001d6c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <ADC_DelayMicroSecond+0x38>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	490b      	ldr	r1, [pc, #44]	; (8001da8 <ADC_DelayMicroSecond+0x3c>)
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f7fe f9ce 	bl	800011c <__udivsi3>
 8001d80:	0003      	movs	r3, r0
 8001d82:	001a      	movs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4353      	muls	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001d8a:	e002      	b.n	8001d92 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	20000000 	.word	0x20000000
 8001da8:	000f4240 	.word	0x000f4240

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	0002      	movs	r2, r0
 8001db4:	1dfb      	adds	r3, r7, #7
 8001db6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001db8:	1dfb      	adds	r3, r7, #7
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8001dbe:	d809      	bhi.n	8001dd4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc0:	1dfb      	adds	r3, r7, #7
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	231f      	movs	r3, #31
 8001dc8:	401a      	ands	r2, r3
 8001dca:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_EnableIRQ+0x30>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	4091      	lsls	r1, r2
 8001dd0:	000a      	movs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]
  }
}
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	e000e100 	.word	0xe000e100

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	0002      	movs	r2, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	1dfb      	adds	r3, r7, #7
 8001dec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b7f      	cmp	r3, #127	; 0x7f
 8001df4:	d828      	bhi.n	8001e48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001df6:	4a2f      	ldr	r2, [pc, #188]	; (8001eb4 <__NVIC_SetPriority+0xd4>)
 8001df8:	1dfb      	adds	r3, r7, #7
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	33c0      	adds	r3, #192	; 0xc0
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	589b      	ldr	r3, [r3, r2]
 8001e06:	1dfa      	adds	r2, r7, #7
 8001e08:	7812      	ldrb	r2, [r2, #0]
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	400a      	ands	r2, r1
 8001e10:	00d2      	lsls	r2, r2, #3
 8001e12:	21ff      	movs	r1, #255	; 0xff
 8001e14:	4091      	lsls	r1, r2
 8001e16:	000a      	movs	r2, r1
 8001e18:	43d2      	mvns	r2, r2
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	22ff      	movs	r2, #255	; 0xff
 8001e24:	401a      	ands	r2, r3
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	4003      	ands	r3, r0
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e34:	481f      	ldr	r0, [pc, #124]	; (8001eb4 <__NVIC_SetPriority+0xd4>)
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	33c0      	adds	r3, #192	; 0xc0
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001e46:	e031      	b.n	8001eac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e48:	4a1b      	ldr	r2, [pc, #108]	; (8001eb8 <__NVIC_SetPriority+0xd8>)
 8001e4a:	1dfb      	adds	r3, r7, #7
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	0019      	movs	r1, r3
 8001e50:	230f      	movs	r3, #15
 8001e52:	400b      	ands	r3, r1
 8001e54:	3b08      	subs	r3, #8
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3306      	adds	r3, #6
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	18d3      	adds	r3, r2, r3
 8001e5e:	3304      	adds	r3, #4
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	1dfa      	adds	r2, r7, #7
 8001e64:	7812      	ldrb	r2, [r2, #0]
 8001e66:	0011      	movs	r1, r2
 8001e68:	2203      	movs	r2, #3
 8001e6a:	400a      	ands	r2, r1
 8001e6c:	00d2      	lsls	r2, r2, #3
 8001e6e:	21ff      	movs	r1, #255	; 0xff
 8001e70:	4091      	lsls	r1, r2
 8001e72:	000a      	movs	r2, r1
 8001e74:	43d2      	mvns	r2, r2
 8001e76:	401a      	ands	r2, r3
 8001e78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	019b      	lsls	r3, r3, #6
 8001e7e:	22ff      	movs	r2, #255	; 0xff
 8001e80:	401a      	ands	r2, r3
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	0018      	movs	r0, r3
 8001e88:	2303      	movs	r3, #3
 8001e8a:	4003      	ands	r3, r0
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e90:	4809      	ldr	r0, [pc, #36]	; (8001eb8 <__NVIC_SetPriority+0xd8>)
 8001e92:	1dfb      	adds	r3, r7, #7
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	001c      	movs	r4, r3
 8001e98:	230f      	movs	r3, #15
 8001e9a:	4023      	ands	r3, r4
 8001e9c:	3b08      	subs	r3, #8
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	3306      	adds	r3, #6
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	18c3      	adds	r3, r0, r3
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	601a      	str	r2, [r3, #0]
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	b003      	add	sp, #12
 8001eb2:	bd90      	pop	{r4, r7, pc}
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	1e5a      	subs	r2, r3, #1
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	045b      	lsls	r3, r3, #17
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d301      	bcc.n	8001ed4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e010      	b.n	8001ef6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <SysTick_Config+0x44>)
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	3a01      	subs	r2, #1
 8001eda:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001edc:	2301      	movs	r3, #1
 8001ede:	425b      	negs	r3, r3
 8001ee0:	2103      	movs	r1, #3
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f7ff ff7c 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x44>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x44>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	b002      	add	sp, #8
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	210f      	movs	r1, #15
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	1c02      	adds	r2, r0, #0
 8001f14:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b25b      	sxtb	r3, r3
 8001f1e:	0011      	movs	r1, r2
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff ff5d 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b004      	add	sp, #16
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	0002      	movs	r2, r0
 8001f36:	1dfb      	adds	r3, r7, #7
 8001f38:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b25b      	sxtb	r3, r3
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff ff33 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b002      	add	sp, #8
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	0018      	movs	r0, r3
 8001f5a:	f7ff ffaf 	bl	8001ebc <SysTick_Config>
 8001f5e:	0003      	movs	r3, r0
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b002      	add	sp, #8
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f7e:	e155      	b.n	800222c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2101      	movs	r1, #1
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4091      	lsls	r1, r2
 8001f8a:	000a      	movs	r2, r1
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d100      	bne.n	8001f98 <HAL_GPIO_Init+0x30>
 8001f96:	e146      	b.n	8002226 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d005      	beq.n	8001fb0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2203      	movs	r2, #3
 8001faa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d130      	bne.n	8002012 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	2203      	movs	r2, #3
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	0013      	movs	r3, r2
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	0013      	movs	r3, r2
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	409a      	lsls	r2, r3
 8001fec:	0013      	movs	r3, r2
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	091b      	lsrs	r3, r3, #4
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
 8002004:	0013      	movs	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2203      	movs	r2, #3
 8002018:	4013      	ands	r3, r2
 800201a:	2b03      	cmp	r3, #3
 800201c:	d017      	beq.n	800204e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	43da      	mvns	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	409a      	lsls	r2, r3
 8002040:	0013      	movs	r3, r2
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2203      	movs	r2, #3
 8002054:	4013      	ands	r3, r2
 8002056:	2b02      	cmp	r3, #2
 8002058:	d123      	bne.n	80020a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	08da      	lsrs	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	3208      	adds	r2, #8
 8002062:	0092      	lsls	r2, r2, #2
 8002064:	58d3      	ldr	r3, [r2, r3]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2207      	movs	r2, #7
 800206c:	4013      	ands	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	409a      	lsls	r2, r3
 8002074:	0013      	movs	r3, r2
 8002076:	43da      	mvns	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2107      	movs	r1, #7
 8002086:	400b      	ands	r3, r1
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	409a      	lsls	r2, r3
 800208c:	0013      	movs	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	0092      	lsls	r2, r2, #2
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	2203      	movs	r2, #3
 80020ae:	409a      	lsls	r2, r3
 80020b0:	0013      	movs	r3, r2
 80020b2:	43da      	mvns	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2203      	movs	r2, #3
 80020c0:	401a      	ands	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	409a      	lsls	r2, r3
 80020c8:	0013      	movs	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	23c0      	movs	r3, #192	; 0xc0
 80020dc:	029b      	lsls	r3, r3, #10
 80020de:	4013      	ands	r3, r2
 80020e0:	d100      	bne.n	80020e4 <HAL_GPIO_Init+0x17c>
 80020e2:	e0a0      	b.n	8002226 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e4:	4b57      	ldr	r3, [pc, #348]	; (8002244 <HAL_GPIO_Init+0x2dc>)
 80020e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e8:	4b56      	ldr	r3, [pc, #344]	; (8002244 <HAL_GPIO_Init+0x2dc>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	430a      	orrs	r2, r1
 80020ee:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80020f0:	4a55      	ldr	r2, [pc, #340]	; (8002248 <HAL_GPIO_Init+0x2e0>)
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	589b      	ldr	r3, [r3, r2]
 80020fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2203      	movs	r2, #3
 8002102:	4013      	ands	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	409a      	lsls	r2, r3
 800210a:	0013      	movs	r3, r2
 800210c:	43da      	mvns	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	23a0      	movs	r3, #160	; 0xa0
 8002118:	05db      	lsls	r3, r3, #23
 800211a:	429a      	cmp	r2, r3
 800211c:	d01f      	beq.n	800215e <HAL_GPIO_Init+0x1f6>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4a      	ldr	r2, [pc, #296]	; (800224c <HAL_GPIO_Init+0x2e4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d019      	beq.n	800215a <HAL_GPIO_Init+0x1f2>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a49      	ldr	r2, [pc, #292]	; (8002250 <HAL_GPIO_Init+0x2e8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d013      	beq.n	8002156 <HAL_GPIO_Init+0x1ee>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a48      	ldr	r2, [pc, #288]	; (8002254 <HAL_GPIO_Init+0x2ec>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d00d      	beq.n	8002152 <HAL_GPIO_Init+0x1ea>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a47      	ldr	r2, [pc, #284]	; (8002258 <HAL_GPIO_Init+0x2f0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d007      	beq.n	800214e <HAL_GPIO_Init+0x1e6>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a46      	ldr	r2, [pc, #280]	; (800225c <HAL_GPIO_Init+0x2f4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d101      	bne.n	800214a <HAL_GPIO_Init+0x1e2>
 8002146:	2305      	movs	r3, #5
 8002148:	e00a      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 800214a:	2306      	movs	r3, #6
 800214c:	e008      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 800214e:	2304      	movs	r3, #4
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 8002152:	2303      	movs	r3, #3
 8002154:	e004      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 8002156:	2302      	movs	r3, #2
 8002158:	e002      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <HAL_GPIO_Init+0x1f8>
 800215e:	2300      	movs	r3, #0
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	2103      	movs	r1, #3
 8002164:	400a      	ands	r2, r1
 8002166:	0092      	lsls	r2, r2, #2
 8002168:	4093      	lsls	r3, r2
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002170:	4935      	ldr	r1, [pc, #212]	; (8002248 <HAL_GPIO_Init+0x2e0>)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	089b      	lsrs	r3, r3, #2
 8002176:	3302      	adds	r3, #2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800217e:	4b38      	ldr	r3, [pc, #224]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	43da      	mvns	r2, r3
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4013      	ands	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	025b      	lsls	r3, r3, #9
 8002196:	4013      	ands	r3, r2
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	43da      	mvns	r2, r3
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	2380      	movs	r3, #128	; 0x80
 80021be:	029b      	lsls	r3, r3, #10
 80021c0:	4013      	ands	r3, r2
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021cc:	4b24      	ldr	r3, [pc, #144]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b23      	ldr	r3, [pc, #140]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43da      	mvns	r2, r3
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4013      	ands	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	035b      	lsls	r3, r3, #13
 80021ea:	4013      	ands	r3, r2
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80021f6:	4b1a      	ldr	r3, [pc, #104]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021f8:	693a      	ldr	r2, [r7, #16]
 80021fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	43da      	mvns	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	039b      	lsls	r3, r3, #14
 8002214:	4013      	ands	r3, r2
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_GPIO_Init+0x2f8>)
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	40da      	lsrs	r2, r3
 8002234:	1e13      	subs	r3, r2, #0
 8002236:	d000      	beq.n	800223a <HAL_GPIO_Init+0x2d2>
 8002238:	e6a2      	b.n	8001f80 <HAL_GPIO_Init+0x18>
  }
}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	46c0      	nop			; (mov r8, r8)
 800223e:	46bd      	mov	sp, r7
 8002240:	b006      	add	sp, #24
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	40010000 	.word	0x40010000
 800224c:	50000400 	.word	0x50000400
 8002250:	50000800 	.word	0x50000800
 8002254:	50000c00 	.word	0x50000c00
 8002258:	50001000 	.word	0x50001000
 800225c:	50001c00 	.word	0x50001c00
 8002260:	40010400 	.word	0x40010400

08002264 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800227a:	e0bc      	b.n	80023f6 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800227c:	2201      	movs	r2, #1
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	409a      	lsls	r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d100      	bne.n	8002290 <HAL_GPIO_DeInit+0x2c>
 800228e:	e0af      	b.n	80023f0 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002290:	4a5e      	ldr	r2, [pc, #376]	; (800240c <HAL_GPIO_DeInit+0x1a8>)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	3302      	adds	r3, #2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	589b      	ldr	r3, [r3, r2]
 800229c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	2203      	movs	r2, #3
 80022a2:	4013      	ands	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	409a      	lsls	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	23a0      	movs	r3, #160	; 0xa0
 80022b4:	05db      	lsls	r3, r3, #23
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d01f      	beq.n	80022fa <HAL_GPIO_DeInit+0x96>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a54      	ldr	r2, [pc, #336]	; (8002410 <HAL_GPIO_DeInit+0x1ac>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_DeInit+0x92>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a53      	ldr	r2, [pc, #332]	; (8002414 <HAL_GPIO_DeInit+0x1b0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_DeInit+0x8e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a52      	ldr	r2, [pc, #328]	; (8002418 <HAL_GPIO_DeInit+0x1b4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_DeInit+0x8a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a51      	ldr	r2, [pc, #324]	; (800241c <HAL_GPIO_DeInit+0x1b8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_DeInit+0x86>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a50      	ldr	r2, [pc, #320]	; (8002420 <HAL_GPIO_DeInit+0x1bc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_DeInit+0x82>
 80022e2:	2305      	movs	r3, #5
 80022e4:	e00a      	b.n	80022fc <HAL_GPIO_DeInit+0x98>
 80022e6:	2306      	movs	r3, #6
 80022e8:	e008      	b.n	80022fc <HAL_GPIO_DeInit+0x98>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_DeInit+0x98>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e004      	b.n	80022fc <HAL_GPIO_DeInit+0x98>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e002      	b.n	80022fc <HAL_GPIO_DeInit+0x98>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_DeInit+0x98>
 80022fa:	2300      	movs	r3, #0
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	2103      	movs	r1, #3
 8002300:	400a      	ands	r2, r1
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	4093      	lsls	r3, r2
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	429a      	cmp	r2, r3
 800230a:	d132      	bne.n	8002372 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800230c:	4b45      	ldr	r3, [pc, #276]	; (8002424 <HAL_GPIO_DeInit+0x1c0>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43d9      	mvns	r1, r3
 8002314:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HAL_GPIO_DeInit+0x1c0>)
 8002316:	400a      	ands	r2, r1
 8002318:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800231a:	4b42      	ldr	r3, [pc, #264]	; (8002424 <HAL_GPIO_DeInit+0x1c0>)
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43d9      	mvns	r1, r3
 8002322:	4b40      	ldr	r3, [pc, #256]	; (8002424 <HAL_GPIO_DeInit+0x1c0>)
 8002324:	400a      	ands	r2, r1
 8002326:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002328:	4b3e      	ldr	r3, [pc, #248]	; (8002424 <HAL_GPIO_DeInit+0x1c0>)
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43d9      	mvns	r1, r3
 8002330:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <HAL_GPIO_DeInit+0x1c0>)
 8002332:	400a      	ands	r2, r1
 8002334:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002336:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HAL_GPIO_DeInit+0x1c0>)
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	43d9      	mvns	r1, r3
 800233e:	4b39      	ldr	r3, [pc, #228]	; (8002424 <HAL_GPIO_DeInit+0x1c0>)
 8002340:	400a      	ands	r2, r1
 8002342:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	2203      	movs	r2, #3
 8002348:	4013      	ands	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	409a      	lsls	r2, r3
 8002350:	0013      	movs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002354:	4a2d      	ldr	r2, [pc, #180]	; (800240c <HAL_GPIO_DeInit+0x1a8>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	089b      	lsrs	r3, r3, #2
 800235a:	3302      	adds	r3, #2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	589a      	ldr	r2, [r3, r2]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43d9      	mvns	r1, r3
 8002364:	4829      	ldr	r0, [pc, #164]	; (800240c <HAL_GPIO_DeInit+0x1a8>)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	400a      	ands	r2, r1
 800236c:	3302      	adds	r3, #2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2103      	movs	r1, #3
 800237c:	4099      	lsls	r1, r3
 800237e:	000b      	movs	r3, r1
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	08da      	lsrs	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3208      	adds	r2, #8
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	58d3      	ldr	r3, [r2, r3]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	2107      	movs	r1, #7
 8002396:	400a      	ands	r2, r1
 8002398:	0092      	lsls	r2, r2, #2
 800239a:	210f      	movs	r1, #15
 800239c:	4091      	lsls	r1, r2
 800239e:	000a      	movs	r2, r1
 80023a0:	43d1      	mvns	r1, r2
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	08d2      	lsrs	r2, r2, #3
 80023a6:	4019      	ands	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3208      	adds	r2, #8
 80023ac:	0092      	lsls	r2, r2, #2
 80023ae:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	0052      	lsls	r2, r2, #1
 80023b8:	2103      	movs	r1, #3
 80023ba:	4091      	lsls	r1, r2
 80023bc:	000a      	movs	r2, r1
 80023be:	43d2      	mvns	r2, r2
 80023c0:	401a      	ands	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2101      	movs	r1, #1
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4091      	lsls	r1, r2
 80023d0:	000a      	movs	r2, r1
 80023d2:	43d2      	mvns	r2, r2
 80023d4:	401a      	ands	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	0052      	lsls	r2, r2, #1
 80023e2:	2103      	movs	r1, #3
 80023e4:	4091      	lsls	r1, r2
 80023e6:	000a      	movs	r2, r1
 80023e8:	43d2      	mvns	r2, r2
 80023ea:	401a      	ands	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]
    }
    position++;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	40da      	lsrs	r2, r3
 80023fc:	1e13      	subs	r3, r2, #0
 80023fe:	d000      	beq.n	8002402 <HAL_GPIO_DeInit+0x19e>
 8002400:	e73c      	b.n	800227c <HAL_GPIO_DeInit+0x18>
  }
}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b006      	add	sp, #24
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40010000 	.word	0x40010000
 8002410:	50000400 	.word	0x50000400
 8002414:	50000800 	.word	0x50000800
 8002418:	50000c00 	.word	0x50000c00
 800241c:	50001000 	.word	0x50001000
 8002420:	50001c00 	.word	0x50001c00
 8002424:	40010400 	.word	0x40010400

08002428 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	0008      	movs	r0, r1
 8002432:	0011      	movs	r1, r2
 8002434:	1cbb      	adds	r3, r7, #2
 8002436:	1c02      	adds	r2, r0, #0
 8002438:	801a      	strh	r2, [r3, #0]
 800243a:	1c7b      	adds	r3, r7, #1
 800243c:	1c0a      	adds	r2, r1, #0
 800243e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002440:	1c7b      	adds	r3, r7, #1
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002448:	1cbb      	adds	r3, r7, #2
 800244a:	881a      	ldrh	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002450:	e003      	b.n	800245a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002452:	1cbb      	adds	r3, r7, #2
 8002454:	881a      	ldrh	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	46bd      	mov	sp, r7
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e082      	b.n	800257c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2241      	movs	r2, #65	; 0x41
 800247a:	5c9b      	ldrb	r3, [r3, r2]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d107      	bne.n	8002492 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2240      	movs	r2, #64	; 0x40
 8002486:	2100      	movs	r1, #0
 8002488:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	0018      	movs	r0, r3
 800248e:	f7fe ffa3 	bl	80013d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2241      	movs	r2, #65	; 0x41
 8002496:	2124      	movs	r1, #36	; 0x24
 8002498:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	438a      	bics	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4934      	ldr	r1, [pc, #208]	; (8002584 <HAL_I2C_Init+0x120>)
 80024b4:	400a      	ands	r2, r1
 80024b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4931      	ldr	r1, [pc, #196]	; (8002588 <HAL_I2C_Init+0x124>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2180      	movs	r1, #128	; 0x80
 80024da:	0209      	lsls	r1, r1, #8
 80024dc:	430a      	orrs	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	e007      	b.n	80024f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2184      	movs	r1, #132	; 0x84
 80024ec:	0209      	lsls	r1, r1, #8
 80024ee:	430a      	orrs	r2, r1
 80024f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d104      	bne.n	8002504 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	491f      	ldr	r1, [pc, #124]	; (800258c <HAL_I2C_Init+0x128>)
 8002510:	430a      	orrs	r2, r1
 8002512:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	491a      	ldr	r1, [pc, #104]	; (8002588 <HAL_I2C_Init+0x124>)
 8002520:	400a      	ands	r2, r1
 8002522:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	431a      	orrs	r2, r3
 800252e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69d9      	ldr	r1, [r3, #28]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a1a      	ldr	r2, [r3, #32]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2241      	movs	r2, #65	; 0x41
 8002568:	2120      	movs	r1, #32
 800256a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2242      	movs	r2, #66	; 0x42
 8002576:	2100      	movs	r1, #0
 8002578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}
 8002584:	f0ffffff 	.word	0xf0ffffff
 8002588:	ffff7fff 	.word	0xffff7fff
 800258c:	02008000 	.word	0x02008000

08002590 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af02      	add	r7, sp, #8
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	0008      	movs	r0, r1
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	0019      	movs	r1, r3
 800259e:	230a      	movs	r3, #10
 80025a0:	18fb      	adds	r3, r7, r3
 80025a2:	1c02      	adds	r2, r0, #0
 80025a4:	801a      	strh	r2, [r3, #0]
 80025a6:	2308      	movs	r3, #8
 80025a8:	18fb      	adds	r3, r7, r3
 80025aa:	1c0a      	adds	r2, r1, #0
 80025ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2241      	movs	r2, #65	; 0x41
 80025b2:	5c9b      	ldrb	r3, [r3, r2]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b20      	cmp	r3, #32
 80025b8:	d000      	beq.n	80025bc <HAL_I2C_Master_Transmit+0x2c>
 80025ba:	e0e7      	b.n	800278c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2240      	movs	r2, #64	; 0x40
 80025c0:	5c9b      	ldrb	r3, [r3, r2]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Master_Transmit+0x3a>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0e1      	b.n	800278e <HAL_I2C_Master_Transmit+0x1fe>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2240      	movs	r2, #64	; 0x40
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d2:	f7ff f9a3 	bl	800191c <HAL_GetTick>
 80025d6:	0003      	movs	r3, r0
 80025d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	0219      	lsls	r1, r3, #8
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2319      	movs	r3, #25
 80025e6:	2201      	movs	r2, #1
 80025e8:	f000 f8fc 	bl	80027e4 <I2C_WaitOnFlagUntilTimeout>
 80025ec:	1e03      	subs	r3, r0, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0cc      	b.n	800278e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2241      	movs	r2, #65	; 0x41
 80025f8:	2121      	movs	r1, #33	; 0x21
 80025fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2242      	movs	r2, #66	; 0x42
 8002600:	2110      	movs	r1, #16
 8002602:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2208      	movs	r2, #8
 8002614:	18ba      	adds	r2, r7, r2
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002624:	b29b      	uxth	r3, r3
 8002626:	2bff      	cmp	r3, #255	; 0xff
 8002628:	d911      	bls.n	800264e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	22ff      	movs	r2, #255	; 0xff
 800262e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002634:	b2da      	uxtb	r2, r3
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	045c      	lsls	r4, r3, #17
 800263a:	230a      	movs	r3, #10
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	8819      	ldrh	r1, [r3, #0]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	4b55      	ldr	r3, [pc, #340]	; (8002798 <HAL_I2C_Master_Transmit+0x208>)
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	0023      	movs	r3, r4
 8002648:	f000 fa00 	bl	8002a4c <I2C_TransferConfig>
 800264c:	e075      	b.n	800273a <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	b2da      	uxtb	r2, r3
 800265e:	2380      	movs	r3, #128	; 0x80
 8002660:	049c      	lsls	r4, r3, #18
 8002662:	230a      	movs	r3, #10
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	8819      	ldrh	r1, [r3, #0]
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	4b4b      	ldr	r3, [pc, #300]	; (8002798 <HAL_I2C_Master_Transmit+0x208>)
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	0023      	movs	r3, r4
 8002670:	f000 f9ec 	bl	8002a4c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002674:	e061      	b.n	800273a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	0018      	movs	r0, r3
 800267e:	f000 f8f0 	bl	8002862 <I2C_WaitOnTXISFlagUntilTimeout>
 8002682:	1e03      	subs	r3, r0, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e081      	b.n	800278e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	781a      	ldrb	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d03a      	beq.n	800273a <HAL_I2C_Master_Transmit+0x1aa>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d136      	bne.n	800273a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	0013      	movs	r3, r2
 80026d6:	2200      	movs	r2, #0
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	f000 f883 	bl	80027e4 <I2C_WaitOnFlagUntilTimeout>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e053      	b.n	800278e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2bff      	cmp	r3, #255	; 0xff
 80026ee:	d911      	bls.n	8002714 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	22ff      	movs	r2, #255	; 0xff
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	045c      	lsls	r4, r3, #17
 8002700:	230a      	movs	r3, #10
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	8819      	ldrh	r1, [r3, #0]
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	2300      	movs	r3, #0
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	0023      	movs	r3, r4
 800270e:	f000 f99d 	bl	8002a4c <I2C_TransferConfig>
 8002712:	e012      	b.n	800273a <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	b2da      	uxtb	r2, r3
 8002724:	2380      	movs	r3, #128	; 0x80
 8002726:	049c      	lsls	r4, r3, #18
 8002728:	230a      	movs	r3, #10
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	8819      	ldrh	r1, [r3, #0]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	2300      	movs	r3, #0
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	0023      	movs	r3, r4
 8002736:	f000 f989 	bl	8002a4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d198      	bne.n	8002676 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	0018      	movs	r0, r3
 800274c:	f000 f8c8 	bl	80028e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002750:	1e03      	subs	r3, r0, #0
 8002752:	d001      	beq.n	8002758 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e01a      	b.n	800278e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2220      	movs	r2, #32
 800275e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	490c      	ldr	r1, [pc, #48]	; (800279c <HAL_I2C_Master_Transmit+0x20c>)
 800276c:	400a      	ands	r2, r1
 800276e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2241      	movs	r2, #65	; 0x41
 8002774:	2120      	movs	r1, #32
 8002776:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2242      	movs	r2, #66	; 0x42
 800277c:	2100      	movs	r1, #0
 800277e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	2100      	movs	r1, #0
 8002786:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b007      	add	sp, #28
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	80002000 	.word	0x80002000
 800279c:	fe00e800 	.word	0xfe00e800

080027a0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2202      	movs	r2, #2
 80027b0:	4013      	ands	r3, r2
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d103      	bne.n	80027be <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2201      	movs	r2, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d007      	beq.n	80027dc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699a      	ldr	r2, [r3, #24]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2101      	movs	r1, #1
 80027d8:	430a      	orrs	r2, r1
 80027da:	619a      	str	r2, [r3, #24]
  }
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b002      	add	sp, #8
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	1dfb      	adds	r3, r7, #7
 80027f2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027f4:	e021      	b.n	800283a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	3301      	adds	r3, #1
 80027fa:	d01e      	beq.n	800283a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fc:	f7ff f88e 	bl	800191c <HAL_GetTick>
 8002800:	0002      	movs	r2, r0
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d302      	bcc.n	8002812 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d113      	bne.n	800283a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	2220      	movs	r2, #32
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2241      	movs	r2, #65	; 0x41
 8002822:	2120      	movs	r1, #32
 8002824:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2242      	movs	r2, #66	; 0x42
 800282a:	2100      	movs	r1, #0
 800282c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2240      	movs	r2, #64	; 0x40
 8002832:	2100      	movs	r1, #0
 8002834:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e00f      	b.n	800285a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	4013      	ands	r3, r2
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	425a      	negs	r2, r3
 800284a:	4153      	adcs	r3, r2
 800284c:	b2db      	uxtb	r3, r3
 800284e:	001a      	movs	r2, r3
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d0ce      	beq.n	80027f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	0018      	movs	r0, r3
 800285c:	46bd      	mov	sp, r7
 800285e:	b004      	add	sp, #16
 8002860:	bd80      	pop	{r7, pc}

08002862 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	60f8      	str	r0, [r7, #12]
 800286a:	60b9      	str	r1, [r7, #8]
 800286c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800286e:	e02b      	b.n	80028c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 f86e 	bl	8002958 <I2C_IsAcknowledgeFailed>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e029      	b.n	80028d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3301      	adds	r3, #1
 8002888:	d01e      	beq.n	80028c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7ff f847 	bl	800191c <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d113      	bne.n	80028c8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	2220      	movs	r2, #32
 80028a6:	431a      	orrs	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2241      	movs	r2, #65	; 0x41
 80028b0:	2120      	movs	r1, #32
 80028b2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2242      	movs	r2, #66	; 0x42
 80028b8:	2100      	movs	r1, #0
 80028ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2240      	movs	r2, #64	; 0x40
 80028c0:	2100      	movs	r1, #0
 80028c2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e007      	b.n	80028d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2202      	movs	r2, #2
 80028d0:	4013      	ands	r3, r2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d1cc      	bne.n	8002870 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b004      	add	sp, #16
 80028de:	bd80      	pop	{r7, pc}

080028e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ec:	e028      	b.n	8002940 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 f82f 	bl	8002958 <I2C_IsAcknowledgeFailed>
 80028fa:	1e03      	subs	r3, r0, #0
 80028fc:	d001      	beq.n	8002902 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e026      	b.n	8002950 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002902:	f7ff f80b 	bl	800191c <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d113      	bne.n	8002940 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	2220      	movs	r2, #32
 800291e:	431a      	orrs	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2241      	movs	r2, #65	; 0x41
 8002928:	2120      	movs	r1, #32
 800292a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2242      	movs	r2, #66	; 0x42
 8002930:	2100      	movs	r1, #0
 8002932:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2240      	movs	r2, #64	; 0x40
 8002938:	2100      	movs	r1, #0
 800293a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e007      	b.n	8002950 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2220      	movs	r2, #32
 8002948:	4013      	ands	r3, r2
 800294a:	2b20      	cmp	r3, #32
 800294c:	d1cf      	bne.n	80028ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b004      	add	sp, #16
 8002956:	bd80      	pop	{r7, pc}

08002958 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2210      	movs	r2, #16
 800296c:	4013      	ands	r3, r2
 800296e:	2b10      	cmp	r3, #16
 8002970:	d164      	bne.n	8002a3c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	049b      	lsls	r3, r3, #18
 800297c:	401a      	ands	r2, r3
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	049b      	lsls	r3, r3, #18
 8002982:	429a      	cmp	r2, r3
 8002984:	d02b      	beq.n	80029de <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	01c9      	lsls	r1, r1, #7
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002998:	e021      	b.n	80029de <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3301      	adds	r3, #1
 800299e:	d01e      	beq.n	80029de <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a0:	f7fe ffbc 	bl	800191c <HAL_GetTick>
 80029a4:	0002      	movs	r2, r0
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d302      	bcc.n	80029b6 <I2C_IsAcknowledgeFailed+0x5e>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d113      	bne.n	80029de <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	2220      	movs	r2, #32
 80029bc:	431a      	orrs	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2241      	movs	r2, #65	; 0x41
 80029c6:	2120      	movs	r1, #32
 80029c8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2242      	movs	r2, #66	; 0x42
 80029ce:	2100      	movs	r1, #0
 80029d0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2240      	movs	r2, #64	; 0x40
 80029d6:	2100      	movs	r1, #0
 80029d8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e02f      	b.n	8002a3e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	2220      	movs	r2, #32
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b20      	cmp	r3, #32
 80029ea:	d1d6      	bne.n	800299a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2210      	movs	r2, #16
 80029f2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2220      	movs	r2, #32
 80029fa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	0018      	movs	r0, r3
 8002a00:	f7ff fece 	bl	80027a0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	490e      	ldr	r1, [pc, #56]	; (8002a48 <I2C_IsAcknowledgeFailed+0xf0>)
 8002a10:	400a      	ands	r2, r1
 8002a12:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	2204      	movs	r2, #4
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2241      	movs	r2, #65	; 0x41
 8002a24:	2120      	movs	r1, #32
 8002a26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2242      	movs	r2, #66	; 0x42
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2240      	movs	r2, #64	; 0x40
 8002a34:	2100      	movs	r1, #0
 8002a36:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	fe00e800 	.word	0xfe00e800

08002a4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	0008      	movs	r0, r1
 8002a56:	0011      	movs	r1, r2
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	240a      	movs	r4, #10
 8002a5c:	193b      	adds	r3, r7, r4
 8002a5e:	1c02      	adds	r2, r0, #0
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	2009      	movs	r0, #9
 8002a64:	183b      	adds	r3, r7, r0
 8002a66:	1c0a      	adds	r2, r1, #0
 8002a68:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	0d51      	lsrs	r1, r2, #21
 8002a74:	2280      	movs	r2, #128	; 0x80
 8002a76:	00d2      	lsls	r2, r2, #3
 8002a78:	400a      	ands	r2, r1
 8002a7a:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <I2C_TransferConfig+0x68>)
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	43d2      	mvns	r2, r2
 8002a80:	401a      	ands	r2, r3
 8002a82:	0011      	movs	r1, r2
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	059b      	lsls	r3, r3, #22
 8002a8a:	0d9a      	lsrs	r2, r3, #22
 8002a8c:	183b      	adds	r3, r7, r0
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	0418      	lsls	r0, r3, #16
 8002a92:	23ff      	movs	r3, #255	; 0xff
 8002a94:	041b      	lsls	r3, r3, #16
 8002a96:	4003      	ands	r3, r0
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b005      	add	sp, #20
 8002ab0:	bd90      	pop	{r4, r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	03ff63ff 	.word	0x03ff63ff

08002ab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2241      	movs	r2, #65	; 0x41
 8002ac6:	5c9b      	ldrb	r3, [r3, r2]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d138      	bne.n	8002b40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2240      	movs	r2, #64	; 0x40
 8002ad2:	5c9b      	ldrb	r3, [r3, r2]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e032      	b.n	8002b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2240      	movs	r2, #64	; 0x40
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2241      	movs	r2, #65	; 0x41
 8002ae8:	2124      	movs	r1, #36	; 0x24
 8002aea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2101      	movs	r1, #1
 8002af8:	438a      	bics	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4911      	ldr	r1, [pc, #68]	; (8002b4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2101      	movs	r1, #1
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2241      	movs	r2, #65	; 0x41
 8002b30:	2120      	movs	r1, #32
 8002b32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2240      	movs	r2, #64	; 0x40
 8002b38:	2100      	movs	r1, #0
 8002b3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	e000      	b.n	8002b42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b40:	2302      	movs	r3, #2
  }
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b002      	add	sp, #8
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	ffffefff 	.word	0xffffefff

08002b50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2241      	movs	r2, #65	; 0x41
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b20      	cmp	r3, #32
 8002b64:	d139      	bne.n	8002bda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2240      	movs	r2, #64	; 0x40
 8002b6a:	5c9b      	ldrb	r3, [r3, r2]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e033      	b.n	8002bdc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	2101      	movs	r1, #1
 8002b7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2241      	movs	r2, #65	; 0x41
 8002b80:	2124      	movs	r1, #36	; 0x24
 8002b82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2101      	movs	r1, #1
 8002b90:	438a      	bics	r2, r1
 8002b92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4a11      	ldr	r2, [pc, #68]	; (8002be4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2241      	movs	r2, #65	; 0x41
 8002bca:	2120      	movs	r1, #32
 8002bcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2240      	movs	r2, #64	; 0x40
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	fffff0ff 	.word	0xfffff0ff

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f000 fb6c 	bl	80032d4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfc:	4bc8      	ldr	r3, [pc, #800]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	220c      	movs	r2, #12
 8002c02:	4013      	ands	r3, r2
 8002c04:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c06:	4bc6      	ldr	r3, [pc, #792]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	2380      	movs	r3, #128	; 0x80
 8002c0c:	025b      	lsls	r3, r3, #9
 8002c0e:	4013      	ands	r3, r2
 8002c10:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <HAL_RCC_OscConfig+0x36>
 8002c1c:	e07d      	b.n	8002d1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d007      	beq.n	8002c34 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d112      	bne.n	8002c50 <HAL_RCC_OscConfig+0x68>
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	025b      	lsls	r3, r3, #9
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d10d      	bne.n	8002c50 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	4bba      	ldr	r3, [pc, #744]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d100      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5a>
 8002c40:	e06a      	b.n	8002d18 <HAL_RCC_OscConfig+0x130>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d166      	bne.n	8002d18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f000 fb42 	bl	80032d4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	025b      	lsls	r3, r3, #9
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_OscConfig+0x84>
 8002c5c:	4bb0      	ldr	r3, [pc, #704]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4baf      	ldr	r3, [pc, #700]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	0249      	lsls	r1, r1, #9
 8002c66:	430a      	orrs	r2, r1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e027      	b.n	8002cbc <HAL_RCC_OscConfig+0xd4>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	23a0      	movs	r3, #160	; 0xa0
 8002c72:	02db      	lsls	r3, r3, #11
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d10e      	bne.n	8002c96 <HAL_RCC_OscConfig+0xae>
 8002c78:	4ba9      	ldr	r3, [pc, #676]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4ba8      	ldr	r3, [pc, #672]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	02c9      	lsls	r1, r1, #11
 8002c82:	430a      	orrs	r2, r1
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	4ba6      	ldr	r3, [pc, #664]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4ba5      	ldr	r3, [pc, #660]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002c8c:	2180      	movs	r1, #128	; 0x80
 8002c8e:	0249      	lsls	r1, r1, #9
 8002c90:	430a      	orrs	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e012      	b.n	8002cbc <HAL_RCC_OscConfig+0xd4>
 8002c96:	4ba2      	ldr	r3, [pc, #648]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4ba1      	ldr	r3, [pc, #644]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002c9c:	49a1      	ldr	r1, [pc, #644]	; (8002f24 <HAL_RCC_OscConfig+0x33c>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	4b9f      	ldr	r3, [pc, #636]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	025b      	lsls	r3, r3, #9
 8002caa:	4013      	ands	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4b9b      	ldr	r3, [pc, #620]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b9a      	ldr	r3, [pc, #616]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002cb6:	499c      	ldr	r1, [pc, #624]	; (8002f28 <HAL_RCC_OscConfig+0x340>)
 8002cb8:	400a      	ands	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d014      	beq.n	8002cee <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fe2a 	bl	800191c <HAL_GetTick>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cce:	f7fe fe25 	bl	800191c <HAL_GetTick>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b64      	cmp	r3, #100	; 0x64
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e2f9      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ce0:	4b8f      	ldr	r3, [pc, #572]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	029b      	lsls	r3, r3, #10
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCC_OscConfig+0xe6>
 8002cec:	e015      	b.n	8002d1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fe15 	bl	800191c <HAL_GetTick>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cf8:	f7fe fe10 	bl	800191c <HAL_GetTick>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e2e4      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d0a:	4b85      	ldr	r3, [pc, #532]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	; 0x80
 8002d10:	029b      	lsls	r3, r3, #10
 8002d12:	4013      	ands	r3, r2
 8002d14:	d1f0      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x110>
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	4013      	ands	r3, r2
 8002d22:	d100      	bne.n	8002d26 <HAL_RCC_OscConfig+0x13e>
 8002d24:	e099      	b.n	8002e5a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	2220      	movs	r2, #32
 8002d30:	4013      	ands	r3, r2
 8002d32:	d009      	beq.n	8002d48 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002d34:	4b7a      	ldr	r3, [pc, #488]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b79      	ldr	r3, [pc, #484]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002d3a:	2120      	movs	r1, #32
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	2220      	movs	r2, #32
 8002d44:	4393      	bics	r3, r2
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d005      	beq.n	8002d5a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d13e      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x1ea>
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d13b      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002d5a:	4b71      	ldr	r3, [pc, #452]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	4013      	ands	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_RCC_OscConfig+0x186>
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e2b2      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6e:	4b6c      	ldr	r3, [pc, #432]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4a6e      	ldr	r2, [pc, #440]	; (8002f2c <HAL_RCC_OscConfig+0x344>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	0019      	movs	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	021a      	lsls	r2, r3, #8
 8002d7e:	4b68      	ldr	r3, [pc, #416]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002d80:	430a      	orrs	r2, r1
 8002d82:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2209      	movs	r2, #9
 8002d8a:	4393      	bics	r3, r2
 8002d8c:	0019      	movs	r1, r3
 8002d8e:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d96:	f000 fbeb 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8002d9a:	0001      	movs	r1, r0
 8002d9c:	4b60      	ldr	r3, [pc, #384]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	220f      	movs	r2, #15
 8002da4:	4013      	ands	r3, r2
 8002da6:	4a62      	ldr	r2, [pc, #392]	; (8002f30 <HAL_RCC_OscConfig+0x348>)
 8002da8:	5cd3      	ldrb	r3, [r2, r3]
 8002daa:	000a      	movs	r2, r1
 8002dac:	40da      	lsrs	r2, r3
 8002dae:	4b61      	ldr	r3, [pc, #388]	; (8002f34 <HAL_RCC_OscConfig+0x34c>)
 8002db0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002db2:	4b61      	ldr	r3, [pc, #388]	; (8002f38 <HAL_RCC_OscConfig+0x350>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2513      	movs	r5, #19
 8002db8:	197c      	adds	r4, r7, r5
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f7fe fd68 	bl	8001890 <HAL_InitTick>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002dc4:	197b      	adds	r3, r7, r5
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d046      	beq.n	8002e5a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002dcc:	197b      	adds	r3, r7, r5
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	e280      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d027      	beq.n	8002e28 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002dd8:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2209      	movs	r2, #9
 8002dde:	4393      	bics	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	4b4f      	ldr	r3, [pc, #316]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de6:	430a      	orrs	r2, r1
 8002de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fe fd97 	bl	800191c <HAL_GetTick>
 8002dee:	0003      	movs	r3, r0
 8002df0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002df4:	f7fe fd92 	bl	800191c <HAL_GetTick>
 8002df8:	0002      	movs	r2, r0
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e266      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e06:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d0f1      	beq.n	8002df4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a45      	ldr	r2, [pc, #276]	; (8002f2c <HAL_RCC_OscConfig+0x344>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	0019      	movs	r1, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	021a      	lsls	r2, r3, #8
 8002e20:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e018      	b.n	8002e5a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e28:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002e2e:	2101      	movs	r1, #1
 8002e30:	438a      	bics	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e34:	f7fe fd72 	bl	800191c <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fd6d 	bl	800191c <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e241      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e50:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2204      	movs	r2, #4
 8002e56:	4013      	ands	r3, r2
 8002e58:	d1f1      	bne.n	8002e3e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2210      	movs	r2, #16
 8002e60:	4013      	ands	r3, r2
 8002e62:	d100      	bne.n	8002e66 <HAL_RCC_OscConfig+0x27e>
 8002e64:	e0a1      	b.n	8002faa <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d140      	bne.n	8002eee <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4013      	ands	r3, r2
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_OscConfig+0x29c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e227      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e84:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	4a2c      	ldr	r2, [pc, #176]	; (8002f3c <HAL_RCC_OscConfig+0x354>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1a      	ldr	r2, [r3, #32]
 8002e92:	4b23      	ldr	r3, [pc, #140]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002e94:	430a      	orrs	r2, r1
 8002e96:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e98:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	0a19      	lsrs	r1, r3, #8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	061a      	lsls	r2, r3, #24
 8002ea6:	4b1e      	ldr	r3, [pc, #120]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	0b5b      	lsrs	r3, r3, #13
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	2280      	movs	r2, #128	; 0x80
 8002eb6:	0212      	lsls	r2, r2, #8
 8002eb8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	091b      	lsrs	r3, r3, #4
 8002ec0:	210f      	movs	r1, #15
 8002ec2:	400b      	ands	r3, r1
 8002ec4:	491a      	ldr	r1, [pc, #104]	; (8002f30 <HAL_RCC_OscConfig+0x348>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <HAL_RCC_OscConfig+0x34c>)
 8002ecc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002ece:	4b1a      	ldr	r3, [pc, #104]	; (8002f38 <HAL_RCC_OscConfig+0x350>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2513      	movs	r5, #19
 8002ed4:	197c      	adds	r4, r7, r5
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7fe fcda 	bl	8001890 <HAL_InitTick>
 8002edc:	0003      	movs	r3, r0
 8002ede:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002ee0:	197b      	adds	r3, r7, r5
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d060      	beq.n	8002faa <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002ee8:	197b      	adds	r3, r7, r5
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	e1f2      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d03f      	beq.n	8002f76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ef6:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <HAL_RCC_OscConfig+0x338>)
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	0049      	lsls	r1, r1, #1
 8002f00:	430a      	orrs	r2, r1
 8002f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fd0a 	bl	800191c <HAL_GetTick>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f0c:	e018      	b.n	8002f40 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f0e:	f7fe fd05 	bl	800191c <HAL_GetTick>
 8002f12:	0002      	movs	r2, r0
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d911      	bls.n	8002f40 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1d9      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
 8002f20:	40021000 	.word	0x40021000
 8002f24:	fffeffff 	.word	0xfffeffff
 8002f28:	fffbffff 	.word	0xfffbffff
 8002f2c:	ffffe0ff 	.word	0xffffe0ff
 8002f30:	08006e50 	.word	0x08006e50
 8002f34:	20000000 	.word	0x20000000
 8002f38:	20000004 	.word	0x20000004
 8002f3c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f40:	4bc9      	ldr	r3, [pc, #804]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d0e0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f4c:	4bc6      	ldr	r3, [pc, #792]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	4ac6      	ldr	r2, [pc, #792]	; (800326c <HAL_RCC_OscConfig+0x684>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1a      	ldr	r2, [r3, #32]
 8002f5a:	4bc3      	ldr	r3, [pc, #780]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f60:	4bc1      	ldr	r3, [pc, #772]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	0a19      	lsrs	r1, r3, #8
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
 8002f6c:	061a      	lsls	r2, r3, #24
 8002f6e:	4bbe      	ldr	r3, [pc, #760]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	e019      	b.n	8002faa <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f76:	4bbc      	ldr	r3, [pc, #752]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4bbb      	ldr	r3, [pc, #748]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002f7c:	49bc      	ldr	r1, [pc, #752]	; (8003270 <HAL_RCC_OscConfig+0x688>)
 8002f7e:	400a      	ands	r2, r1
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe fccb 	bl	800191c <HAL_GetTick>
 8002f86:	0003      	movs	r3, r0
 8002f88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fcc6 	bl	800191c <HAL_GetTick>
 8002f90:	0002      	movs	r2, r0
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e19a      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002f9e:	4bb2      	ldr	r3, [pc, #712]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2208      	movs	r2, #8
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d036      	beq.n	8003022 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d019      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbc:	4baa      	ldr	r3, [pc, #680]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002fbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fc0:	4ba9      	ldr	r3, [pc, #676]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fca8 	bl	800191c <HAL_GetTick>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fd2:	f7fe fca3 	bl	800191c <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e177      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fe4:	4ba0      	ldr	r3, [pc, #640]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe8:	2202      	movs	r2, #2
 8002fea:	4013      	ands	r3, r2
 8002fec:	d0f1      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x3ea>
 8002fee:	e018      	b.n	8003022 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff0:	4b9d      	ldr	r3, [pc, #628]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002ff2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ff4:	4b9c      	ldr	r3, [pc, #624]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	438a      	bics	r2, r1
 8002ffa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffc:	f7fe fc8e 	bl	800191c <HAL_GetTick>
 8003000:	0003      	movs	r3, r0
 8003002:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003006:	f7fe fc89 	bl	800191c <HAL_GetTick>
 800300a:	0002      	movs	r2, r0
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e15d      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003018:	4b93      	ldr	r3, [pc, #588]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 800301a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301c:	2202      	movs	r2, #2
 800301e:	4013      	ands	r3, r2
 8003020:	d1f1      	bne.n	8003006 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2204      	movs	r2, #4
 8003028:	4013      	ands	r3, r2
 800302a:	d100      	bne.n	800302e <HAL_RCC_OscConfig+0x446>
 800302c:	e0ae      	b.n	800318c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302e:	2023      	movs	r0, #35	; 0x23
 8003030:	183b      	adds	r3, r7, r0
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003036:	4b8c      	ldr	r3, [pc, #560]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	055b      	lsls	r3, r3, #21
 800303e:	4013      	ands	r3, r2
 8003040:	d109      	bne.n	8003056 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	4b89      	ldr	r3, [pc, #548]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003046:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	0549      	lsls	r1, r1, #21
 800304c:	430a      	orrs	r2, r1
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003050:	183b      	adds	r3, r7, r0
 8003052:	2201      	movs	r2, #1
 8003054:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003056:	4b87      	ldr	r3, [pc, #540]	; (8003274 <HAL_RCC_OscConfig+0x68c>)
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4013      	ands	r3, r2
 8003060:	d11a      	bne.n	8003098 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003062:	4b84      	ldr	r3, [pc, #528]	; (8003274 <HAL_RCC_OscConfig+0x68c>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b83      	ldr	r3, [pc, #524]	; (8003274 <HAL_RCC_OscConfig+0x68c>)
 8003068:	2180      	movs	r1, #128	; 0x80
 800306a:	0049      	lsls	r1, r1, #1
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003070:	f7fe fc54 	bl	800191c <HAL_GetTick>
 8003074:	0003      	movs	r3, r0
 8003076:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307a:	f7fe fc4f 	bl	800191c <HAL_GetTick>
 800307e:	0002      	movs	r2, r0
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b64      	cmp	r3, #100	; 0x64
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e123      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308c:	4b79      	ldr	r3, [pc, #484]	; (8003274 <HAL_RCC_OscConfig+0x68c>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4013      	ands	r3, r2
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	2380      	movs	r3, #128	; 0x80
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_OscConfig+0x4cc>
 80030a4:	4b70      	ldr	r3, [pc, #448]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80030a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030a8:	4b6f      	ldr	r3, [pc, #444]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80030aa:	2180      	movs	r1, #128	; 0x80
 80030ac:	0049      	lsls	r1, r1, #1
 80030ae:	430a      	orrs	r2, r1
 80030b0:	651a      	str	r2, [r3, #80]	; 0x50
 80030b2:	e031      	b.n	8003118 <HAL_RCC_OscConfig+0x530>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10c      	bne.n	80030d6 <HAL_RCC_OscConfig+0x4ee>
 80030bc:	4b6a      	ldr	r3, [pc, #424]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80030be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030c0:	4b69      	ldr	r3, [pc, #420]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80030c2:	496b      	ldr	r1, [pc, #428]	; (8003270 <HAL_RCC_OscConfig+0x688>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	651a      	str	r2, [r3, #80]	; 0x50
 80030c8:	4b67      	ldr	r3, [pc, #412]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80030ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030cc:	4b66      	ldr	r3, [pc, #408]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80030ce:	496a      	ldr	r1, [pc, #424]	; (8003278 <HAL_RCC_OscConfig+0x690>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	651a      	str	r2, [r3, #80]	; 0x50
 80030d4:	e020      	b.n	8003118 <HAL_RCC_OscConfig+0x530>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	23a0      	movs	r3, #160	; 0xa0
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	429a      	cmp	r2, r3
 80030e0:	d10e      	bne.n	8003100 <HAL_RCC_OscConfig+0x518>
 80030e2:	4b61      	ldr	r3, [pc, #388]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80030e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030e6:	4b60      	ldr	r3, [pc, #384]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80030e8:	2180      	movs	r1, #128	; 0x80
 80030ea:	00c9      	lsls	r1, r1, #3
 80030ec:	430a      	orrs	r2, r1
 80030ee:	651a      	str	r2, [r3, #80]	; 0x50
 80030f0:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80030f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f4:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	0049      	lsls	r1, r1, #1
 80030fa:	430a      	orrs	r2, r1
 80030fc:	651a      	str	r2, [r3, #80]	; 0x50
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0x530>
 8003100:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003102:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003104:	4b58      	ldr	r3, [pc, #352]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003106:	495a      	ldr	r1, [pc, #360]	; (8003270 <HAL_RCC_OscConfig+0x688>)
 8003108:	400a      	ands	r2, r1
 800310a:	651a      	str	r2, [r3, #80]	; 0x50
 800310c:	4b56      	ldr	r3, [pc, #344]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 800310e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003110:	4b55      	ldr	r3, [pc, #340]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003112:	4959      	ldr	r1, [pc, #356]	; (8003278 <HAL_RCC_OscConfig+0x690>)
 8003114:	400a      	ands	r2, r1
 8003116:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d015      	beq.n	800314c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003120:	f7fe fbfc 	bl	800191c <HAL_GetTick>
 8003124:	0003      	movs	r3, r0
 8003126:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003128:	e009      	b.n	800313e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f7fe fbf7 	bl	800191c <HAL_GetTick>
 800312e:	0002      	movs	r2, r0
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	4a51      	ldr	r2, [pc, #324]	; (800327c <HAL_RCC_OscConfig+0x694>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d901      	bls.n	800313e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0ca      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800313e:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003140:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4013      	ands	r3, r2
 8003148:	d0ef      	beq.n	800312a <HAL_RCC_OscConfig+0x542>
 800314a:	e014      	b.n	8003176 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7fe fbe6 	bl	800191c <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003154:	e009      	b.n	800316a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7fe fbe1 	bl	800191c <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	4a46      	ldr	r2, [pc, #280]	; (800327c <HAL_RCC_OscConfig+0x694>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0b4      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800316a:	4b3f      	ldr	r3, [pc, #252]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 800316c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4013      	ands	r3, r2
 8003174:	d1ef      	bne.n	8003156 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003176:	2323      	movs	r3, #35	; 0x23
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003180:	4b39      	ldr	r3, [pc, #228]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003184:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003186:	493e      	ldr	r1, [pc, #248]	; (8003280 <HAL_RCC_OscConfig+0x698>)
 8003188:	400a      	ands	r2, r1
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	2b00      	cmp	r3, #0
 8003192:	d100      	bne.n	8003196 <HAL_RCC_OscConfig+0x5ae>
 8003194:	e09d      	b.n	80032d2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	2b0c      	cmp	r3, #12
 800319a:	d100      	bne.n	800319e <HAL_RCC_OscConfig+0x5b6>
 800319c:	e076      	b.n	800328c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d145      	bne.n	8003232 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80031ac:	4935      	ldr	r1, [pc, #212]	; (8003284 <HAL_RCC_OscConfig+0x69c>)
 80031ae:	400a      	ands	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fe fbb3 	bl	800191c <HAL_GetTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe fbae 	bl	800191c <HAL_GetTick>
 80031c0:	0002      	movs	r2, r0
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e082      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	049b      	lsls	r3, r3, #18
 80031d6:	4013      	ands	r3, r2
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031da:	4b23      	ldr	r3, [pc, #140]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <HAL_RCC_OscConfig+0x6a0>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	431a      	orrs	r2, r3
 80031f4:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80031f6:	430a      	orrs	r2, r1
 80031f8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031fa:	4b1b      	ldr	r3, [pc, #108]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	0449      	lsls	r1, r1, #17
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe fb88 	bl	800191c <HAL_GetTick>
 800320c:	0003      	movs	r3, r0
 800320e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003212:	f7fe fb83 	bl	800191c <HAL_GetTick>
 8003216:	0002      	movs	r2, r0
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e057      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	049b      	lsls	r3, r3, #18
 800322c:	4013      	ands	r3, r2
 800322e:	d0f0      	beq.n	8003212 <HAL_RCC_OscConfig+0x62a>
 8003230:	e04f      	b.n	80032d2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 8003238:	4912      	ldr	r1, [pc, #72]	; (8003284 <HAL_RCC_OscConfig+0x69c>)
 800323a:	400a      	ands	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7fe fb6d 	bl	800191c <HAL_GetTick>
 8003242:	0003      	movs	r3, r0
 8003244:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe fb68 	bl	800191c <HAL_GetTick>
 800324c:	0002      	movs	r2, r0
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e03c      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800325a:	4b03      	ldr	r3, [pc, #12]	; (8003268 <HAL_RCC_OscConfig+0x680>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	2380      	movs	r3, #128	; 0x80
 8003260:	049b      	lsls	r3, r3, #18
 8003262:	4013      	ands	r3, r2
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x660>
 8003266:	e034      	b.n	80032d2 <HAL_RCC_OscConfig+0x6ea>
 8003268:	40021000 	.word	0x40021000
 800326c:	ffff1fff 	.word	0xffff1fff
 8003270:	fffffeff 	.word	0xfffffeff
 8003274:	40007000 	.word	0x40007000
 8003278:	fffffbff 	.word	0xfffffbff
 800327c:	00001388 	.word	0x00001388
 8003280:	efffffff 	.word	0xefffffff
 8003284:	feffffff 	.word	0xfeffffff
 8003288:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e01d      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003298:	4b10      	ldr	r3, [pc, #64]	; (80032dc <HAL_RCC_OscConfig+0x6f4>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	025b      	lsls	r3, r3, #9
 80032a4:	401a      	ands	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10f      	bne.n	80032ce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	23f0      	movs	r3, #240	; 0xf0
 80032b2:	039b      	lsls	r3, r3, #14
 80032b4:	401a      	ands	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	23c0      	movs	r3, #192	; 0xc0
 80032c2:	041b      	lsls	r3, r3, #16
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b00a      	add	sp, #40	; 0x28
 80032da:	bdb0      	pop	{r4, r5, r7, pc}
 80032dc:	40021000 	.word	0x40021000

080032e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e0:	b5b0      	push	{r4, r5, r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e128      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032f4:	4b96      	ldr	r3, [pc, #600]	; (8003550 <HAL_RCC_ClockConfig+0x270>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2201      	movs	r2, #1
 80032fa:	4013      	ands	r3, r2
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d91e      	bls.n	8003340 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003302:	4b93      	ldr	r3, [pc, #588]	; (8003550 <HAL_RCC_ClockConfig+0x270>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2201      	movs	r2, #1
 8003308:	4393      	bics	r3, r2
 800330a:	0019      	movs	r1, r3
 800330c:	4b90      	ldr	r3, [pc, #576]	; (8003550 <HAL_RCC_ClockConfig+0x270>)
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003314:	f7fe fb02 	bl	800191c <HAL_GetTick>
 8003318:	0003      	movs	r3, r0
 800331a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331c:	e009      	b.n	8003332 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331e:	f7fe fafd 	bl	800191c <HAL_GetTick>
 8003322:	0002      	movs	r2, r0
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	4a8a      	ldr	r2, [pc, #552]	; (8003554 <HAL_RCC_ClockConfig+0x274>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e109      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003332:	4b87      	ldr	r3, [pc, #540]	; (8003550 <HAL_RCC_ClockConfig+0x270>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2201      	movs	r2, #1
 8003338:	4013      	ands	r3, r2
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d1ee      	bne.n	800331e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2202      	movs	r2, #2
 8003346:	4013      	ands	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800334a:	4b83      	ldr	r3, [pc, #524]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	22f0      	movs	r2, #240	; 0xf0
 8003350:	4393      	bics	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	4b7f      	ldr	r3, [pc, #508]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 800335a:	430a      	orrs	r2, r1
 800335c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2201      	movs	r2, #1
 8003364:	4013      	ands	r3, r2
 8003366:	d100      	bne.n	800336a <HAL_RCC_ClockConfig+0x8a>
 8003368:	e089      	b.n	800347e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d107      	bne.n	8003382 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003372:	4b79      	ldr	r3, [pc, #484]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	2380      	movs	r3, #128	; 0x80
 8003378:	029b      	lsls	r3, r3, #10
 800337a:	4013      	ands	r3, r2
 800337c:	d120      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0e1      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b03      	cmp	r3, #3
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800338a:	4b73      	ldr	r3, [pc, #460]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	2380      	movs	r3, #128	; 0x80
 8003390:	049b      	lsls	r3, r3, #18
 8003392:	4013      	ands	r3, r2
 8003394:	d114      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0d5      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d106      	bne.n	80033b0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2204      	movs	r2, #4
 80033a8:	4013      	ands	r3, r2
 80033aa:	d109      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0ca      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80033b0:	4b69      	ldr	r3, [pc, #420]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4013      	ands	r3, r2
 80033ba:	d101      	bne.n	80033c0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0c2      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c0:	4b65      	ldr	r3, [pc, #404]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2203      	movs	r2, #3
 80033c6:	4393      	bics	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4b62      	ldr	r3, [pc, #392]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d4:	f7fe faa2 	bl	800191c <HAL_GetTick>
 80033d8:	0003      	movs	r3, r0
 80033da:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d111      	bne.n	8003408 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033e4:	e009      	b.n	80033fa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e6:	f7fe fa99 	bl	800191c <HAL_GetTick>
 80033ea:	0002      	movs	r2, r0
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	4a58      	ldr	r2, [pc, #352]	; (8003554 <HAL_RCC_ClockConfig+0x274>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0a5      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80033fa:	4b57      	ldr	r3, [pc, #348]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	220c      	movs	r2, #12
 8003400:	4013      	ands	r3, r2
 8003402:	2b08      	cmp	r3, #8
 8003404:	d1ef      	bne.n	80033e6 <HAL_RCC_ClockConfig+0x106>
 8003406:	e03a      	b.n	800347e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d111      	bne.n	8003434 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003410:	e009      	b.n	8003426 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003412:	f7fe fa83 	bl	800191c <HAL_GetTick>
 8003416:	0002      	movs	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	4a4d      	ldr	r2, [pc, #308]	; (8003554 <HAL_RCC_ClockConfig+0x274>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e08f      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003426:	4b4c      	ldr	r3, [pc, #304]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	220c      	movs	r2, #12
 800342c:	4013      	ands	r3, r2
 800342e:	2b0c      	cmp	r3, #12
 8003430:	d1ef      	bne.n	8003412 <HAL_RCC_ClockConfig+0x132>
 8003432:	e024      	b.n	800347e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d11b      	bne.n	8003474 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800343c:	e009      	b.n	8003452 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343e:	f7fe fa6d 	bl	800191c <HAL_GetTick>
 8003442:	0002      	movs	r2, r0
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	4a42      	ldr	r2, [pc, #264]	; (8003554 <HAL_RCC_ClockConfig+0x274>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e079      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003452:	4b41      	ldr	r3, [pc, #260]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	220c      	movs	r2, #12
 8003458:	4013      	ands	r3, r2
 800345a:	2b04      	cmp	r3, #4
 800345c:	d1ef      	bne.n	800343e <HAL_RCC_ClockConfig+0x15e>
 800345e:	e00e      	b.n	800347e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003460:	f7fe fa5c 	bl	800191c <HAL_GetTick>
 8003464:	0002      	movs	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	4a3a      	ldr	r2, [pc, #232]	; (8003554 <HAL_RCC_ClockConfig+0x274>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e068      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003474:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	220c      	movs	r2, #12
 800347a:	4013      	ands	r3, r2
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <HAL_RCC_ClockConfig+0x270>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2201      	movs	r2, #1
 8003484:	4013      	ands	r3, r2
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	429a      	cmp	r2, r3
 800348a:	d21e      	bcs.n	80034ca <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348c:	4b30      	ldr	r3, [pc, #192]	; (8003550 <HAL_RCC_ClockConfig+0x270>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2201      	movs	r2, #1
 8003492:	4393      	bics	r3, r2
 8003494:	0019      	movs	r1, r3
 8003496:	4b2e      	ldr	r3, [pc, #184]	; (8003550 <HAL_RCC_ClockConfig+0x270>)
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800349e:	f7fe fa3d 	bl	800191c <HAL_GetTick>
 80034a2:	0003      	movs	r3, r0
 80034a4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	e009      	b.n	80034bc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7fe fa38 	bl	800191c <HAL_GetTick>
 80034ac:	0002      	movs	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	4a28      	ldr	r2, [pc, #160]	; (8003554 <HAL_RCC_ClockConfig+0x274>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e044      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034bc:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_ClockConfig+0x270>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2201      	movs	r2, #1
 80034c2:	4013      	ands	r3, r2
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d1ee      	bne.n	80034a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2204      	movs	r2, #4
 80034d0:	4013      	ands	r3, r2
 80034d2:	d009      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d4:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a20      	ldr	r2, [pc, #128]	; (800355c <HAL_RCC_ClockConfig+0x27c>)
 80034da:	4013      	ands	r3, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2208      	movs	r2, #8
 80034ee:	4013      	ands	r3, r2
 80034f0:	d00a      	beq.n	8003508 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034f2:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	4a1a      	ldr	r2, [pc, #104]	; (8003560 <HAL_RCC_ClockConfig+0x280>)
 80034f8:	4013      	ands	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	00da      	lsls	r2, r3, #3
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 8003504:	430a      	orrs	r2, r1
 8003506:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003508:	f000 f832 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800350c:	0001      	movs	r1, r0
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_ClockConfig+0x278>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	091b      	lsrs	r3, r3, #4
 8003514:	220f      	movs	r2, #15
 8003516:	4013      	ands	r3, r2
 8003518:	4a12      	ldr	r2, [pc, #72]	; (8003564 <HAL_RCC_ClockConfig+0x284>)
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	000a      	movs	r2, r1
 800351e:	40da      	lsrs	r2, r3
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_ClockConfig+0x288>)
 8003522:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_RCC_ClockConfig+0x28c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	250b      	movs	r5, #11
 800352a:	197c      	adds	r4, r7, r5
 800352c:	0018      	movs	r0, r3
 800352e:	f7fe f9af 	bl	8001890 <HAL_InitTick>
 8003532:	0003      	movs	r3, r0
 8003534:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003536:	197b      	adds	r3, r7, r5
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800353e:	197b      	adds	r3, r7, r5
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	e000      	b.n	8003546 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	0018      	movs	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	b004      	add	sp, #16
 800354c:	bdb0      	pop	{r4, r5, r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	40022000 	.word	0x40022000
 8003554:	00001388 	.word	0x00001388
 8003558:	40021000 	.word	0x40021000
 800355c:	fffff8ff 	.word	0xfffff8ff
 8003560:	ffffc7ff 	.word	0xffffc7ff
 8003564:	08006e50 	.word	0x08006e50
 8003568:	20000000 	.word	0x20000000
 800356c:	20000004 	.word	0x20000004

08003570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b5b0      	push	{r4, r5, r7, lr}
 8003572:	b08e      	sub	sp, #56	; 0x38
 8003574:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003576:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800357c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800357e:	230c      	movs	r3, #12
 8003580:	4013      	ands	r3, r2
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d014      	beq.n	80035b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003586:	d900      	bls.n	800358a <HAL_RCC_GetSysClockFreq+0x1a>
 8003588:	e07b      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x112>
 800358a:	2b04      	cmp	r3, #4
 800358c:	d002      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x24>
 800358e:	2b08      	cmp	r3, #8
 8003590:	d00b      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x3a>
 8003592:	e076      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003594:	4b44      	ldr	r3, [pc, #272]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2210      	movs	r2, #16
 800359a:	4013      	ands	r3, r2
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800359e:	4b43      	ldr	r3, [pc, #268]	; (80036ac <HAL_RCC_GetSysClockFreq+0x13c>)
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80035a2:	e07c      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80035a4:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x140>)
 80035a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035a8:	e079      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035aa:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035ae:	e076      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80035b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b2:	0c9a      	lsrs	r2, r3, #18
 80035b4:	230f      	movs	r3, #15
 80035b6:	401a      	ands	r2, r3
 80035b8:	4b3f      	ldr	r3, [pc, #252]	; (80036b8 <HAL_RCC_GetSysClockFreq+0x148>)
 80035ba:	5c9b      	ldrb	r3, [r3, r2]
 80035bc:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	0d9a      	lsrs	r2, r3, #22
 80035c2:	2303      	movs	r3, #3
 80035c4:	4013      	ands	r3, r2
 80035c6:	3301      	adds	r3, #1
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ca:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x138>)
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	2380      	movs	r3, #128	; 0x80
 80035d0:	025b      	lsls	r3, r3, #9
 80035d2:	4013      	ands	r3, r2
 80035d4:	d01a      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	4a35      	ldr	r2, [pc, #212]	; (80036b4 <HAL_RCC_GetSysClockFreq+0x144>)
 80035e0:	2300      	movs	r3, #0
 80035e2:	69b8      	ldr	r0, [r7, #24]
 80035e4:	69f9      	ldr	r1, [r7, #28]
 80035e6:	f7fc fe45 	bl	8000274 <__aeabi_lmul>
 80035ea:	0002      	movs	r2, r0
 80035ec:	000b      	movs	r3, r1
 80035ee:	0010      	movs	r0, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	2300      	movs	r3, #0
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f7fc fe19 	bl	8000234 <__aeabi_uldivmod>
 8003602:	0002      	movs	r2, r0
 8003604:	000b      	movs	r3, r1
 8003606:	0013      	movs	r3, r2
 8003608:	637b      	str	r3, [r7, #52]	; 0x34
 800360a:	e037      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800360c:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x138>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2210      	movs	r2, #16
 8003612:	4013      	ands	r3, r2
 8003614:	d01a      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4a23      	ldr	r2, [pc, #140]	; (80036ac <HAL_RCC_GetSysClockFreq+0x13c>)
 8003620:	2300      	movs	r3, #0
 8003622:	68b8      	ldr	r0, [r7, #8]
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	f7fc fe25 	bl	8000274 <__aeabi_lmul>
 800362a:	0002      	movs	r2, r0
 800362c:	000b      	movs	r3, r1
 800362e:	0010      	movs	r0, r2
 8003630:	0019      	movs	r1, r3
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f7fc fdf9 	bl	8000234 <__aeabi_uldivmod>
 8003642:	0002      	movs	r2, r0
 8003644:	000b      	movs	r3, r1
 8003646:	0013      	movs	r3, r2
 8003648:	637b      	str	r3, [r7, #52]	; 0x34
 800364a:	e017      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	0018      	movs	r0, r3
 8003650:	2300      	movs	r3, #0
 8003652:	0019      	movs	r1, r3
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003656:	2300      	movs	r3, #0
 8003658:	f7fc fe0c 	bl	8000274 <__aeabi_lmul>
 800365c:	0002      	movs	r2, r0
 800365e:	000b      	movs	r3, r1
 8003660:	0010      	movs	r0, r2
 8003662:	0019      	movs	r1, r3
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	001c      	movs	r4, r3
 8003668:	2300      	movs	r3, #0
 800366a:	001d      	movs	r5, r3
 800366c:	0022      	movs	r2, r4
 800366e:	002b      	movs	r3, r5
 8003670:	f7fc fde0 	bl	8000234 <__aeabi_uldivmod>
 8003674:	0002      	movs	r2, r0
 8003676:	000b      	movs	r3, r1
 8003678:	0013      	movs	r3, r2
 800367a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003680:	e00d      	b.n	800369e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	0b5b      	lsrs	r3, r3, #13
 8003688:	2207      	movs	r2, #7
 800368a:	4013      	ands	r3, r2
 800368c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	3301      	adds	r3, #1
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	0212      	lsls	r2, r2, #8
 8003696:	409a      	lsls	r2, r3
 8003698:	0013      	movs	r3, r2
 800369a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800369c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80036a0:	0018      	movs	r0, r3
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b00e      	add	sp, #56	; 0x38
 80036a6:	bdb0      	pop	{r4, r5, r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	003d0900 	.word	0x003d0900
 80036b0:	00f42400 	.word	0x00f42400
 80036b4:	007a1200 	.word	0x007a1200
 80036b8:	08006e68 	.word	0x08006e68

080036bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <HAL_RCC_GetHCLKFreq+0x10>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	0018      	movs	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	46c0      	nop			; (mov r8, r8)
 80036cc:	20000000 	.word	0x20000000

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036d4:	f7ff fff2 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 80036d8:	0001      	movs	r1, r0
 80036da:	4b06      	ldr	r3, [pc, #24]	; (80036f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	2207      	movs	r2, #7
 80036e2:	4013      	ands	r3, r2
 80036e4:	4a04      	ldr	r2, [pc, #16]	; (80036f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036e6:	5cd3      	ldrb	r3, [r2, r3]
 80036e8:	40d9      	lsrs	r1, r3
 80036ea:	000b      	movs	r3, r1
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	40021000 	.word	0x40021000
 80036f8:	08006e60 	.word	0x08006e60

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003700:	f7ff ffdc 	bl	80036bc <HAL_RCC_GetHCLKFreq>
 8003704:	0001      	movs	r1, r0
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	0adb      	lsrs	r3, r3, #11
 800370c:	2207      	movs	r2, #7
 800370e:	4013      	ands	r3, r2
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003712:	5cd3      	ldrb	r3, [r2, r3]
 8003714:	40d9      	lsrs	r1, r3
 8003716:	000b      	movs	r3, r1
}
 8003718:	0018      	movs	r0, r3
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	40021000 	.word	0x40021000
 8003724:	08006e60 	.word	0x08006e60

08003728 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003730:	2017      	movs	r0, #23
 8003732:	183b      	adds	r3, r7, r0
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2220      	movs	r2, #32
 800373e:	4013      	ands	r3, r2
 8003740:	d100      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8003742:	e0c2      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003744:	4b91      	ldr	r3, [pc, #580]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	055b      	lsls	r3, r3, #21
 800374c:	4013      	ands	r3, r2
 800374e:	d109      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003750:	4b8e      	ldr	r3, [pc, #568]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003752:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003754:	4b8d      	ldr	r3, [pc, #564]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003756:	2180      	movs	r1, #128	; 0x80
 8003758:	0549      	lsls	r1, r1, #21
 800375a:	430a      	orrs	r2, r1
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800375e:	183b      	adds	r3, r7, r0
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003764:	4b8a      	ldr	r3, [pc, #552]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	4013      	ands	r3, r2
 800376e:	d11a      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003770:	4b87      	ldr	r3, [pc, #540]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b86      	ldr	r3, [pc, #536]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	0049      	lsls	r1, r1, #1
 800377a:	430a      	orrs	r2, r1
 800377c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377e:	f7fe f8cd 	bl	800191c <HAL_GetTick>
 8003782:	0003      	movs	r3, r0
 8003784:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	e008      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003788:	f7fe f8c8 	bl	800191c <HAL_GetTick>
 800378c:	0002      	movs	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e0f3      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800379a:	4b7d      	ldr	r3, [pc, #500]	; (8003990 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4013      	ands	r3, r2
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80037a6:	4b79      	ldr	r3, [pc, #484]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	23c0      	movs	r3, #192	; 0xc0
 80037ac:	039b      	lsls	r3, r3, #14
 80037ae:	4013      	ands	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	23c0      	movs	r3, #192	; 0xc0
 80037b8:	039b      	lsls	r3, r3, #14
 80037ba:	4013      	ands	r3, r2
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	429a      	cmp	r2, r3
 80037c0:	d013      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	23c0      	movs	r3, #192	; 0xc0
 80037c8:	029b      	lsls	r3, r3, #10
 80037ca:	401a      	ands	r2, r3
 80037cc:	23c0      	movs	r3, #192	; 0xc0
 80037ce:	029b      	lsls	r3, r3, #10
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d10a      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80037d4:	4b6d      	ldr	r3, [pc, #436]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	029b      	lsls	r3, r3, #10
 80037dc:	401a      	ands	r2, r3
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	029b      	lsls	r3, r3, #10
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d101      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e0cb      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80037ea:	4b68      	ldr	r3, [pc, #416]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037ee:	23c0      	movs	r3, #192	; 0xc0
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	4013      	ands	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d03b      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	23c0      	movs	r3, #192	; 0xc0
 8003802:	029b      	lsls	r3, r3, #10
 8003804:	4013      	ands	r3, r2
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	429a      	cmp	r2, r3
 800380a:	d033      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2220      	movs	r2, #32
 8003812:	4013      	ands	r3, r2
 8003814:	d02e      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003816:	4b5d      	ldr	r3, [pc, #372]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381a:	4a5e      	ldr	r2, [pc, #376]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800381c:	4013      	ands	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003820:	4b5a      	ldr	r3, [pc, #360]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003822:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003824:	4b59      	ldr	r3, [pc, #356]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003826:	2180      	movs	r1, #128	; 0x80
 8003828:	0309      	lsls	r1, r1, #12
 800382a:	430a      	orrs	r2, r1
 800382c:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800382e:	4b57      	ldr	r3, [pc, #348]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003832:	4b56      	ldr	r3, [pc, #344]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003834:	4958      	ldr	r1, [pc, #352]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003836:	400a      	ands	r2, r1
 8003838:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800383a:	4b54      	ldr	r3, [pc, #336]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	2380      	movs	r3, #128	; 0x80
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4013      	ands	r3, r2
 8003848:	d014      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384a:	f7fe f867 	bl	800191c <HAL_GetTick>
 800384e:	0003      	movs	r3, r0
 8003850:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003852:	e009      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7fe f862 	bl	800191c <HAL_GetTick>
 8003858:	0002      	movs	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	4a4f      	ldr	r2, [pc, #316]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e08c      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003868:	4b48      	ldr	r3, [pc, #288]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800386a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4013      	ands	r3, r2
 8003872:	d0ef      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	23c0      	movs	r3, #192	; 0xc0
 800387a:	029b      	lsls	r3, r3, #10
 800387c:	401a      	ands	r2, r3
 800387e:	23c0      	movs	r3, #192	; 0xc0
 8003880:	029b      	lsls	r3, r3, #10
 8003882:	429a      	cmp	r2, r3
 8003884:	d10c      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003886:	4b41      	ldr	r3, [pc, #260]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a45      	ldr	r2, [pc, #276]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800388c:	4013      	ands	r3, r2
 800388e:	0019      	movs	r1, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	23c0      	movs	r3, #192	; 0xc0
 8003896:	039b      	lsls	r3, r3, #14
 8003898:	401a      	ands	r2, r3
 800389a:	4b3c      	ldr	r3, [pc, #240]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800389c:	430a      	orrs	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	4b3a      	ldr	r3, [pc, #232]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038a2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	23c0      	movs	r3, #192	; 0xc0
 80038aa:	029b      	lsls	r3, r3, #10
 80038ac:	401a      	ands	r2, r3
 80038ae:	4b37      	ldr	r3, [pc, #220]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038b4:	2317      	movs	r3, #23
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d105      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038be:	4b33      	ldr	r3, [pc, #204]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c2:	4b32      	ldr	r3, [pc, #200]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038c4:	4937      	ldr	r1, [pc, #220]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80038c6:	400a      	ands	r2, r1
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2201      	movs	r2, #1
 80038d0:	4013      	ands	r3, r2
 80038d2:	d009      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038d4:	4b2d      	ldr	r3, [pc, #180]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d8:	2203      	movs	r2, #3
 80038da:	4393      	bics	r3, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	4b2a      	ldr	r3, [pc, #168]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038e4:	430a      	orrs	r2, r1
 80038e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2202      	movs	r2, #2
 80038ee:	4013      	ands	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038f2:	4b26      	ldr	r3, [pc, #152]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f6:	220c      	movs	r2, #12
 80038f8:	4393      	bics	r3, r2
 80038fa:	0019      	movs	r1, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	4b22      	ldr	r3, [pc, #136]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003902:	430a      	orrs	r2, r1
 8003904:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2204      	movs	r2, #4
 800390c:	4013      	ands	r3, r2
 800390e:	d009      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003910:	4b1e      	ldr	r3, [pc, #120]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003914:	4a24      	ldr	r2, [pc, #144]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003916:	4013      	ands	r3, r2
 8003918:	0019      	movs	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691a      	ldr	r2, [r3, #16]
 800391e:	4b1b      	ldr	r3, [pc, #108]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003920:	430a      	orrs	r2, r1
 8003922:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2208      	movs	r2, #8
 800392a:	4013      	ands	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800392e:	4b17      	ldr	r3, [pc, #92]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003934:	4013      	ands	r3, r2
 8003936:	0019      	movs	r1, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800393e:	430a      	orrs	r2, r1
 8003940:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4013      	ands	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	4a10      	ldr	r2, [pc, #64]	; (8003994 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003954:	4013      	ands	r3, r2
 8003956:	0019      	movs	r1, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800395e:	430a      	orrs	r2, r1
 8003960:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	4013      	ands	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800396c:	4b07      	ldr	r3, [pc, #28]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800396e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003970:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003972:	4013      	ands	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69da      	ldr	r2, [r3, #28]
 800397a:	4b04      	ldr	r3, [pc, #16]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800397c:	430a      	orrs	r2, r1
 800397e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b006      	add	sp, #24
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	40021000 	.word	0x40021000
 8003990:	40007000 	.word	0x40007000
 8003994:	fffcffff 	.word	0xfffcffff
 8003998:	fff7ffff 	.word	0xfff7ffff
 800399c:	00001388 	.word	0x00001388
 80039a0:	ffcfffff 	.word	0xffcfffff
 80039a4:	efffffff 	.word	0xefffffff
 80039a8:	fffff3ff 	.word	0xfffff3ff
 80039ac:	ffffcfff 	.word	0xffffcfff
 80039b0:	fff3ffff 	.word	0xfff3ffff

080039b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e08e      	b.n	8003ae4 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2221      	movs	r2, #33	; 0x21
 80039ca:	5c9b      	ldrb	r3, [r3, r2]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d107      	bne.n	80039e2 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	2100      	movs	r1, #0
 80039d8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	0018      	movs	r0, r3
 80039de:	f7fd fd55 	bl	800148c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2221      	movs	r2, #33	; 0x21
 80039e6:	2102      	movs	r1, #2
 80039e8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	22ca      	movs	r2, #202	; 0xca
 80039f0:	625a      	str	r2, [r3, #36]	; 0x24
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2253      	movs	r2, #83	; 0x53
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f000 fbb2 	bl	8004166 <RTC_EnterInitMode>
 8003a02:	1e03      	subs	r3, r0, #0
 8003a04:	d009      	beq.n	8003a1a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	22ff      	movs	r2, #255	; 0xff
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2221      	movs	r2, #33	; 0x21
 8003a12:	2104      	movs	r1, #4
 8003a14:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e064      	b.n	8003ae4 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4931      	ldr	r1, [pc, #196]	; (8003aec <HAL_RTC_Init+0x138>)
 8003a26:	400a      	ands	r2, r1
 8003a28:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6899      	ldr	r1, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68d2      	ldr	r2, [r2, #12]
 8003a50:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6919      	ldr	r1, [r3, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	041a      	lsls	r2, r3, #16
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2180      	movs	r1, #128	; 0x80
 8003a72:	438a      	bics	r2, r1
 8003a74:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2103      	movs	r1, #3
 8003a82:	438a      	bics	r2, r1
 8003a84:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69da      	ldr	r2, [r3, #28]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d113      	bne.n	8003ad2 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 fb33 	bl	8004118 <HAL_RTC_WaitForSynchro>
 8003ab2:	1e03      	subs	r3, r0, #0
 8003ab4:	d00d      	beq.n	8003ad2 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	22ff      	movs	r2, #255	; 0xff
 8003abc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2221      	movs	r2, #33	; 0x21
 8003ac2:	2104      	movs	r1, #4
 8003ac4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	2100      	movs	r1, #0
 8003acc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e008      	b.n	8003ae4 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	22ff      	movs	r2, #255	; 0xff
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2221      	movs	r2, #33	; 0x21
 8003ade:	2101      	movs	r1, #1
 8003ae0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
  }
}
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	ff8fffbf 	.word	0xff8fffbf

08003af0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	5c9b      	ldrb	r3, [r3, r2]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_RTC_SetTime+0x1a>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e0ad      	b.n	8003c66 <HAL_RTC_SetTime+0x176>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	2101      	movs	r1, #1
 8003b10:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2221      	movs	r2, #33	; 0x21
 8003b16:	2102      	movs	r1, #2
 8003b18:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d125      	bne.n	8003b6c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2240      	movs	r2, #64	; 0x40
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d102      	bne.n	8003b32 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 fb3f 	bl	80041ba <RTC_ByteToBcd2>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	785b      	ldrb	r3, [r3, #1]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f000 fb38 	bl	80041ba <RTC_ByteToBcd2>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b4e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	789b      	ldrb	r3, [r3, #2]
 8003b54:	0018      	movs	r0, r3
 8003b56:	f000 fb30 	bl	80041ba <RTC_ByteToBcd2>
 8003b5a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003b5c:	0022      	movs	r2, r4
 8003b5e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	78db      	ldrb	r3, [r3, #3]
 8003b64:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e017      	b.n	8003b9c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2240      	movs	r2, #64	; 0x40
 8003b74:	4013      	ands	r3, r2
 8003b76:	d102      	bne.n	8003b7e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b8a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003b90:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	78db      	ldrb	r3, [r3, #3]
 8003b96:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	22ca      	movs	r2, #202	; 0xca
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2253      	movs	r2, #83	; 0x53
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	0018      	movs	r0, r3
 8003bb0:	f000 fad9 	bl	8004166 <RTC_EnterInitMode>
 8003bb4:	1e03      	subs	r3, r0, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	22ff      	movs	r2, #255	; 0xff
 8003bbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2221      	movs	r2, #33	; 0x21
 8003bc4:	2104      	movs	r1, #4
 8003bc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	2100      	movs	r1, #0
 8003bce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e048      	b.n	8003c66 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	4925      	ldr	r1, [pc, #148]	; (8003c70 <HAL_RTC_SetTime+0x180>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4922      	ldr	r1, [pc, #136]	; (8003c74 <HAL_RTC_SetTime+0x184>)
 8003bec:	400a      	ands	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	438a      	bics	r2, r1
 8003c16:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	4013      	ands	r3, r2
 8003c22:	d113      	bne.n	8003c4c <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	0018      	movs	r0, r3
 8003c28:	f000 fa76 	bl	8004118 <HAL_RTC_WaitForSynchro>
 8003c2c:	1e03      	subs	r3, r0, #0
 8003c2e:	d00d      	beq.n	8003c4c <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	22ff      	movs	r2, #255	; 0xff
 8003c36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2221      	movs	r2, #33	; 0x21
 8003c3c:	2104      	movs	r1, #4
 8003c3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2220      	movs	r2, #32
 8003c44:	2100      	movs	r1, #0
 8003c46:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e00c      	b.n	8003c66 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	22ff      	movs	r2, #255	; 0xff
 8003c52:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2221      	movs	r2, #33	; 0x21
 8003c58:	2101      	movs	r1, #1
 8003c5a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	2100      	movs	r1, #0
 8003c62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c64:	2300      	movs	r3, #0
  }
}
 8003c66:	0018      	movs	r0, r3
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b007      	add	sp, #28
 8003c6c:	bd90      	pop	{r4, r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	007f7f7f 	.word	0x007f7f7f
 8003c74:	fffbffff 	.word	0xfffbffff

08003c78 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	5c9b      	ldrb	r3, [r3, r2]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_RTC_SetDate+0x1a>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e099      	b.n	8003dc6 <HAL_RTC_SetDate+0x14e>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2220      	movs	r2, #32
 8003c96:	2101      	movs	r1, #1
 8003c98:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2221      	movs	r2, #33	; 0x21
 8003c9e:	2102      	movs	r1, #2
 8003ca0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10e      	bne.n	8003cc6 <HAL_RTC_SetDate+0x4e>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	785b      	ldrb	r3, [r3, #1]
 8003cac:	001a      	movs	r2, r3
 8003cae:	2310      	movs	r3, #16
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d008      	beq.n	8003cc6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	785b      	ldrb	r3, [r3, #1]
 8003cb8:	2210      	movs	r2, #16
 8003cba:	4393      	bics	r3, r2
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	330a      	adds	r3, #10
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d11c      	bne.n	8003d06 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	78db      	ldrb	r3, [r3, #3]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 fa72 	bl	80041ba <RTC_ByteToBcd2>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	0018      	movs	r0, r3
 8003ce0:	f000 fa6b 	bl	80041ba <RTC_ByteToBcd2>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003ce8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	789b      	ldrb	r3, [r3, #2]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f000 fa63 	bl	80041ba <RTC_ByteToBcd2>
 8003cf4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003cf6:	0022      	movs	r2, r4
 8003cf8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003d00:	4313      	orrs	r3, r2
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e00e      	b.n	8003d24 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	78db      	ldrb	r3, [r3, #3]
 8003d0a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	785b      	ldrb	r3, [r3, #1]
 8003d10:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d12:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003d18:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	22ca      	movs	r2, #202	; 0xca
 8003d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2253      	movs	r2, #83	; 0x53
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 fa15 	bl	8004166 <RTC_EnterInitMode>
 8003d3c:	1e03      	subs	r3, r0, #0
 8003d3e:	d00d      	beq.n	8003d5c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	22ff      	movs	r2, #255	; 0xff
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2221      	movs	r2, #33	; 0x21
 8003d4c:	2104      	movs	r1, #4
 8003d4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	2100      	movs	r1, #0
 8003d56:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e034      	b.n	8003dc6 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	491b      	ldr	r1, [pc, #108]	; (8003dd0 <HAL_RTC_SetDate+0x158>)
 8003d64:	400a      	ands	r2, r1
 8003d66:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	438a      	bics	r2, r1
 8003d76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	4013      	ands	r3, r2
 8003d82:	d113      	bne.n	8003dac <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	0018      	movs	r0, r3
 8003d88:	f000 f9c6 	bl	8004118 <HAL_RTC_WaitForSynchro>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d00d      	beq.n	8003dac <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	22ff      	movs	r2, #255	; 0xff
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2221      	movs	r2, #33	; 0x21
 8003d9c:	2104      	movs	r1, #4
 8003d9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e00c      	b.n	8003dc6 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	22ff      	movs	r2, #255	; 0xff
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2221      	movs	r2, #33	; 0x21
 8003db8:	2101      	movs	r1, #1
 8003dba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
  }
}
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b007      	add	sp, #28
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	00ffff3f 	.word	0x00ffff3f

08003dd4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b089      	sub	sp, #36	; 0x24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	5c9b      	ldrb	r3, [r3, r2]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_RTC_SetAlarm_IT+0x1a>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e130      	b.n	8004050 <HAL_RTC_SetAlarm_IT+0x27c>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	2101      	movs	r1, #1
 8003df4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2221      	movs	r2, #33	; 0x21
 8003dfa:	2102      	movs	r1, #2
 8003dfc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d136      	bne.n	8003e72 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d102      	bne.n	8003e16 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2200      	movs	r2, #0
 8003e14:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 f9cd 	bl	80041ba <RTC_ByteToBcd2>
 8003e20:	0003      	movs	r3, r0
 8003e22:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f000 f9c6 	bl	80041ba <RTC_ByteToBcd2>
 8003e2e:	0003      	movs	r3, r0
 8003e30:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e32:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	789b      	ldrb	r3, [r3, #2]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 f9be 	bl	80041ba <RTC_ByteToBcd2>
 8003e3e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003e40:	0022      	movs	r2, r4
 8003e42:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	78db      	ldrb	r3, [r3, #3]
 8003e48:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2220      	movs	r2, #32
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	0018      	movs	r0, r3
 8003e56:	f000 f9b0 	bl	80041ba <RTC_ByteToBcd2>
 8003e5a:	0003      	movs	r3, r0
 8003e5c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e5e:	0022      	movs	r2, r4
 8003e60:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003e66:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	e022      	b.n	8003eb8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	2240      	movs	r2, #64	; 0x40
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d102      	bne.n	8003e84 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2200      	movs	r2, #0
 8003e82:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003e90:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003e96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	78db      	ldrb	r3, [r3, #3]
 8003e9c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003e9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2120      	movs	r1, #32
 8003ea4:	5c5b      	ldrb	r3, [r3, r1]
 8003ea6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003ea8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003eae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	22ca      	movs	r2, #202	; 0xca
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2253      	movs	r2, #83	; 0x53
 8003ed2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d14e      	bne.n	8003f7e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	495b      	ldr	r1, [pc, #364]	; (8004058 <HAL_RTC_SetAlarm_IT+0x284>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	22ff      	movs	r2, #255	; 0xff
 8003ef8:	401a      	ands	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4957      	ldr	r1, [pc, #348]	; (800405c <HAL_RTC_SetAlarm_IT+0x288>)
 8003f00:	430a      	orrs	r2, r1
 8003f02:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f04:	f7fd fd0a 	bl	800191c <HAL_GetTick>
 8003f08:	0003      	movs	r3, r0
 8003f0a:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003f0c:	e016      	b.n	8003f3c <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f0e:	f7fd fd05 	bl	800191c <HAL_GetTick>
 8003f12:	0002      	movs	r2, r0
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	1ad2      	subs	r2, r2, r3
 8003f18:	23fa      	movs	r3, #250	; 0xfa
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d90d      	bls.n	8003f3c <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	22ff      	movs	r2, #255	; 0xff
 8003f26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2221      	movs	r2, #33	; 0x21
 8003f2c:	2103      	movs	r1, #3
 8003f2e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	2100      	movs	r1, #0
 8003f36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e089      	b.n	8004050 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	2201      	movs	r2, #1
 8003f44:	4013      	ands	r3, r2
 8003f46:	d0e2      	beq.n	8003f0e <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2180      	movs	r1, #128	; 0x80
 8003f64:	0049      	lsls	r1, r1, #1
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2180      	movs	r1, #128	; 0x80
 8003f76:	0149      	lsls	r1, r1, #5
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]
 8003f7c:	e04d      	b.n	800401a <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4935      	ldr	r1, [pc, #212]	; (8004060 <HAL_RTC_SetAlarm_IT+0x28c>)
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	22ff      	movs	r2, #255	; 0xff
 8003f96:	401a      	ands	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4931      	ldr	r1, [pc, #196]	; (8004064 <HAL_RTC_SetAlarm_IT+0x290>)
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003fa2:	f7fd fcbb 	bl	800191c <HAL_GetTick>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003faa:	e016      	b.n	8003fda <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fac:	f7fd fcb6 	bl	800191c <HAL_GetTick>
 8003fb0:	0002      	movs	r2, r0
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	1ad2      	subs	r2, r2, r3
 8003fb6:	23fa      	movs	r3, #250	; 0xfa
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d90d      	bls.n	8003fda <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	22ff      	movs	r2, #255	; 0xff
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2221      	movs	r2, #33	; 0x21
 8003fca:	2103      	movs	r1, #3
 8003fcc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e03a      	b.n	8004050 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	d0e2      	beq.n	8003fac <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69fa      	ldr	r2, [r7, #28]
 8003fec:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2180      	movs	r1, #128	; 0x80
 8004002:	0089      	lsls	r1, r1, #2
 8004004:	430a      	orrs	r2, r1
 8004006:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	0189      	lsls	r1, r1, #6
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800401a:	4b13      	ldr	r3, [pc, #76]	; (8004068 <HAL_RTC_SetAlarm_IT+0x294>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b12      	ldr	r3, [pc, #72]	; (8004068 <HAL_RTC_SetAlarm_IT+0x294>)
 8004020:	2180      	movs	r1, #128	; 0x80
 8004022:	0289      	lsls	r1, r1, #10
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004028:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_RTC_SetAlarm_IT+0x294>)
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <HAL_RTC_SetAlarm_IT+0x294>)
 800402e:	2180      	movs	r1, #128	; 0x80
 8004030:	0289      	lsls	r1, r1, #10
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	22ff      	movs	r2, #255	; 0xff
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2221      	movs	r2, #33	; 0x21
 8004042:	2101      	movs	r1, #1
 8004044:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	2100      	movs	r1, #0
 800404c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	0018      	movs	r0, r3
 8004052:	46bd      	mov	sp, r7
 8004054:	b009      	add	sp, #36	; 0x24
 8004056:	bd90      	pop	{r4, r7, pc}
 8004058:	fffffeff 	.word	0xfffffeff
 800405c:	fffffe7f 	.word	0xfffffe7f
 8004060:	fffffdff 	.word	0xfffffdff
 8004064:	fffffd7f 	.word	0xfffffd7f
 8004068:	40010400 	.word	0x40010400

0800406c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	015b      	lsls	r3, r3, #5
 800407e:	4013      	ands	r3, r2
 8004080:	d014      	beq.n	80040ac <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4013      	ands	r3, r2
 800408e:	d00d      	beq.n	80040ac <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	0018      	movs	r0, r3
 8004094:	f000 f838 	bl	8004108 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	22ff      	movs	r2, #255	; 0xff
 80040a0:	401a      	ands	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4915      	ldr	r1, [pc, #84]	; (80040fc <HAL_RTC_AlarmIRQHandler+0x90>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	689a      	ldr	r2, [r3, #8]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	019b      	lsls	r3, r3, #6
 80040b6:	4013      	ands	r3, r2
 80040b8:	d014      	beq.n	80040e4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4013      	ands	r3, r2
 80040c6:	d00d      	beq.n	80040e4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	0018      	movs	r0, r3
 80040cc:	f000 f89d 	bl	800420a <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	22ff      	movs	r2, #255	; 0xff
 80040d8:	401a      	ands	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4908      	ldr	r1, [pc, #32]	; (8004100 <HAL_RTC_AlarmIRQHandler+0x94>)
 80040e0:	430a      	orrs	r2, r1
 80040e2:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <HAL_RTC_AlarmIRQHandler+0x98>)
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	0292      	lsls	r2, r2, #10
 80040ea:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2221      	movs	r2, #33	; 0x21
 80040f0:	2101      	movs	r1, #1
 80040f2:	5499      	strb	r1, [r3, r2]
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b002      	add	sp, #8
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	fffffe7f 	.word	0xfffffe7f
 8004100:	fffffd7f 	.word	0xfffffd7f
 8004104:	40010400 	.word	0x40010400

08004108 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b002      	add	sp, #8
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	21a0      	movs	r1, #160	; 0xa0
 800412c:	438a      	bics	r2, r1
 800412e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004130:	f7fd fbf4 	bl	800191c <HAL_GetTick>
 8004134:	0003      	movs	r3, r0
 8004136:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004138:	e00a      	b.n	8004150 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800413a:	f7fd fbef 	bl	800191c <HAL_GetTick>
 800413e:	0002      	movs	r2, r0
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1ad2      	subs	r2, r2, r3
 8004144:	23fa      	movs	r3, #250	; 0xfa
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d901      	bls.n	8004150 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e006      	b.n	800415e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	4013      	ands	r3, r2
 800415a:	d0ee      	beq.n	800413a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	0018      	movs	r0, r3
 8004160:	46bd      	mov	sp, r7
 8004162:	b004      	add	sp, #16
 8004164:	bd80      	pop	{r7, pc}

08004166 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2240      	movs	r2, #64	; 0x40
 8004176:	4013      	ands	r3, r2
 8004178:	d11a      	bne.n	80041b0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2201      	movs	r2, #1
 8004180:	4252      	negs	r2, r2
 8004182:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004184:	f7fd fbca 	bl	800191c <HAL_GetTick>
 8004188:	0003      	movs	r3, r0
 800418a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800418c:	e00a      	b.n	80041a4 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800418e:	f7fd fbc5 	bl	800191c <HAL_GetTick>
 8004192:	0002      	movs	r2, r0
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1ad2      	subs	r2, r2, r3
 8004198:	23fa      	movs	r3, #250	; 0xfa
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	429a      	cmp	r2, r3
 800419e:	d901      	bls.n	80041a4 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e006      	b.n	80041b2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2240      	movs	r2, #64	; 0x40
 80041ac:	4013      	ands	r3, r2
 80041ae:	d0ee      	beq.n	800418e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	0018      	movs	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b004      	add	sp, #16
 80041b8:	bd80      	pop	{r7, pc}

080041ba <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	0002      	movs	r2, r0
 80041c2:	1dfb      	adds	r3, r7, #7
 80041c4:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80041ca:	230b      	movs	r3, #11
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	1dfa      	adds	r2, r7, #7
 80041d0:	7812      	ldrb	r2, [r2, #0]
 80041d2:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80041d4:	e008      	b.n	80041e8 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3301      	adds	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80041dc:	220b      	movs	r2, #11
 80041de:	18bb      	adds	r3, r7, r2
 80041e0:	18ba      	adds	r2, r7, r2
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	3a0a      	subs	r2, #10
 80041e6:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80041e8:	210b      	movs	r1, #11
 80041ea:	187b      	adds	r3, r7, r1
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b09      	cmp	r3, #9
 80041f0:	d8f1      	bhi.n	80041d6 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	187b      	adds	r3, r7, r1
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	b2db      	uxtb	r3, r3
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	b004      	add	sp, #16
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	b002      	add	sp, #8
 8004218:	bd80      	pop	{r7, pc}
	...

0800421c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e083      	b.n	8004336 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	2382      	movs	r3, #130	; 0x82
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	429a      	cmp	r2, r3
 8004240:	d009      	beq.n	8004256 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	61da      	str	r2, [r3, #28]
 8004248:	e005      	b.n	8004256 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2251      	movs	r2, #81	; 0x51
 8004260:	5c9b      	ldrb	r3, [r3, r2]
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d107      	bne.n	8004278 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2250      	movs	r2, #80	; 0x50
 800426c:	2100      	movs	r1, #0
 800426e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	0018      	movs	r0, r3
 8004274:	f7fd f92a 	bl	80014cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2251      	movs	r2, #81	; 0x51
 800427c:	2102      	movs	r1, #2
 800427e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	438a      	bics	r2, r1
 800428e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	2382      	movs	r3, #130	; 0x82
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	401a      	ands	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6899      	ldr	r1, [r3, #8]
 800429e:	2384      	movs	r3, #132	; 0x84
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	400b      	ands	r3, r1
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	68d9      	ldr	r1, [r3, #12]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	400b      	ands	r3, r1
 80042b0:	431a      	orrs	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2102      	movs	r1, #2
 80042b8:	400b      	ands	r3, r1
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	2101      	movs	r1, #1
 80042c2:	400b      	ands	r3, r1
 80042c4:	431a      	orrs	r2, r3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6999      	ldr	r1, [r3, #24]
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	400b      	ands	r3, r1
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	2138      	movs	r1, #56	; 0x38
 80042d8:	400b      	ands	r3, r1
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	2180      	movs	r1, #128	; 0x80
 80042e2:	400b      	ands	r3, r1
 80042e4:	431a      	orrs	r2, r3
 80042e6:	0011      	movs	r1, r2
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ec:	2380      	movs	r3, #128	; 0x80
 80042ee:	019b      	lsls	r3, r3, #6
 80042f0:	401a      	ands	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	0c1b      	lsrs	r3, r3, #16
 8004300:	2204      	movs	r2, #4
 8004302:	4013      	ands	r3, r2
 8004304:	0019      	movs	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430a:	2210      	movs	r2, #16
 800430c:	401a      	ands	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69da      	ldr	r2, [r3, #28]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4907      	ldr	r1, [pc, #28]	; (8004340 <HAL_SPI_Init+0x124>)
 8004322:	400a      	ands	r2, r1
 8004324:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2251      	movs	r2, #81	; 0x51
 8004330:	2101      	movs	r1, #1
 8004332:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	0018      	movs	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	b002      	add	sp, #8
 800433c:	bd80      	pop	{r7, pc}
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	fffff7ff 	.word	0xfffff7ff

08004344 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e01b      	b.n	800438e <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2251      	movs	r2, #81	; 0x51
 800435a:	2102      	movs	r1, #2
 800435c:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2140      	movs	r1, #64	; 0x40
 800436a:	438a      	bics	r2, r1
 800436c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	0018      	movs	r0, r3
 8004372:	f7fd f94f 	bl	8001614 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2251      	movs	r2, #81	; 0x51
 8004380:	2100      	movs	r1, #0
 8004382:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2250      	movs	r2, #80	; 0x50
 8004388:	2100      	movs	r1, #0
 800438a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	0018      	movs	r0, r3
 8004390:	46bd      	mov	sp, r7
 8004392:	b002      	add	sp, #8
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b088      	sub	sp, #32
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043a6:	231f      	movs	r3, #31
 80043a8:	18fb      	adds	r3, r7, r3
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2250      	movs	r2, #80	; 0x50
 80043b2:	5c9b      	ldrb	r3, [r3, r2]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_SPI_Transmit+0x26>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e13e      	b.n	800463a <HAL_SPI_Transmit+0x2a4>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2250      	movs	r2, #80	; 0x50
 80043c0:	2101      	movs	r1, #1
 80043c2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043c4:	f7fd faaa 	bl	800191c <HAL_GetTick>
 80043c8:	0003      	movs	r3, r0
 80043ca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80043cc:	2316      	movs	r3, #22
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	1dba      	adds	r2, r7, #6
 80043d2:	8812      	ldrh	r2, [r2, #0]
 80043d4:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2251      	movs	r2, #81	; 0x51
 80043da:	5c9b      	ldrb	r3, [r3, r2]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d004      	beq.n	80043ec <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80043e2:	231f      	movs	r3, #31
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	2202      	movs	r2, #2
 80043e8:	701a      	strb	r2, [r3, #0]
    goto error;
 80043ea:	e11b      	b.n	8004624 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <HAL_SPI_Transmit+0x64>
 80043f2:	1dbb      	adds	r3, r7, #6
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d104      	bne.n	8004404 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80043fa:	231f      	movs	r3, #31
 80043fc:	18fb      	adds	r3, r7, r3
 80043fe:	2201      	movs	r2, #1
 8004400:	701a      	strb	r2, [r3, #0]
    goto error;
 8004402:	e10f      	b.n	8004624 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2251      	movs	r2, #81	; 0x51
 8004408:	2103      	movs	r1, #3
 800440a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1dba      	adds	r2, r7, #6
 800441c:	8812      	ldrh	r2, [r2, #0]
 800441e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	1dba      	adds	r2, r7, #6
 8004424:	8812      	ldrh	r2, [r2, #0]
 8004426:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	429a      	cmp	r2, r3
 8004450:	d110      	bne.n	8004474 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2140      	movs	r1, #64	; 0x40
 800445e:	438a      	bics	r2, r1
 8004460:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	01c9      	lsls	r1, r1, #7
 8004470:	430a      	orrs	r2, r1
 8004472:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2240      	movs	r2, #64	; 0x40
 800447c:	4013      	ands	r3, r2
 800447e:	2b40      	cmp	r3, #64	; 0x40
 8004480:	d007      	beq.n	8004492 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2140      	movs	r1, #64	; 0x40
 800448e:	430a      	orrs	r2, r1
 8004490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	429a      	cmp	r2, r3
 800449c:	d14e      	bne.n	800453c <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d004      	beq.n	80044b0 <HAL_SPI_Transmit+0x11a>
 80044a6:	2316      	movs	r3, #22
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d13f      	bne.n	8004530 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	881a      	ldrh	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c0:	1c9a      	adds	r2, r3, #2
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044d4:	e02c      	b.n	8004530 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2202      	movs	r2, #2
 80044de:	4013      	ands	r3, r2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d112      	bne.n	800450a <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	881a      	ldrh	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	1c9a      	adds	r2, r3, #2
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	86da      	strh	r2, [r3, #54]	; 0x36
 8004508:	e012      	b.n	8004530 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800450a:	f7fd fa07 	bl	800191c <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d802      	bhi.n	8004520 <HAL_SPI_Transmit+0x18a>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	d102      	bne.n	8004526 <HAL_SPI_Transmit+0x190>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8004526:	231f      	movs	r3, #31
 8004528:	18fb      	adds	r3, r7, r3
 800452a:	2203      	movs	r2, #3
 800452c:	701a      	strb	r2, [r3, #0]
          goto error;
 800452e:	e079      	b.n	8004624 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1cd      	bne.n	80044d6 <HAL_SPI_Transmit+0x140>
 800453a:	e04f      	b.n	80045dc <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d004      	beq.n	800454e <HAL_SPI_Transmit+0x1b8>
 8004544:	2316      	movs	r3, #22
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	881b      	ldrh	r3, [r3, #0]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d141      	bne.n	80045d2 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	7812      	ldrb	r2, [r2, #0]
 800455a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004574:	e02d      	b.n	80045d2 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2202      	movs	r2, #2
 800457e:	4013      	ands	r3, r2
 8004580:	2b02      	cmp	r3, #2
 8004582:	d113      	bne.n	80045ac <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	7812      	ldrb	r2, [r2, #0]
 8004590:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80045aa:	e012      	b.n	80045d2 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ac:	f7fd f9b6 	bl	800191c <HAL_GetTick>
 80045b0:	0002      	movs	r2, r0
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d802      	bhi.n	80045c2 <HAL_SPI_Transmit+0x22c>
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	3301      	adds	r3, #1
 80045c0:	d102      	bne.n	80045c8 <HAL_SPI_Transmit+0x232>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80045c8:	231f      	movs	r3, #31
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	2203      	movs	r2, #3
 80045ce:	701a      	strb	r2, [r3, #0]
          goto error;
 80045d0:	e028      	b.n	8004624 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1cc      	bne.n	8004576 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	6839      	ldr	r1, [r7, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 fc08 	bl	8004df8 <SPI_EndRxTxTransaction>
 80045e8:	1e03      	subs	r3, r0, #0
 80045ea:	d002      	beq.n	80045f2 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2220      	movs	r2, #32
 80045f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10a      	bne.n	8004610 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8004618:	231f      	movs	r3, #31
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	e000      	b.n	8004624 <HAL_SPI_Transmit+0x28e>
  }

error:
 8004622:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2251      	movs	r2, #81	; 0x51
 8004628:	2101      	movs	r1, #1
 800462a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2250      	movs	r2, #80	; 0x50
 8004630:	2100      	movs	r1, #0
 8004632:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004634:	231f      	movs	r3, #31
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	781b      	ldrb	r3, [r3, #0]
}
 800463a:	0018      	movs	r0, r3
 800463c:	46bd      	mov	sp, r7
 800463e:	b008      	add	sp, #32
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b089      	sub	sp, #36	; 0x24
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	1dbb      	adds	r3, r7, #6
 8004652:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004654:	2317      	movs	r3, #23
 8004656:	18fb      	adds	r3, r7, r3
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	2382      	movs	r3, #130	; 0x82
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	429a      	cmp	r2, r3
 8004666:	d113      	bne.n	8004690 <HAL_SPI_Receive+0x4c>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10f      	bne.n	8004690 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2251      	movs	r2, #81	; 0x51
 8004674:	2104      	movs	r1, #4
 8004676:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004678:	1dbb      	adds	r3, r7, #6
 800467a:	881c      	ldrh	r4, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	68b9      	ldr	r1, [r7, #8]
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	0023      	movs	r3, r4
 8004688:	f000 f902 	bl	8004890 <HAL_SPI_TransmitReceive>
 800468c:	0003      	movs	r3, r0
 800468e:	e0f9      	b.n	8004884 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2250      	movs	r2, #80	; 0x50
 8004694:	5c9b      	ldrb	r3, [r3, r2]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_SPI_Receive+0x5a>
 800469a:	2302      	movs	r3, #2
 800469c:	e0f2      	b.n	8004884 <HAL_SPI_Receive+0x240>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2250      	movs	r2, #80	; 0x50
 80046a2:	2101      	movs	r1, #1
 80046a4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a6:	f7fd f939 	bl	800191c <HAL_GetTick>
 80046aa:	0003      	movs	r3, r0
 80046ac:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2251      	movs	r2, #81	; 0x51
 80046b2:	5c9b      	ldrb	r3, [r3, r2]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d004      	beq.n	80046c4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80046ba:	2317      	movs	r3, #23
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	2202      	movs	r2, #2
 80046c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80046c2:	e0d4      	b.n	800486e <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d003      	beq.n	80046d2 <HAL_SPI_Receive+0x8e>
 80046ca:	1dbb      	adds	r3, r7, #6
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d104      	bne.n	80046dc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80046d2:	2317      	movs	r3, #23
 80046d4:	18fb      	adds	r3, r7, r3
 80046d6:	2201      	movs	r2, #1
 80046d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80046da:	e0c8      	b.n	800486e <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2251      	movs	r2, #81	; 0x51
 80046e0:	2104      	movs	r1, #4
 80046e2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	1dba      	adds	r2, r7, #6
 80046f4:	8812      	ldrh	r2, [r2, #0]
 80046f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1dba      	adds	r2, r7, #6
 80046fc:	8812      	ldrh	r2, [r2, #0]
 80046fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	429a      	cmp	r2, r3
 8004728:	d10f      	bne.n	800474a <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	438a      	bics	r2, r1
 8004738:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4951      	ldr	r1, [pc, #324]	; (800488c <HAL_SPI_Receive+0x248>)
 8004746:	400a      	ands	r2, r1
 8004748:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2240      	movs	r2, #64	; 0x40
 8004752:	4013      	ands	r3, r2
 8004754:	2b40      	cmp	r3, #64	; 0x40
 8004756:	d007      	beq.n	8004768 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2140      	movs	r1, #64	; 0x40
 8004764:	430a      	orrs	r2, r1
 8004766:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d164      	bne.n	800483a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004770:	e02f      	b.n	80047d2 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2201      	movs	r2, #1
 800477a:	4013      	ands	r3, r2
 800477c:	2b01      	cmp	r3, #1
 800477e:	d115      	bne.n	80047ac <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	001a      	movs	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	7812      	ldrb	r2, [r2, #0]
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047aa:	e012      	b.n	80047d2 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ac:	f7fd f8b6 	bl	800191c <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d802      	bhi.n	80047c2 <HAL_SPI_Receive+0x17e>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	3301      	adds	r3, #1
 80047c0:	d102      	bne.n	80047c8 <HAL_SPI_Receive+0x184>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80047c8:	2317      	movs	r3, #23
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2203      	movs	r2, #3
 80047ce:	701a      	strb	r2, [r3, #0]
          goto error;
 80047d0:	e04d      	b.n	800486e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ca      	bne.n	8004772 <HAL_SPI_Receive+0x12e>
 80047dc:	e032      	b.n	8004844 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2201      	movs	r2, #1
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d113      	bne.n	8004814 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	b292      	uxth	r2, r2
 80047f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	1c9a      	adds	r2, r3, #2
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004812:	e012      	b.n	800483a <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004814:	f7fd f882 	bl	800191c <HAL_GetTick>
 8004818:	0002      	movs	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	429a      	cmp	r2, r3
 8004822:	d802      	bhi.n	800482a <HAL_SPI_Receive+0x1e6>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	3301      	adds	r3, #1
 8004828:	d102      	bne.n	8004830 <HAL_SPI_Receive+0x1ec>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8004830:	2317      	movs	r3, #23
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	2203      	movs	r2, #3
 8004836:	701a      	strb	r2, [r3, #0]
          goto error;
 8004838:	e019      	b.n	800486e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1cc      	bne.n	80047de <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	0018      	movs	r0, r3
 800484c:	f000 fa6a 	bl	8004d24 <SPI_EndRxTransaction>
 8004850:	1e03      	subs	r3, r0, #0
 8004852:	d002      	beq.n	800485a <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	2b00      	cmp	r3, #0
 8004860:	d004      	beq.n	800486c <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8004862:	2317      	movs	r3, #23
 8004864:	18fb      	adds	r3, r7, r3
 8004866:	2201      	movs	r2, #1
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e000      	b.n	800486e <HAL_SPI_Receive+0x22a>
  }

error :
 800486c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2251      	movs	r2, #81	; 0x51
 8004872:	2101      	movs	r1, #1
 8004874:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2250      	movs	r2, #80	; 0x50
 800487a:	2100      	movs	r1, #0
 800487c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800487e:	2317      	movs	r3, #23
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	781b      	ldrb	r3, [r3, #0]
}
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	b007      	add	sp, #28
 800488a:	bd90      	pop	{r4, r7, pc}
 800488c:	ffffbfff 	.word	0xffffbfff

08004890 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08c      	sub	sp, #48	; 0x30
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	001a      	movs	r2, r3
 800489e:	1cbb      	adds	r3, r7, #2
 80048a0:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048a2:	2301      	movs	r3, #1
 80048a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048a6:	232b      	movs	r3, #43	; 0x2b
 80048a8:	18fb      	adds	r3, r7, r3
 80048aa:	2200      	movs	r2, #0
 80048ac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2250      	movs	r2, #80	; 0x50
 80048b2:	5c9b      	ldrb	r3, [r3, r2]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_SPI_TransmitReceive+0x2c>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e1a0      	b.n	8004bfe <HAL_SPI_TransmitReceive+0x36e>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2250      	movs	r2, #80	; 0x50
 80048c0:	2101      	movs	r1, #1
 80048c2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048c4:	f7fd f82a 	bl	800191c <HAL_GetTick>
 80048c8:	0003      	movs	r3, r0
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048cc:	2023      	movs	r0, #35	; 0x23
 80048ce:	183b      	adds	r3, r7, r0
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	2151      	movs	r1, #81	; 0x51
 80048d4:	5c52      	ldrb	r2, [r2, r1]
 80048d6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80048de:	231a      	movs	r3, #26
 80048e0:	18fb      	adds	r3, r7, r3
 80048e2:	1cba      	adds	r2, r7, #2
 80048e4:	8812      	ldrh	r2, [r2, #0]
 80048e6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048e8:	183b      	adds	r3, r7, r0
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d011      	beq.n	8004914 <HAL_SPI_TransmitReceive+0x84>
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	2382      	movs	r3, #130	; 0x82
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d107      	bne.n	800490a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d103      	bne.n	800490a <HAL_SPI_TransmitReceive+0x7a>
 8004902:	183b      	adds	r3, r7, r0
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b04      	cmp	r3, #4
 8004908:	d004      	beq.n	8004914 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800490a:	232b      	movs	r3, #43	; 0x2b
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	2202      	movs	r2, #2
 8004910:	701a      	strb	r2, [r3, #0]
    goto error;
 8004912:	e169      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d006      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x98>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_SPI_TransmitReceive+0x98>
 8004920:	1cbb      	adds	r3, r7, #2
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004928:	232b      	movs	r3, #43	; 0x2b
 800492a:	18fb      	adds	r3, r7, r3
 800492c:	2201      	movs	r2, #1
 800492e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004930:	e15a      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2251      	movs	r2, #81	; 0x51
 8004936:	5c9b      	ldrb	r3, [r3, r2]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b04      	cmp	r3, #4
 800493c:	d003      	beq.n	8004946 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2251      	movs	r2, #81	; 0x51
 8004942:	2105      	movs	r1, #5
 8004944:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1cba      	adds	r2, r7, #2
 8004956:	8812      	ldrh	r2, [r2, #0]
 8004958:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1cba      	adds	r2, r7, #2
 800495e:	8812      	ldrh	r2, [r2, #0]
 8004960:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1cba      	adds	r2, r7, #2
 800496c:	8812      	ldrh	r2, [r2, #0]
 800496e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	1cba      	adds	r2, r7, #2
 8004974:	8812      	ldrh	r2, [r2, #0]
 8004976:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2240      	movs	r2, #64	; 0x40
 800498c:	4013      	ands	r3, r2
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d007      	beq.n	80049a2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2140      	movs	r1, #64	; 0x40
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d000      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x120>
 80049ae:	e07a      	b.n	8004aa6 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <HAL_SPI_TransmitReceive+0x132>
 80049b8:	231a      	movs	r3, #26
 80049ba:	18fb      	adds	r3, r7, r3
 80049bc:	881b      	ldrh	r3, [r3, #0]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d166      	bne.n	8004a90 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	881a      	ldrh	r2, [r3, #0]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	1c9a      	adds	r2, r3, #2
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e6:	e053      	b.n	8004a90 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2202      	movs	r2, #2
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d11b      	bne.n	8004a2e <HAL_SPI_TransmitReceive+0x19e>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d016      	beq.n	8004a2e <HAL_SPI_TransmitReceive+0x19e>
 8004a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d113      	bne.n	8004a2e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0a:	881a      	ldrh	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	1c9a      	adds	r2, r3, #2
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2201      	movs	r2, #1
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d119      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x1e0>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d014      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	b292      	uxth	r2, r2
 8004a52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	1c9a      	adds	r2, r3, #2
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a70:	f7fc ff54 	bl	800191c <HAL_GetTick>
 8004a74:	0002      	movs	r2, r0
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d807      	bhi.n	8004a90 <HAL_SPI_TransmitReceive+0x200>
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	3301      	adds	r3, #1
 8004a84:	d004      	beq.n	8004a90 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8004a86:	232b      	movs	r3, #43	; 0x2b
 8004a88:	18fb      	adds	r3, r7, r3
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	701a      	strb	r2, [r3, #0]
        goto error;
 8004a8e:	e0ab      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1a6      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x158>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1a1      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x158>
 8004aa4:	e07f      	b.n	8004ba6 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <HAL_SPI_TransmitReceive+0x22a>
 8004aae:	231a      	movs	r3, #26
 8004ab0:	18fb      	adds	r3, r7, r3
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d000      	beq.n	8004aba <HAL_SPI_TransmitReceive+0x22a>
 8004ab8:	e06b      	b.n	8004b92 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ae0:	e057      	b.n	8004b92 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d11c      	bne.n	8004b2a <HAL_SPI_TransmitReceive+0x29a>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d017      	beq.n	8004b2a <HAL_SPI_TransmitReceive+0x29a>
 8004afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d114      	bne.n	8004b2a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	7812      	ldrb	r2, [r2, #0]
 8004b0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2201      	movs	r2, #1
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d119      	bne.n	8004b6c <HAL_SPI_TransmitReceive+0x2dc>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d014      	beq.n	8004b6c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4c:	b2d2      	uxtb	r2, r2
 8004b4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	1c5a      	adds	r2, r3, #1
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b6c:	f7fc fed6 	bl	800191c <HAL_GetTick>
 8004b70:	0002      	movs	r2, r0
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d802      	bhi.n	8004b82 <HAL_SPI_TransmitReceive+0x2f2>
 8004b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b7e:	3301      	adds	r3, #1
 8004b80:	d102      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x2f8>
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8004b88:	232b      	movs	r3, #43	; 0x2b
 8004b8a:	18fb      	adds	r3, r7, r3
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	701a      	strb	r2, [r3, #0]
        goto error;
 8004b90:	e02a      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1a2      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x252>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d19d      	bne.n	8004ae2 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0018      	movs	r0, r3
 8004bae:	f000 f923 	bl	8004df8 <SPI_EndRxTxTransaction>
 8004bb2:	1e03      	subs	r3, r0, #0
 8004bb4:	d007      	beq.n	8004bc6 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8004bb6:	232b      	movs	r3, #43	; 0x2b
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004bc4:	e010      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	617b      	str	r3, [r7, #20]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	e000      	b.n	8004be8 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8004be6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2251      	movs	r2, #81	; 0x51
 8004bec:	2101      	movs	r1, #1
 8004bee:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2250      	movs	r2, #80	; 0x50
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004bf8:	232b      	movs	r3, #43	; 0x2b
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	781b      	ldrb	r3, [r3, #0]
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b00c      	add	sp, #48	; 0x30
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b088      	sub	sp, #32
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	1dfb      	adds	r3, r7, #7
 8004c16:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c18:	f7fc fe80 	bl	800191c <HAL_GetTick>
 8004c1c:	0002      	movs	r2, r0
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	1a9b      	subs	r3, r3, r2
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	18d3      	adds	r3, r2, r3
 8004c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c28:	f7fc fe78 	bl	800191c <HAL_GetTick>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c30:	4b3a      	ldr	r3, [pc, #232]	; (8004d1c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	015b      	lsls	r3, r3, #5
 8004c36:	0d1b      	lsrs	r3, r3, #20
 8004c38:	69fa      	ldr	r2, [r7, #28]
 8004c3a:	4353      	muls	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c3e:	e058      	b.n	8004cf2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	d055      	beq.n	8004cf2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c46:	f7fc fe69 	bl	800191c <HAL_GetTick>
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	69fa      	ldr	r2, [r7, #28]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d902      	bls.n	8004c5c <SPI_WaitFlagStateUntilTimeout+0x54>
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d142      	bne.n	8004ce2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	21e0      	movs	r1, #224	; 0xe0
 8004c68:	438a      	bics	r2, r1
 8004c6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	2382      	movs	r3, #130	; 0x82
 8004c72:	005b      	lsls	r3, r3, #1
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d113      	bne.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d005      	beq.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	2380      	movs	r3, #128	; 0x80
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d107      	bne.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2140      	movs	r1, #64	; 0x40
 8004c9c:	438a      	bics	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	019b      	lsls	r3, r3, #6
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d110      	bne.n	8004cce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	491a      	ldr	r1, [pc, #104]	; (8004d20 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004cb8:	400a      	ands	r2, r1
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2180      	movs	r1, #128	; 0x80
 8004cc8:	0189      	lsls	r1, r1, #6
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2251      	movs	r2, #81	; 0x51
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2250      	movs	r2, #80	; 0x50
 8004cda:	2100      	movs	r1, #0
 8004cdc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e017      	b.n	8004d12 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	425a      	negs	r2, r3
 8004d02:	4153      	adcs	r3, r2
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	001a      	movs	r2, r3
 8004d08:	1dfb      	adds	r3, r7, #7
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d197      	bne.n	8004c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b008      	add	sp, #32
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	46c0      	nop			; (mov r8, r8)
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	ffffdfff 	.word	0xffffdfff

08004d24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	2382      	movs	r3, #130	; 0x82
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d113      	bne.n	8004d64 <SPI_EndRxTransaction+0x40>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d005      	beq.n	8004d54 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d107      	bne.n	8004d64 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2140      	movs	r1, #64	; 0x40
 8004d60:	438a      	bics	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	2382      	movs	r3, #130	; 0x82
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d12b      	bne.n	8004dc8 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d012      	beq.n	8004da2 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	0013      	movs	r3, r2
 8004d86:	2200      	movs	r2, #0
 8004d88:	2180      	movs	r1, #128	; 0x80
 8004d8a:	f7ff ff3d 	bl	8004c08 <SPI_WaitFlagStateUntilTimeout>
 8004d8e:	1e03      	subs	r3, r0, #0
 8004d90:	d02d      	beq.n	8004dee <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	2220      	movs	r2, #32
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e026      	b.n	8004df0 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	0013      	movs	r3, r2
 8004dac:	2200      	movs	r2, #0
 8004dae:	2101      	movs	r1, #1
 8004db0:	f7ff ff2a 	bl	8004c08 <SPI_WaitFlagStateUntilTimeout>
 8004db4:	1e03      	subs	r3, r0, #0
 8004db6:	d01a      	beq.n	8004dee <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e013      	b.n	8004df0 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	0013      	movs	r3, r2
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	f7ff ff17 	bl	8004c08 <SPI_WaitFlagStateUntilTimeout>
 8004dda:	1e03      	subs	r3, r0, #0
 8004ddc:	d007      	beq.n	8004dee <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	2220      	movs	r2, #32
 8004de4:	431a      	orrs	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e000      	b.n	8004df0 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	0018      	movs	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b004      	add	sp, #16
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af02      	add	r7, sp, #8
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <SPI_EndRxTxTransaction+0x84>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	491d      	ldr	r1, [pc, #116]	; (8004e80 <SPI_EndRxTxTransaction+0x88>)
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	f7fb f986 	bl	800011c <__udivsi3>
 8004e10:	0003      	movs	r3, r0
 8004e12:	001a      	movs	r2, r3
 8004e14:	0013      	movs	r3, r2
 8004e16:	015b      	lsls	r3, r3, #5
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	2382      	movs	r3, #130	; 0x82
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d112      	bne.n	8004e54 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	0013      	movs	r3, r2
 8004e38:	2200      	movs	r2, #0
 8004e3a:	2180      	movs	r1, #128	; 0x80
 8004e3c:	f7ff fee4 	bl	8004c08 <SPI_WaitFlagStateUntilTimeout>
 8004e40:	1e03      	subs	r3, r0, #0
 8004e42:	d016      	beq.n	8004e72 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e48:	2220      	movs	r2, #32
 8004e4a:	431a      	orrs	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e00f      	b.n	8004e74 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2280      	movs	r2, #128	; 0x80
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d0f2      	beq.n	8004e54 <SPI_EndRxTxTransaction+0x5c>
 8004e6e:	e000      	b.n	8004e72 <SPI_EndRxTxTransaction+0x7a>
        break;
 8004e70:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	0018      	movs	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	b006      	add	sp, #24
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	016e3600 	.word	0x016e3600

08004e84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e044      	b.n	8004f20 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d107      	bne.n	8004eae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2274      	movs	r2, #116	; 0x74
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	f7fc fbeb 	bl	8001684 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2224      	movs	r2, #36	; 0x24
 8004eb2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	438a      	bics	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f000 f9c6 	bl	8005258 <UART_SetConfig>
 8004ecc:	0003      	movs	r3, r0
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e024      	b.n	8004f20 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f000 fc59 	bl	8005798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	490d      	ldr	r1, [pc, #52]	; (8004f28 <HAL_UART_Init+0xa4>)
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689a      	ldr	r2, [r3, #8]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	212a      	movs	r1, #42	; 0x2a
 8004f02:	438a      	bics	r2, r1
 8004f04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2101      	movs	r1, #1
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 fcf1 	bl	8005900 <UART_CheckIdleState>
 8004f1e:	0003      	movs	r3, r0
}
 8004f20:	0018      	movs	r0, r3
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b002      	add	sp, #8
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	ffffb7ff 	.word	0xffffb7ff

08004f2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	1dbb      	adds	r3, r7, #6
 8004f3a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d000      	beq.n	8004f46 <HAL_UART_Transmit+0x1a>
 8004f44:	e095      	b.n	8005072 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <HAL_UART_Transmit+0x28>
 8004f4c:	1dbb      	adds	r3, r7, #6
 8004f4e:	881b      	ldrh	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e08d      	b.n	8005074 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	2380      	movs	r3, #128	; 0x80
 8004f5e:	015b      	lsls	r3, r3, #5
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d109      	bne.n	8004f78 <HAL_UART_Transmit+0x4c>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d105      	bne.n	8004f78 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	4013      	ands	r3, r2
 8004f72:	d001      	beq.n	8004f78 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e07d      	b.n	8005074 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2274      	movs	r2, #116	; 0x74
 8004f7c:	5c9b      	ldrb	r3, [r3, r2]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_UART_Transmit+0x5a>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e076      	b.n	8005074 <HAL_UART_Transmit+0x148>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2274      	movs	r2, #116	; 0x74
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2280      	movs	r2, #128	; 0x80
 8004f92:	2100      	movs	r1, #0
 8004f94:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2221      	movs	r2, #33	; 0x21
 8004f9a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f9c:	f7fc fcbe 	bl	800191c <HAL_GetTick>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1dba      	adds	r2, r7, #6
 8004fa8:	2150      	movs	r1, #80	; 0x50
 8004faa:	8812      	ldrh	r2, [r2, #0]
 8004fac:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1dba      	adds	r2, r7, #6
 8004fb2:	2152      	movs	r1, #82	; 0x52
 8004fb4:	8812      	ldrh	r2, [r2, #0]
 8004fb6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	2380      	movs	r3, #128	; 0x80
 8004fbe:	015b      	lsls	r3, r3, #5
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d108      	bne.n	8004fd6 <HAL_UART_Transmit+0xaa>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d104      	bne.n	8004fd6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	61bb      	str	r3, [r7, #24]
 8004fd4:	e003      	b.n	8004fde <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2274      	movs	r2, #116	; 0x74
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004fe6:	e02c      	b.n	8005042 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	0013      	movs	r3, r2
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2180      	movs	r1, #128	; 0x80
 8004ff6:	f000 fccb 	bl	8005990 <UART_WaitOnFlagUntilTimeout>
 8004ffa:	1e03      	subs	r3, r0, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e038      	b.n	8005074 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10b      	bne.n	8005020 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	001a      	movs	r2, r3
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	05d2      	lsls	r2, r2, #23
 8005014:	0dd2      	lsrs	r2, r2, #23
 8005016:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	3302      	adds	r3, #2
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	e007      	b.n	8005030 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	781a      	ldrb	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3301      	adds	r3, #1
 800502e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2252      	movs	r2, #82	; 0x52
 8005034:	5a9b      	ldrh	r3, [r3, r2]
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b299      	uxth	r1, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2252      	movs	r2, #82	; 0x52
 8005040:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2252      	movs	r2, #82	; 0x52
 8005046:	5a9b      	ldrh	r3, [r3, r2]
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1cc      	bne.n	8004fe8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	0013      	movs	r3, r2
 8005058:	2200      	movs	r2, #0
 800505a:	2140      	movs	r1, #64	; 0x40
 800505c:	f000 fc98 	bl	8005990 <UART_WaitOnFlagUntilTimeout>
 8005060:	1e03      	subs	r3, r0, #0
 8005062:	d001      	beq.n	8005068 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e005      	b.n	8005074 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	e000      	b.n	8005074 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005072:	2302      	movs	r3, #2
  }
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	b008      	add	sp, #32
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af02      	add	r7, sp, #8
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	1dbb      	adds	r3, r7, #6
 800508a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005090:	2b20      	cmp	r3, #32
 8005092:	d000      	beq.n	8005096 <HAL_UART_Receive+0x1a>
 8005094:	e0d9      	b.n	800524a <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_UART_Receive+0x28>
 800509c:	1dbb      	adds	r3, r7, #6
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0d1      	b.n	800524c <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	015b      	lsls	r3, r3, #5
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d109      	bne.n	80050c8 <HAL_UART_Receive+0x4c>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d105      	bne.n	80050c8 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2201      	movs	r2, #1
 80050c0:	4013      	ands	r3, r2
 80050c2:	d001      	beq.n	80050c8 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0c1      	b.n	800524c <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2274      	movs	r2, #116	; 0x74
 80050cc:	5c9b      	ldrb	r3, [r3, r2]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_UART_Receive+0x5a>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e0ba      	b.n	800524c <HAL_UART_Receive+0x1d0>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2274      	movs	r2, #116	; 0x74
 80050da:	2101      	movs	r1, #1
 80050dc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2280      	movs	r2, #128	; 0x80
 80050e2:	2100      	movs	r1, #0
 80050e4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2222      	movs	r2, #34	; 0x22
 80050ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050f2:	f7fc fc13 	bl	800191c <HAL_GetTick>
 80050f6:	0003      	movs	r3, r0
 80050f8:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1dba      	adds	r2, r7, #6
 80050fe:	2158      	movs	r1, #88	; 0x58
 8005100:	8812      	ldrh	r2, [r2, #0]
 8005102:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1dba      	adds	r2, r7, #6
 8005108:	215a      	movs	r1, #90	; 0x5a
 800510a:	8812      	ldrh	r2, [r2, #0]
 800510c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	2380      	movs	r3, #128	; 0x80
 8005114:	015b      	lsls	r3, r3, #5
 8005116:	429a      	cmp	r2, r3
 8005118:	d10d      	bne.n	8005136 <HAL_UART_Receive+0xba>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d104      	bne.n	800512c <HAL_UART_Receive+0xb0>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	225c      	movs	r2, #92	; 0x5c
 8005126:	494b      	ldr	r1, [pc, #300]	; (8005254 <HAL_UART_Receive+0x1d8>)
 8005128:	5299      	strh	r1, [r3, r2]
 800512a:	e02e      	b.n	800518a <HAL_UART_Receive+0x10e>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	225c      	movs	r2, #92	; 0x5c
 8005130:	21ff      	movs	r1, #255	; 0xff
 8005132:	5299      	strh	r1, [r3, r2]
 8005134:	e029      	b.n	800518a <HAL_UART_Receive+0x10e>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10d      	bne.n	800515a <HAL_UART_Receive+0xde>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <HAL_UART_Receive+0xd4>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	225c      	movs	r2, #92	; 0x5c
 800514a:	21ff      	movs	r1, #255	; 0xff
 800514c:	5299      	strh	r1, [r3, r2]
 800514e:	e01c      	b.n	800518a <HAL_UART_Receive+0x10e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	225c      	movs	r2, #92	; 0x5c
 8005154:	217f      	movs	r1, #127	; 0x7f
 8005156:	5299      	strh	r1, [r3, r2]
 8005158:	e017      	b.n	800518a <HAL_UART_Receive+0x10e>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689a      	ldr	r2, [r3, #8]
 800515e:	2380      	movs	r3, #128	; 0x80
 8005160:	055b      	lsls	r3, r3, #21
 8005162:	429a      	cmp	r2, r3
 8005164:	d10d      	bne.n	8005182 <HAL_UART_Receive+0x106>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d104      	bne.n	8005178 <HAL_UART_Receive+0xfc>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	225c      	movs	r2, #92	; 0x5c
 8005172:	217f      	movs	r1, #127	; 0x7f
 8005174:	5299      	strh	r1, [r3, r2]
 8005176:	e008      	b.n	800518a <HAL_UART_Receive+0x10e>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	225c      	movs	r2, #92	; 0x5c
 800517c:	213f      	movs	r1, #63	; 0x3f
 800517e:	5299      	strh	r1, [r3, r2]
 8005180:	e003      	b.n	800518a <HAL_UART_Receive+0x10e>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	225c      	movs	r2, #92	; 0x5c
 8005186:	2100      	movs	r1, #0
 8005188:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800518a:	2312      	movs	r3, #18
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	215c      	movs	r1, #92	; 0x5c
 8005192:	5a52      	ldrh	r2, [r2, r1]
 8005194:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	2380      	movs	r3, #128	; 0x80
 800519c:	015b      	lsls	r3, r3, #5
 800519e:	429a      	cmp	r2, r3
 80051a0:	d108      	bne.n	80051b4 <HAL_UART_Receive+0x138>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	e003      	b.n	80051bc <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2274      	movs	r2, #116	; 0x74
 80051c0:	2100      	movs	r1, #0
 80051c2:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80051c4:	e036      	b.n	8005234 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	0013      	movs	r3, r2
 80051d0:	2200      	movs	r2, #0
 80051d2:	2120      	movs	r1, #32
 80051d4:	f000 fbdc 	bl	8005990 <UART_WaitOnFlagUntilTimeout>
 80051d8:	1e03      	subs	r3, r0, #0
 80051da:	d001      	beq.n	80051e0 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e035      	b.n	800524c <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10e      	bne.n	8005204 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2212      	movs	r2, #18
 80051f0:	18ba      	adds	r2, r7, r2
 80051f2:	8812      	ldrh	r2, [r2, #0]
 80051f4:	4013      	ands	r3, r2
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	3302      	adds	r3, #2
 8005200:	61bb      	str	r3, [r7, #24]
 8005202:	e00e      	b.n	8005222 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	b2db      	uxtb	r3, r3
 800520c:	2212      	movs	r2, #18
 800520e:	18ba      	adds	r2, r7, r2
 8005210:	8812      	ldrh	r2, [r2, #0]
 8005212:	b2d2      	uxtb	r2, r2
 8005214:	4013      	ands	r3, r2
 8005216:	b2da      	uxtb	r2, r3
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	3301      	adds	r3, #1
 8005220:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	225a      	movs	r2, #90	; 0x5a
 8005226:	5a9b      	ldrh	r3, [r3, r2]
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b299      	uxth	r1, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	225a      	movs	r2, #90	; 0x5a
 8005232:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	225a      	movs	r2, #90	; 0x5a
 8005238:	5a9b      	ldrh	r3, [r3, r2]
 800523a:	b29b      	uxth	r3, r3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1c2      	bne.n	80051c6 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800524a:	2302      	movs	r3, #2
  }
}
 800524c:	0018      	movs	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	b008      	add	sp, #32
 8005252:	bd80      	pop	{r7, pc}
 8005254:	000001ff 	.word	0x000001ff

08005258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005258:	b5b0      	push	{r4, r5, r7, lr}
 800525a:	b08e      	sub	sp, #56	; 0x38
 800525c:	af00      	add	r7, sp, #0
 800525e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005260:	231a      	movs	r3, #26
 8005262:	2218      	movs	r2, #24
 8005264:	189b      	adds	r3, r3, r2
 8005266:	19db      	adds	r3, r3, r7
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	431a      	orrs	r2, r3
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	431a      	orrs	r2, r3
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	4313      	orrs	r3, r2
 8005282:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4ac3      	ldr	r2, [pc, #780]	; (8005598 <UART_SetConfig+0x340>)
 800528c:	4013      	ands	r3, r2
 800528e:	0019      	movs	r1, r3
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005296:	430a      	orrs	r2, r1
 8005298:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	4abe      	ldr	r2, [pc, #760]	; (800559c <UART_SetConfig+0x344>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052b8:	69fb      	ldr	r3, [r7, #28]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4ab8      	ldr	r2, [pc, #736]	; (80055a0 <UART_SetConfig+0x348>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052c8:	4313      	orrs	r3, r2
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	4ab4      	ldr	r2, [pc, #720]	; (80055a4 <UART_SetConfig+0x34c>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	0019      	movs	r1, r3
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052de:	430a      	orrs	r2, r1
 80052e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4ab0      	ldr	r2, [pc, #704]	; (80055a8 <UART_SetConfig+0x350>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d131      	bne.n	8005350 <UART_SetConfig+0xf8>
 80052ec:	4baf      	ldr	r3, [pc, #700]	; (80055ac <UART_SetConfig+0x354>)
 80052ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052f0:	2203      	movs	r2, #3
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b03      	cmp	r3, #3
 80052f6:	d01d      	beq.n	8005334 <UART_SetConfig+0xdc>
 80052f8:	d823      	bhi.n	8005342 <UART_SetConfig+0xea>
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d00c      	beq.n	8005318 <UART_SetConfig+0xc0>
 80052fe:	d820      	bhi.n	8005342 <UART_SetConfig+0xea>
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <UART_SetConfig+0xb2>
 8005304:	2b01      	cmp	r3, #1
 8005306:	d00e      	beq.n	8005326 <UART_SetConfig+0xce>
 8005308:	e01b      	b.n	8005342 <UART_SetConfig+0xea>
 800530a:	231b      	movs	r3, #27
 800530c:	2218      	movs	r2, #24
 800530e:	189b      	adds	r3, r3, r2
 8005310:	19db      	adds	r3, r3, r7
 8005312:	2201      	movs	r2, #1
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e0b4      	b.n	8005482 <UART_SetConfig+0x22a>
 8005318:	231b      	movs	r3, #27
 800531a:	2218      	movs	r2, #24
 800531c:	189b      	adds	r3, r3, r2
 800531e:	19db      	adds	r3, r3, r7
 8005320:	2202      	movs	r2, #2
 8005322:	701a      	strb	r2, [r3, #0]
 8005324:	e0ad      	b.n	8005482 <UART_SetConfig+0x22a>
 8005326:	231b      	movs	r3, #27
 8005328:	2218      	movs	r2, #24
 800532a:	189b      	adds	r3, r3, r2
 800532c:	19db      	adds	r3, r3, r7
 800532e:	2204      	movs	r2, #4
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	e0a6      	b.n	8005482 <UART_SetConfig+0x22a>
 8005334:	231b      	movs	r3, #27
 8005336:	2218      	movs	r2, #24
 8005338:	189b      	adds	r3, r3, r2
 800533a:	19db      	adds	r3, r3, r7
 800533c:	2208      	movs	r2, #8
 800533e:	701a      	strb	r2, [r3, #0]
 8005340:	e09f      	b.n	8005482 <UART_SetConfig+0x22a>
 8005342:	231b      	movs	r3, #27
 8005344:	2218      	movs	r2, #24
 8005346:	189b      	adds	r3, r3, r2
 8005348:	19db      	adds	r3, r3, r7
 800534a:	2210      	movs	r2, #16
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e098      	b.n	8005482 <UART_SetConfig+0x22a>
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a96      	ldr	r2, [pc, #600]	; (80055b0 <UART_SetConfig+0x358>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d131      	bne.n	80053be <UART_SetConfig+0x166>
 800535a:	4b94      	ldr	r3, [pc, #592]	; (80055ac <UART_SetConfig+0x354>)
 800535c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800535e:	220c      	movs	r2, #12
 8005360:	4013      	ands	r3, r2
 8005362:	2b0c      	cmp	r3, #12
 8005364:	d01d      	beq.n	80053a2 <UART_SetConfig+0x14a>
 8005366:	d823      	bhi.n	80053b0 <UART_SetConfig+0x158>
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00c      	beq.n	8005386 <UART_SetConfig+0x12e>
 800536c:	d820      	bhi.n	80053b0 <UART_SetConfig+0x158>
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <UART_SetConfig+0x120>
 8005372:	2b04      	cmp	r3, #4
 8005374:	d00e      	beq.n	8005394 <UART_SetConfig+0x13c>
 8005376:	e01b      	b.n	80053b0 <UART_SetConfig+0x158>
 8005378:	231b      	movs	r3, #27
 800537a:	2218      	movs	r2, #24
 800537c:	189b      	adds	r3, r3, r2
 800537e:	19db      	adds	r3, r3, r7
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	e07d      	b.n	8005482 <UART_SetConfig+0x22a>
 8005386:	231b      	movs	r3, #27
 8005388:	2218      	movs	r2, #24
 800538a:	189b      	adds	r3, r3, r2
 800538c:	19db      	adds	r3, r3, r7
 800538e:	2202      	movs	r2, #2
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e076      	b.n	8005482 <UART_SetConfig+0x22a>
 8005394:	231b      	movs	r3, #27
 8005396:	2218      	movs	r2, #24
 8005398:	189b      	adds	r3, r3, r2
 800539a:	19db      	adds	r3, r3, r7
 800539c:	2204      	movs	r2, #4
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	e06f      	b.n	8005482 <UART_SetConfig+0x22a>
 80053a2:	231b      	movs	r3, #27
 80053a4:	2218      	movs	r2, #24
 80053a6:	189b      	adds	r3, r3, r2
 80053a8:	19db      	adds	r3, r3, r7
 80053aa:	2208      	movs	r2, #8
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	e068      	b.n	8005482 <UART_SetConfig+0x22a>
 80053b0:	231b      	movs	r3, #27
 80053b2:	2218      	movs	r2, #24
 80053b4:	189b      	adds	r3, r3, r2
 80053b6:	19db      	adds	r3, r3, r7
 80053b8:	2210      	movs	r2, #16
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e061      	b.n	8005482 <UART_SetConfig+0x22a>
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a7c      	ldr	r2, [pc, #496]	; (80055b4 <UART_SetConfig+0x35c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d106      	bne.n	80053d6 <UART_SetConfig+0x17e>
 80053c8:	231b      	movs	r3, #27
 80053ca:	2218      	movs	r2, #24
 80053cc:	189b      	adds	r3, r3, r2
 80053ce:	19db      	adds	r3, r3, r7
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e055      	b.n	8005482 <UART_SetConfig+0x22a>
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a77      	ldr	r2, [pc, #476]	; (80055b8 <UART_SetConfig+0x360>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d106      	bne.n	80053ee <UART_SetConfig+0x196>
 80053e0:	231b      	movs	r3, #27
 80053e2:	2218      	movs	r2, #24
 80053e4:	189b      	adds	r3, r3, r2
 80053e6:	19db      	adds	r3, r3, r7
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
 80053ec:	e049      	b.n	8005482 <UART_SetConfig+0x22a>
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a6b      	ldr	r2, [pc, #428]	; (80055a0 <UART_SetConfig+0x348>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d13e      	bne.n	8005476 <UART_SetConfig+0x21e>
 80053f8:	4b6c      	ldr	r3, [pc, #432]	; (80055ac <UART_SetConfig+0x354>)
 80053fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053fc:	23c0      	movs	r3, #192	; 0xc0
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	4013      	ands	r3, r2
 8005402:	22c0      	movs	r2, #192	; 0xc0
 8005404:	0112      	lsls	r2, r2, #4
 8005406:	4293      	cmp	r3, r2
 8005408:	d027      	beq.n	800545a <UART_SetConfig+0x202>
 800540a:	22c0      	movs	r2, #192	; 0xc0
 800540c:	0112      	lsls	r2, r2, #4
 800540e:	4293      	cmp	r3, r2
 8005410:	d82a      	bhi.n	8005468 <UART_SetConfig+0x210>
 8005412:	2280      	movs	r2, #128	; 0x80
 8005414:	0112      	lsls	r2, r2, #4
 8005416:	4293      	cmp	r3, r2
 8005418:	d011      	beq.n	800543e <UART_SetConfig+0x1e6>
 800541a:	2280      	movs	r2, #128	; 0x80
 800541c:	0112      	lsls	r2, r2, #4
 800541e:	4293      	cmp	r3, r2
 8005420:	d822      	bhi.n	8005468 <UART_SetConfig+0x210>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <UART_SetConfig+0x1d8>
 8005426:	2280      	movs	r2, #128	; 0x80
 8005428:	00d2      	lsls	r2, r2, #3
 800542a:	4293      	cmp	r3, r2
 800542c:	d00e      	beq.n	800544c <UART_SetConfig+0x1f4>
 800542e:	e01b      	b.n	8005468 <UART_SetConfig+0x210>
 8005430:	231b      	movs	r3, #27
 8005432:	2218      	movs	r2, #24
 8005434:	189b      	adds	r3, r3, r2
 8005436:	19db      	adds	r3, r3, r7
 8005438:	2200      	movs	r2, #0
 800543a:	701a      	strb	r2, [r3, #0]
 800543c:	e021      	b.n	8005482 <UART_SetConfig+0x22a>
 800543e:	231b      	movs	r3, #27
 8005440:	2218      	movs	r2, #24
 8005442:	189b      	adds	r3, r3, r2
 8005444:	19db      	adds	r3, r3, r7
 8005446:	2202      	movs	r2, #2
 8005448:	701a      	strb	r2, [r3, #0]
 800544a:	e01a      	b.n	8005482 <UART_SetConfig+0x22a>
 800544c:	231b      	movs	r3, #27
 800544e:	2218      	movs	r2, #24
 8005450:	189b      	adds	r3, r3, r2
 8005452:	19db      	adds	r3, r3, r7
 8005454:	2204      	movs	r2, #4
 8005456:	701a      	strb	r2, [r3, #0]
 8005458:	e013      	b.n	8005482 <UART_SetConfig+0x22a>
 800545a:	231b      	movs	r3, #27
 800545c:	2218      	movs	r2, #24
 800545e:	189b      	adds	r3, r3, r2
 8005460:	19db      	adds	r3, r3, r7
 8005462:	2208      	movs	r2, #8
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e00c      	b.n	8005482 <UART_SetConfig+0x22a>
 8005468:	231b      	movs	r3, #27
 800546a:	2218      	movs	r2, #24
 800546c:	189b      	adds	r3, r3, r2
 800546e:	19db      	adds	r3, r3, r7
 8005470:	2210      	movs	r2, #16
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e005      	b.n	8005482 <UART_SetConfig+0x22a>
 8005476:	231b      	movs	r3, #27
 8005478:	2218      	movs	r2, #24
 800547a:	189b      	adds	r3, r3, r2
 800547c:	19db      	adds	r3, r3, r7
 800547e:	2210      	movs	r2, #16
 8005480:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a46      	ldr	r2, [pc, #280]	; (80055a0 <UART_SetConfig+0x348>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d000      	beq.n	800548e <UART_SetConfig+0x236>
 800548c:	e09a      	b.n	80055c4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800548e:	231b      	movs	r3, #27
 8005490:	2218      	movs	r2, #24
 8005492:	189b      	adds	r3, r3, r2
 8005494:	19db      	adds	r3, r3, r7
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d01d      	beq.n	80054d8 <UART_SetConfig+0x280>
 800549c:	dc20      	bgt.n	80054e0 <UART_SetConfig+0x288>
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d015      	beq.n	80054ce <UART_SetConfig+0x276>
 80054a2:	dc1d      	bgt.n	80054e0 <UART_SetConfig+0x288>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <UART_SetConfig+0x256>
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d005      	beq.n	80054b8 <UART_SetConfig+0x260>
 80054ac:	e018      	b.n	80054e0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ae:	f7fe f90f 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 80054b2:	0003      	movs	r3, r0
 80054b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054b6:	e01c      	b.n	80054f2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054b8:	4b3c      	ldr	r3, [pc, #240]	; (80055ac <UART_SetConfig+0x354>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2210      	movs	r2, #16
 80054be:	4013      	ands	r3, r2
 80054c0:	d002      	beq.n	80054c8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80054c2:	4b3e      	ldr	r3, [pc, #248]	; (80055bc <UART_SetConfig+0x364>)
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054c6:	e014      	b.n	80054f2 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80054c8:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <UART_SetConfig+0x368>)
 80054ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054cc:	e011      	b.n	80054f2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ce:	f7fe f84f 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 80054d2:	0003      	movs	r3, r0
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054d6:	e00c      	b.n	80054f2 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054de:	e008      	b.n	80054f2 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054e4:	231a      	movs	r3, #26
 80054e6:	2218      	movs	r2, #24
 80054e8:	189b      	adds	r3, r3, r2
 80054ea:	19db      	adds	r3, r3, r7
 80054ec:	2201      	movs	r2, #1
 80054ee:	701a      	strb	r2, [r3, #0]
        break;
 80054f0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d100      	bne.n	80054fa <UART_SetConfig+0x2a2>
 80054f8:	e134      	b.n	8005764 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	0013      	movs	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	189b      	adds	r3, r3, r2
 8005504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005506:	429a      	cmp	r2, r3
 8005508:	d305      	bcc.n	8005516 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005512:	429a      	cmp	r2, r3
 8005514:	d906      	bls.n	8005524 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005516:	231a      	movs	r3, #26
 8005518:	2218      	movs	r2, #24
 800551a:	189b      	adds	r3, r3, r2
 800551c:	19db      	adds	r3, r3, r7
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	e11f      	b.n	8005764 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	2300      	movs	r3, #0
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	6939      	ldr	r1, [r7, #16]
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	000b      	movs	r3, r1
 8005532:	0e1b      	lsrs	r3, r3, #24
 8005534:	0010      	movs	r0, r2
 8005536:	0205      	lsls	r5, r0, #8
 8005538:	431d      	orrs	r5, r3
 800553a:	000b      	movs	r3, r1
 800553c:	021c      	lsls	r4, r3, #8
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	085b      	lsrs	r3, r3, #1
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	68b8      	ldr	r0, [r7, #8]
 800554c:	68f9      	ldr	r1, [r7, #12]
 800554e:	1900      	adds	r0, r0, r4
 8005550:	4169      	adcs	r1, r5
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	2300      	movs	r3, #0
 800555a:	607b      	str	r3, [r7, #4]
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f7fa fe68 	bl	8000234 <__aeabi_uldivmod>
 8005564:	0002      	movs	r2, r0
 8005566:	000b      	movs	r3, r1
 8005568:	0013      	movs	r3, r2
 800556a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800556c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800556e:	23c0      	movs	r3, #192	; 0xc0
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	429a      	cmp	r2, r3
 8005574:	d309      	bcc.n	800558a <UART_SetConfig+0x332>
 8005576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005578:	2380      	movs	r3, #128	; 0x80
 800557a:	035b      	lsls	r3, r3, #13
 800557c:	429a      	cmp	r2, r3
 800557e:	d204      	bcs.n	800558a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005586:	60da      	str	r2, [r3, #12]
 8005588:	e0ec      	b.n	8005764 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800558a:	231a      	movs	r3, #26
 800558c:	2218      	movs	r2, #24
 800558e:	189b      	adds	r3, r3, r2
 8005590:	19db      	adds	r3, r3, r7
 8005592:	2201      	movs	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e0e5      	b.n	8005764 <UART_SetConfig+0x50c>
 8005598:	efff69f3 	.word	0xefff69f3
 800559c:	ffffcfff 	.word	0xffffcfff
 80055a0:	40004800 	.word	0x40004800
 80055a4:	fffff4ff 	.word	0xfffff4ff
 80055a8:	40013800 	.word	0x40013800
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40004400 	.word	0x40004400
 80055b4:	40004c00 	.word	0x40004c00
 80055b8:	40005000 	.word	0x40005000
 80055bc:	003d0900 	.word	0x003d0900
 80055c0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	2380      	movs	r3, #128	; 0x80
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d000      	beq.n	80055d2 <UART_SetConfig+0x37a>
 80055d0:	e071      	b.n	80056b6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80055d2:	231b      	movs	r3, #27
 80055d4:	2218      	movs	r2, #24
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	19db      	adds	r3, r3, r7
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d822      	bhi.n	8005626 <UART_SetConfig+0x3ce>
 80055e0:	009a      	lsls	r2, r3, #2
 80055e2:	4b68      	ldr	r3, [pc, #416]	; (8005784 <UART_SetConfig+0x52c>)
 80055e4:	18d3      	adds	r3, r2, r3
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055ea:	f7fe f871 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 80055ee:	0003      	movs	r3, r0
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055f2:	e021      	b.n	8005638 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f4:	f7fe f882 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 80055f8:	0003      	movs	r3, r0
 80055fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80055fc:	e01c      	b.n	8005638 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055fe:	4b62      	ldr	r3, [pc, #392]	; (8005788 <UART_SetConfig+0x530>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	2210      	movs	r2, #16
 8005604:	4013      	ands	r3, r2
 8005606:	d002      	beq.n	800560e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005608:	4b60      	ldr	r3, [pc, #384]	; (800578c <UART_SetConfig+0x534>)
 800560a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800560c:	e014      	b.n	8005638 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800560e:	4b60      	ldr	r3, [pc, #384]	; (8005790 <UART_SetConfig+0x538>)
 8005610:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005612:	e011      	b.n	8005638 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005614:	f7fd ffac 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 8005618:	0003      	movs	r3, r0
 800561a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800561c:	e00c      	b.n	8005638 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	021b      	lsls	r3, r3, #8
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005624:	e008      	b.n	8005638 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800562a:	231a      	movs	r3, #26
 800562c:	2218      	movs	r2, #24
 800562e:	189b      	adds	r3, r3, r2
 8005630:	19db      	adds	r3, r3, r7
 8005632:	2201      	movs	r2, #1
 8005634:	701a      	strb	r2, [r3, #0]
        break;
 8005636:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d100      	bne.n	8005640 <UART_SetConfig+0x3e8>
 800563e:	e091      	b.n	8005764 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	005a      	lsls	r2, r3, #1
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	085b      	lsrs	r3, r3, #1
 800564a:	18d2      	adds	r2, r2, r3
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	0019      	movs	r1, r3
 8005652:	0010      	movs	r0, r2
 8005654:	f7fa fd62 	bl	800011c <__udivsi3>
 8005658:	0003      	movs	r3, r0
 800565a:	b29b      	uxth	r3, r3
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	2b0f      	cmp	r3, #15
 8005662:	d921      	bls.n	80056a8 <UART_SetConfig+0x450>
 8005664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005666:	2380      	movs	r3, #128	; 0x80
 8005668:	025b      	lsls	r3, r3, #9
 800566a:	429a      	cmp	r2, r3
 800566c:	d21c      	bcs.n	80056a8 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	b29a      	uxth	r2, r3
 8005672:	200e      	movs	r0, #14
 8005674:	2418      	movs	r4, #24
 8005676:	1903      	adds	r3, r0, r4
 8005678:	19db      	adds	r3, r3, r7
 800567a:	210f      	movs	r1, #15
 800567c:	438a      	bics	r2, r1
 800567e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	085b      	lsrs	r3, r3, #1
 8005684:	b29b      	uxth	r3, r3
 8005686:	2207      	movs	r2, #7
 8005688:	4013      	ands	r3, r2
 800568a:	b299      	uxth	r1, r3
 800568c:	1903      	adds	r3, r0, r4
 800568e:	19db      	adds	r3, r3, r7
 8005690:	1902      	adds	r2, r0, r4
 8005692:	19d2      	adds	r2, r2, r7
 8005694:	8812      	ldrh	r2, [r2, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	1902      	adds	r2, r0, r4
 80056a0:	19d2      	adds	r2, r2, r7
 80056a2:	8812      	ldrh	r2, [r2, #0]
 80056a4:	60da      	str	r2, [r3, #12]
 80056a6:	e05d      	b.n	8005764 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80056a8:	231a      	movs	r3, #26
 80056aa:	2218      	movs	r2, #24
 80056ac:	189b      	adds	r3, r3, r2
 80056ae:	19db      	adds	r3, r3, r7
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	e056      	b.n	8005764 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056b6:	231b      	movs	r3, #27
 80056b8:	2218      	movs	r2, #24
 80056ba:	189b      	adds	r3, r3, r2
 80056bc:	19db      	adds	r3, r3, r7
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d822      	bhi.n	800570a <UART_SetConfig+0x4b2>
 80056c4:	009a      	lsls	r2, r3, #2
 80056c6:	4b33      	ldr	r3, [pc, #204]	; (8005794 <UART_SetConfig+0x53c>)
 80056c8:	18d3      	adds	r3, r2, r3
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ce:	f7fd ffff 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 80056d2:	0003      	movs	r3, r0
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056d6:	e021      	b.n	800571c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fe f810 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 80056dc:	0003      	movs	r3, r0
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056e0:	e01c      	b.n	800571c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056e2:	4b29      	ldr	r3, [pc, #164]	; (8005788 <UART_SetConfig+0x530>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2210      	movs	r2, #16
 80056e8:	4013      	ands	r3, r2
 80056ea:	d002      	beq.n	80056f2 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80056ec:	4b27      	ldr	r3, [pc, #156]	; (800578c <UART_SetConfig+0x534>)
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056f0:	e014      	b.n	800571c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <UART_SetConfig+0x538>)
 80056f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80056f6:	e011      	b.n	800571c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056f8:	f7fd ff3a 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 80056fc:	0003      	movs	r3, r0
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005700:	e00c      	b.n	800571c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005702:	2380      	movs	r3, #128	; 0x80
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005708:	e008      	b.n	800571c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800570e:	231a      	movs	r3, #26
 8005710:	2218      	movs	r2, #24
 8005712:	189b      	adds	r3, r3, r2
 8005714:	19db      	adds	r3, r3, r7
 8005716:	2201      	movs	r2, #1
 8005718:	701a      	strb	r2, [r3, #0]
        break;
 800571a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d020      	beq.n	8005764 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	085a      	lsrs	r2, r3, #1
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	18d2      	adds	r2, r2, r3
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	0019      	movs	r1, r3
 8005732:	0010      	movs	r0, r2
 8005734:	f7fa fcf2 	bl	800011c <__udivsi3>
 8005738:	0003      	movs	r3, r0
 800573a:	b29b      	uxth	r3, r3
 800573c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800573e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005740:	2b0f      	cmp	r3, #15
 8005742:	d909      	bls.n	8005758 <UART_SetConfig+0x500>
 8005744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	025b      	lsls	r3, r3, #9
 800574a:	429a      	cmp	r2, r3
 800574c:	d204      	bcs.n	8005758 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005754:	60da      	str	r2, [r3, #12]
 8005756:	e005      	b.n	8005764 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005758:	231a      	movs	r3, #26
 800575a:	2218      	movs	r2, #24
 800575c:	189b      	adds	r3, r3, r2
 800575e:	19db      	adds	r3, r3, r7
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	2200      	movs	r2, #0
 8005768:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	2200      	movs	r2, #0
 800576e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005770:	231a      	movs	r3, #26
 8005772:	2218      	movs	r2, #24
 8005774:	189b      	adds	r3, r3, r2
 8005776:	19db      	adds	r3, r3, r7
 8005778:	781b      	ldrb	r3, [r3, #0]
}
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b00e      	add	sp, #56	; 0x38
 8005780:	bdb0      	pop	{r4, r5, r7, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	08006e74 	.word	0x08006e74
 8005788:	40021000 	.word	0x40021000
 800578c:	003d0900 	.word	0x003d0900
 8005790:	00f42400 	.word	0x00f42400
 8005794:	08006e98 	.word	0x08006e98

08005798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	2201      	movs	r2, #1
 80057a6:	4013      	ands	r3, r2
 80057a8:	d00b      	beq.n	80057c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	4a4a      	ldr	r2, [pc, #296]	; (80058dc <UART_AdvFeatureConfig+0x144>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	0019      	movs	r1, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	2202      	movs	r2, #2
 80057c8:	4013      	ands	r3, r2
 80057ca:	d00b      	beq.n	80057e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	4a43      	ldr	r2, [pc, #268]	; (80058e0 <UART_AdvFeatureConfig+0x148>)
 80057d4:	4013      	ands	r3, r2
 80057d6:	0019      	movs	r1, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	2204      	movs	r2, #4
 80057ea:	4013      	ands	r3, r2
 80057ec:	d00b      	beq.n	8005806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	4a3b      	ldr	r2, [pc, #236]	; (80058e4 <UART_AdvFeatureConfig+0x14c>)
 80057f6:	4013      	ands	r3, r2
 80057f8:	0019      	movs	r1, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	2208      	movs	r2, #8
 800580c:	4013      	ands	r3, r2
 800580e:	d00b      	beq.n	8005828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4a34      	ldr	r2, [pc, #208]	; (80058e8 <UART_AdvFeatureConfig+0x150>)
 8005818:	4013      	ands	r3, r2
 800581a:	0019      	movs	r1, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	2210      	movs	r2, #16
 800582e:	4013      	ands	r3, r2
 8005830:	d00b      	beq.n	800584a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	4a2c      	ldr	r2, [pc, #176]	; (80058ec <UART_AdvFeatureConfig+0x154>)
 800583a:	4013      	ands	r3, r2
 800583c:	0019      	movs	r1, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	2220      	movs	r2, #32
 8005850:	4013      	ands	r3, r2
 8005852:	d00b      	beq.n	800586c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	4a25      	ldr	r2, [pc, #148]	; (80058f0 <UART_AdvFeatureConfig+0x158>)
 800585c:	4013      	ands	r3, r2
 800585e:	0019      	movs	r1, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	2240      	movs	r2, #64	; 0x40
 8005872:	4013      	ands	r3, r2
 8005874:	d01d      	beq.n	80058b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	4a1d      	ldr	r2, [pc, #116]	; (80058f4 <UART_AdvFeatureConfig+0x15c>)
 800587e:	4013      	ands	r3, r2
 8005880:	0019      	movs	r1, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005892:	2380      	movs	r3, #128	; 0x80
 8005894:	035b      	lsls	r3, r3, #13
 8005896:	429a      	cmp	r2, r3
 8005898:	d10b      	bne.n	80058b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <UART_AdvFeatureConfig+0x160>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	0019      	movs	r1, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2280      	movs	r2, #128	; 0x80
 80058b8:	4013      	ands	r3, r2
 80058ba:	d00b      	beq.n	80058d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4a0e      	ldr	r2, [pc, #56]	; (80058fc <UART_AdvFeatureConfig+0x164>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	0019      	movs	r1, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }
}
 80058d4:	46c0      	nop			; (mov r8, r8)
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b002      	add	sp, #8
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	fffdffff 	.word	0xfffdffff
 80058e0:	fffeffff 	.word	0xfffeffff
 80058e4:	fffbffff 	.word	0xfffbffff
 80058e8:	ffff7fff 	.word	0xffff7fff
 80058ec:	ffffefff 	.word	0xffffefff
 80058f0:	ffffdfff 	.word	0xffffdfff
 80058f4:	ffefffff 	.word	0xffefffff
 80058f8:	ff9fffff 	.word	0xff9fffff
 80058fc:	fff7ffff 	.word	0xfff7ffff

08005900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af02      	add	r7, sp, #8
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2280      	movs	r2, #128	; 0x80
 800590c:	2100      	movs	r1, #0
 800590e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005910:	f7fc f804 	bl	800191c <HAL_GetTick>
 8005914:	0003      	movs	r3, r0
 8005916:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2208      	movs	r2, #8
 8005920:	4013      	ands	r3, r2
 8005922:	2b08      	cmp	r3, #8
 8005924:	d10c      	bne.n	8005940 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2280      	movs	r2, #128	; 0x80
 800592a:	0391      	lsls	r1, r2, #14
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	4a17      	ldr	r2, [pc, #92]	; (800598c <UART_CheckIdleState+0x8c>)
 8005930:	9200      	str	r2, [sp, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	f000 f82c 	bl	8005990 <UART_WaitOnFlagUntilTimeout>
 8005938:	1e03      	subs	r3, r0, #0
 800593a:	d001      	beq.n	8005940 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e021      	b.n	8005984 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2204      	movs	r2, #4
 8005948:	4013      	ands	r3, r2
 800594a:	2b04      	cmp	r3, #4
 800594c:	d10c      	bne.n	8005968 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2280      	movs	r2, #128	; 0x80
 8005952:	03d1      	lsls	r1, r2, #15
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	4a0d      	ldr	r2, [pc, #52]	; (800598c <UART_CheckIdleState+0x8c>)
 8005958:	9200      	str	r2, [sp, #0]
 800595a:	2200      	movs	r2, #0
 800595c:	f000 f818 	bl	8005990 <UART_WaitOnFlagUntilTimeout>
 8005960:	1e03      	subs	r3, r0, #0
 8005962:	d001      	beq.n	8005968 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e00d      	b.n	8005984 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2220      	movs	r2, #32
 800596c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2274      	movs	r2, #116	; 0x74
 800597e:	2100      	movs	r1, #0
 8005980:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	b004      	add	sp, #16
 800598a:	bd80      	pop	{r7, pc}
 800598c:	01ffffff 	.word	0x01ffffff

08005990 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b094      	sub	sp, #80	; 0x50
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	1dfb      	adds	r3, r7, #7
 800599e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a0:	e0a3      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059a4:	3301      	adds	r3, #1
 80059a6:	d100      	bne.n	80059aa <UART_WaitOnFlagUntilTimeout+0x1a>
 80059a8:	e09f      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059aa:	f7fb ffb7 	bl	800191c <HAL_GetTick>
 80059ae:	0002      	movs	r2, r0
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d302      	bcc.n	80059c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80059ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d13d      	bne.n	8005a3c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059c0:	f3ef 8310 	mrs	r3, PRIMASK
 80059c4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059c8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ca:	2301      	movs	r3, #1
 80059cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	f383 8810 	msr	PRIMASK, r3
}
 80059d4:	46c0      	nop			; (mov r8, r8)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	494c      	ldr	r1, [pc, #304]	; (8005b14 <UART_WaitOnFlagUntilTimeout+0x184>)
 80059e2:	400a      	ands	r2, r1
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	f383 8810 	msr	PRIMASK, r3
}
 80059f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f2:	f3ef 8310 	mrs	r3, PRIMASK
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80059f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	643b      	str	r3, [r7, #64]	; 0x40
 80059fc:	2301      	movs	r3, #1
 80059fe:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a02:	f383 8810 	msr	PRIMASK, r3
}
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2101      	movs	r1, #1
 8005a14:	438a      	bics	r2, r1
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1e:	f383 8810 	msr	PRIMASK, r3
}
 8005a22:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2220      	movs	r2, #32
 8005a28:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2274      	movs	r2, #116	; 0x74
 8005a34:	2100      	movs	r1, #0
 8005a36:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e067      	b.n	8005b0c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2204      	movs	r2, #4
 8005a44:	4013      	ands	r3, r2
 8005a46:	d050      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	2380      	movs	r3, #128	; 0x80
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	401a      	ands	r2, r3
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d146      	bne.n	8005aea <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2280      	movs	r2, #128	; 0x80
 8005a62:	0112      	lsls	r2, r2, #4
 8005a64:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a66:	f3ef 8310 	mrs	r3, PRIMASK
 8005a6a:	613b      	str	r3, [r7, #16]
  return(result);
 8005a6c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a70:	2301      	movs	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f383 8810 	msr	PRIMASK, r3
}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4923      	ldr	r1, [pc, #140]	; (8005b14 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005a88:	400a      	ands	r2, r1
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f383 8810 	msr	PRIMASK, r3
}
 8005a96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a98:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a9e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f383 8810 	msr	PRIMASK, r3
}
 8005aac:	46c0      	nop			; (mov r8, r8)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2101      	movs	r1, #1
 8005aba:	438a      	bics	r2, r1
 8005abc:	609a      	str	r2, [r3, #8]
 8005abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	f383 8810 	msr	PRIMASK, r3
}
 8005ac8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2280      	movs	r2, #128	; 0x80
 8005ada:	2120      	movs	r1, #32
 8005adc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2274      	movs	r2, #116	; 0x74
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e010      	b.n	8005b0c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	4013      	ands	r3, r2
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	425a      	negs	r2, r3
 8005afa:	4153      	adcs	r3, r2
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	001a      	movs	r2, r3
 8005b00:	1dfb      	adds	r3, r7, #7
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d100      	bne.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005b08:	e74b      	b.n	80059a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	0018      	movs	r0, r3
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	b014      	add	sp, #80	; 0x50
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	fffffe5f 	.word	0xfffffe5f

08005b18 <__errno>:
 8005b18:	4b01      	ldr	r3, [pc, #4]	; (8005b20 <__errno+0x8>)
 8005b1a:	6818      	ldr	r0, [r3, #0]
 8005b1c:	4770      	bx	lr
 8005b1e:	46c0      	nop			; (mov r8, r8)
 8005b20:	2000000c 	.word	0x2000000c

08005b24 <__libc_init_array>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	2600      	movs	r6, #0
 8005b28:	4d0c      	ldr	r5, [pc, #48]	; (8005b5c <__libc_init_array+0x38>)
 8005b2a:	4c0d      	ldr	r4, [pc, #52]	; (8005b60 <__libc_init_array+0x3c>)
 8005b2c:	1b64      	subs	r4, r4, r5
 8005b2e:	10a4      	asrs	r4, r4, #2
 8005b30:	42a6      	cmp	r6, r4
 8005b32:	d109      	bne.n	8005b48 <__libc_init_array+0x24>
 8005b34:	2600      	movs	r6, #0
 8005b36:	f001 f8cb 	bl	8006cd0 <_init>
 8005b3a:	4d0a      	ldr	r5, [pc, #40]	; (8005b64 <__libc_init_array+0x40>)
 8005b3c:	4c0a      	ldr	r4, [pc, #40]	; (8005b68 <__libc_init_array+0x44>)
 8005b3e:	1b64      	subs	r4, r4, r5
 8005b40:	10a4      	asrs	r4, r4, #2
 8005b42:	42a6      	cmp	r6, r4
 8005b44:	d105      	bne.n	8005b52 <__libc_init_array+0x2e>
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
 8005b48:	00b3      	lsls	r3, r6, #2
 8005b4a:	58eb      	ldr	r3, [r5, r3]
 8005b4c:	4798      	blx	r3
 8005b4e:	3601      	adds	r6, #1
 8005b50:	e7ee      	b.n	8005b30 <__libc_init_array+0xc>
 8005b52:	00b3      	lsls	r3, r6, #2
 8005b54:	58eb      	ldr	r3, [r5, r3]
 8005b56:	4798      	blx	r3
 8005b58:	3601      	adds	r6, #1
 8005b5a:	e7f2      	b.n	8005b42 <__libc_init_array+0x1e>
 8005b5c:	08006f5c 	.word	0x08006f5c
 8005b60:	08006f5c 	.word	0x08006f5c
 8005b64:	08006f5c 	.word	0x08006f5c
 8005b68:	08006f60 	.word	0x08006f60

08005b6c <memset>:
 8005b6c:	0003      	movs	r3, r0
 8005b6e:	1882      	adds	r2, r0, r2
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d100      	bne.n	8005b76 <memset+0xa>
 8005b74:	4770      	bx	lr
 8005b76:	7019      	strb	r1, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	e7f9      	b.n	8005b70 <memset+0x4>

08005b7c <iprintf>:
 8005b7c:	b40f      	push	{r0, r1, r2, r3}
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <iprintf+0x30>)
 8005b80:	b513      	push	{r0, r1, r4, lr}
 8005b82:	681c      	ldr	r4, [r3, #0]
 8005b84:	2c00      	cmp	r4, #0
 8005b86:	d005      	beq.n	8005b94 <iprintf+0x18>
 8005b88:	69a3      	ldr	r3, [r4, #24]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d102      	bne.n	8005b94 <iprintf+0x18>
 8005b8e:	0020      	movs	r0, r4
 8005b90:	f000 fa04 	bl	8005f9c <__sinit>
 8005b94:	ab05      	add	r3, sp, #20
 8005b96:	0020      	movs	r0, r4
 8005b98:	9a04      	ldr	r2, [sp, #16]
 8005b9a:	68a1      	ldr	r1, [r4, #8]
 8005b9c:	9301      	str	r3, [sp, #4]
 8005b9e:	f000 fc21 	bl	80063e4 <_vfiprintf_r>
 8005ba2:	bc16      	pop	{r1, r2, r4}
 8005ba4:	bc08      	pop	{r3}
 8005ba6:	b004      	add	sp, #16
 8005ba8:	4718      	bx	r3
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	2000000c 	.word	0x2000000c

08005bb0 <setvbuf>:
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb2:	001d      	movs	r5, r3
 8005bb4:	4b5d      	ldr	r3, [pc, #372]	; (8005d2c <setvbuf+0x17c>)
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	681e      	ldr	r6, [r3, #0]
 8005bba:	0004      	movs	r4, r0
 8005bbc:	000f      	movs	r7, r1
 8005bbe:	9200      	str	r2, [sp, #0]
 8005bc0:	2e00      	cmp	r6, #0
 8005bc2:	d005      	beq.n	8005bd0 <setvbuf+0x20>
 8005bc4:	69b3      	ldr	r3, [r6, #24]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d102      	bne.n	8005bd0 <setvbuf+0x20>
 8005bca:	0030      	movs	r0, r6
 8005bcc:	f000 f9e6 	bl	8005f9c <__sinit>
 8005bd0:	4b57      	ldr	r3, [pc, #348]	; (8005d30 <setvbuf+0x180>)
 8005bd2:	429c      	cmp	r4, r3
 8005bd4:	d161      	bne.n	8005c9a <setvbuf+0xea>
 8005bd6:	6874      	ldr	r4, [r6, #4]
 8005bd8:	9b00      	ldr	r3, [sp, #0]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d005      	beq.n	8005bea <setvbuf+0x3a>
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d900      	bls.n	8005be4 <setvbuf+0x34>
 8005be2:	e09d      	b.n	8005d20 <setvbuf+0x170>
 8005be4:	2d00      	cmp	r5, #0
 8005be6:	da00      	bge.n	8005bea <setvbuf+0x3a>
 8005be8:	e09a      	b.n	8005d20 <setvbuf+0x170>
 8005bea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bec:	07db      	lsls	r3, r3, #31
 8005bee:	d405      	bmi.n	8005bfc <setvbuf+0x4c>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	059b      	lsls	r3, r3, #22
 8005bf4:	d402      	bmi.n	8005bfc <setvbuf+0x4c>
 8005bf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bf8:	f000 fa71 	bl	80060de <__retarget_lock_acquire_recursive>
 8005bfc:	0021      	movs	r1, r4
 8005bfe:	0030      	movs	r0, r6
 8005c00:	f000 f92a 	bl	8005e58 <_fflush_r>
 8005c04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c06:	2900      	cmp	r1, #0
 8005c08:	d008      	beq.n	8005c1c <setvbuf+0x6c>
 8005c0a:	0023      	movs	r3, r4
 8005c0c:	3344      	adds	r3, #68	; 0x44
 8005c0e:	4299      	cmp	r1, r3
 8005c10:	d002      	beq.n	8005c18 <setvbuf+0x68>
 8005c12:	0030      	movs	r0, r6
 8005c14:	f000 fadc 	bl	80061d0 <_free_r>
 8005c18:	2300      	movs	r3, #0
 8005c1a:	6363      	str	r3, [r4, #52]	; 0x34
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61a3      	str	r3, [r4, #24]
 8005c20:	6063      	str	r3, [r4, #4]
 8005c22:	89a3      	ldrh	r3, [r4, #12]
 8005c24:	061b      	lsls	r3, r3, #24
 8005c26:	d503      	bpl.n	8005c30 <setvbuf+0x80>
 8005c28:	0030      	movs	r0, r6
 8005c2a:	6921      	ldr	r1, [r4, #16]
 8005c2c:	f000 fad0 	bl	80061d0 <_free_r>
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	4a40      	ldr	r2, [pc, #256]	; (8005d34 <setvbuf+0x184>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	81a3      	strh	r3, [r4, #12]
 8005c38:	9b00      	ldr	r3, [sp, #0]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d100      	bne.n	8005c40 <setvbuf+0x90>
 8005c3e:	e069      	b.n	8005d14 <setvbuf+0x164>
 8005c40:	ab03      	add	r3, sp, #12
 8005c42:	0021      	movs	r1, r4
 8005c44:	0030      	movs	r0, r6
 8005c46:	aa02      	add	r2, sp, #8
 8005c48:	f000 fa4c 	bl	80060e4 <__swhatbuf_r>
 8005c4c:	89a3      	ldrh	r3, [r4, #12]
 8005c4e:	4303      	orrs	r3, r0
 8005c50:	81a3      	strh	r3, [r4, #12]
 8005c52:	2d00      	cmp	r5, #0
 8005c54:	d12b      	bne.n	8005cae <setvbuf+0xfe>
 8005c56:	9d02      	ldr	r5, [sp, #8]
 8005c58:	0028      	movs	r0, r5
 8005c5a:	f000 faaf 	bl	80061bc <malloc>
 8005c5e:	1e07      	subs	r7, r0, #0
 8005c60:	d153      	bne.n	8005d0a <setvbuf+0x15a>
 8005c62:	9b02      	ldr	r3, [sp, #8]
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	42ab      	cmp	r3, r5
 8005c68:	d149      	bne.n	8005cfe <setvbuf+0x14e>
 8005c6a:	2501      	movs	r5, #1
 8005c6c:	426d      	negs	r5, r5
 8005c6e:	2302      	movs	r3, #2
 8005c70:	89a2      	ldrh	r2, [r4, #12]
 8005c72:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005c74:	4313      	orrs	r3, r2
 8005c76:	2200      	movs	r2, #0
 8005c78:	60a2      	str	r2, [r4, #8]
 8005c7a:	0022      	movs	r2, r4
 8005c7c:	3247      	adds	r2, #71	; 0x47
 8005c7e:	6022      	str	r2, [r4, #0]
 8005c80:	6122      	str	r2, [r4, #16]
 8005c82:	2201      	movs	r2, #1
 8005c84:	b21b      	sxth	r3, r3
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	6162      	str	r2, [r4, #20]
 8005c8a:	4211      	tst	r1, r2
 8005c8c:	d134      	bne.n	8005cf8 <setvbuf+0x148>
 8005c8e:	059b      	lsls	r3, r3, #22
 8005c90:	d432      	bmi.n	8005cf8 <setvbuf+0x148>
 8005c92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c94:	f000 fa24 	bl	80060e0 <__retarget_lock_release_recursive>
 8005c98:	e02e      	b.n	8005cf8 <setvbuf+0x148>
 8005c9a:	4b27      	ldr	r3, [pc, #156]	; (8005d38 <setvbuf+0x188>)
 8005c9c:	429c      	cmp	r4, r3
 8005c9e:	d101      	bne.n	8005ca4 <setvbuf+0xf4>
 8005ca0:	68b4      	ldr	r4, [r6, #8]
 8005ca2:	e799      	b.n	8005bd8 <setvbuf+0x28>
 8005ca4:	4b25      	ldr	r3, [pc, #148]	; (8005d3c <setvbuf+0x18c>)
 8005ca6:	429c      	cmp	r4, r3
 8005ca8:	d196      	bne.n	8005bd8 <setvbuf+0x28>
 8005caa:	68f4      	ldr	r4, [r6, #12]
 8005cac:	e794      	b.n	8005bd8 <setvbuf+0x28>
 8005cae:	2f00      	cmp	r7, #0
 8005cb0:	d0d2      	beq.n	8005c58 <setvbuf+0xa8>
 8005cb2:	69b3      	ldr	r3, [r6, #24]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <setvbuf+0x10e>
 8005cb8:	0030      	movs	r0, r6
 8005cba:	f000 f96f 	bl	8005f9c <__sinit>
 8005cbe:	9b00      	ldr	r3, [sp, #0]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d102      	bne.n	8005cca <setvbuf+0x11a>
 8005cc4:	89a2      	ldrh	r2, [r4, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	81a3      	strh	r3, [r4, #12]
 8005cca:	89a2      	ldrh	r2, [r4, #12]
 8005ccc:	2308      	movs	r3, #8
 8005cce:	0011      	movs	r1, r2
 8005cd0:	6027      	str	r7, [r4, #0]
 8005cd2:	6127      	str	r7, [r4, #16]
 8005cd4:	6165      	str	r5, [r4, #20]
 8005cd6:	4019      	ands	r1, r3
 8005cd8:	421a      	tst	r2, r3
 8005cda:	d01f      	beq.n	8005d1c <setvbuf+0x16c>
 8005cdc:	07d3      	lsls	r3, r2, #31
 8005cde:	d51b      	bpl.n	8005d18 <setvbuf+0x168>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	426d      	negs	r5, r5
 8005ce4:	60a3      	str	r3, [r4, #8]
 8005ce6:	61a5      	str	r5, [r4, #24]
 8005ce8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005cea:	2301      	movs	r3, #1
 8005cec:	000d      	movs	r5, r1
 8005cee:	401d      	ands	r5, r3
 8005cf0:	4219      	tst	r1, r3
 8005cf2:	d118      	bne.n	8005d26 <setvbuf+0x176>
 8005cf4:	0593      	lsls	r3, r2, #22
 8005cf6:	d5cc      	bpl.n	8005c92 <setvbuf+0xe2>
 8005cf8:	0028      	movs	r0, r5
 8005cfa:	b005      	add	sp, #20
 8005cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfe:	9801      	ldr	r0, [sp, #4]
 8005d00:	f000 fa5c 	bl	80061bc <malloc>
 8005d04:	9d01      	ldr	r5, [sp, #4]
 8005d06:	1e07      	subs	r7, r0, #0
 8005d08:	d0af      	beq.n	8005c6a <setvbuf+0xba>
 8005d0a:	2380      	movs	r3, #128	; 0x80
 8005d0c:	89a2      	ldrh	r2, [r4, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	e7ce      	b.n	8005cb2 <setvbuf+0x102>
 8005d14:	2500      	movs	r5, #0
 8005d16:	e7aa      	b.n	8005c6e <setvbuf+0xbe>
 8005d18:	60a5      	str	r5, [r4, #8]
 8005d1a:	e7e5      	b.n	8005ce8 <setvbuf+0x138>
 8005d1c:	60a1      	str	r1, [r4, #8]
 8005d1e:	e7e3      	b.n	8005ce8 <setvbuf+0x138>
 8005d20:	2501      	movs	r5, #1
 8005d22:	426d      	negs	r5, r5
 8005d24:	e7e8      	b.n	8005cf8 <setvbuf+0x148>
 8005d26:	2500      	movs	r5, #0
 8005d28:	e7e6      	b.n	8005cf8 <setvbuf+0x148>
 8005d2a:	46c0      	nop			; (mov r8, r8)
 8005d2c:	2000000c 	.word	0x2000000c
 8005d30:	08006ee0 	.word	0x08006ee0
 8005d34:	fffff35c 	.word	0xfffff35c
 8005d38:	08006f00 	.word	0x08006f00
 8005d3c:	08006ec0 	.word	0x08006ec0

08005d40 <__sflush_r>:
 8005d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d42:	898b      	ldrh	r3, [r1, #12]
 8005d44:	0005      	movs	r5, r0
 8005d46:	000c      	movs	r4, r1
 8005d48:	071a      	lsls	r2, r3, #28
 8005d4a:	d45f      	bmi.n	8005e0c <__sflush_r+0xcc>
 8005d4c:	684a      	ldr	r2, [r1, #4]
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	dc04      	bgt.n	8005d5c <__sflush_r+0x1c>
 8005d52:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8005d54:	2a00      	cmp	r2, #0
 8005d56:	dc01      	bgt.n	8005d5c <__sflush_r+0x1c>
 8005d58:	2000      	movs	r0, #0
 8005d5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d5c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005d5e:	2f00      	cmp	r7, #0
 8005d60:	d0fa      	beq.n	8005d58 <__sflush_r+0x18>
 8005d62:	2200      	movs	r2, #0
 8005d64:	2180      	movs	r1, #128	; 0x80
 8005d66:	682e      	ldr	r6, [r5, #0]
 8005d68:	602a      	str	r2, [r5, #0]
 8005d6a:	001a      	movs	r2, r3
 8005d6c:	0149      	lsls	r1, r1, #5
 8005d6e:	400a      	ands	r2, r1
 8005d70:	420b      	tst	r3, r1
 8005d72:	d034      	beq.n	8005dde <__sflush_r+0x9e>
 8005d74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d76:	89a3      	ldrh	r3, [r4, #12]
 8005d78:	075b      	lsls	r3, r3, #29
 8005d7a:	d506      	bpl.n	8005d8a <__sflush_r+0x4a>
 8005d7c:	6863      	ldr	r3, [r4, #4]
 8005d7e:	1ac0      	subs	r0, r0, r3
 8005d80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <__sflush_r+0x4a>
 8005d86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d88:	1ac0      	subs	r0, r0, r3
 8005d8a:	0002      	movs	r2, r0
 8005d8c:	6a21      	ldr	r1, [r4, #32]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	0028      	movs	r0, r5
 8005d92:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005d94:	47b8      	blx	r7
 8005d96:	89a1      	ldrh	r1, [r4, #12]
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d106      	bne.n	8005daa <__sflush_r+0x6a>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	2b1d      	cmp	r3, #29
 8005da0:	d831      	bhi.n	8005e06 <__sflush_r+0xc6>
 8005da2:	4a2c      	ldr	r2, [pc, #176]	; (8005e54 <__sflush_r+0x114>)
 8005da4:	40da      	lsrs	r2, r3
 8005da6:	07d3      	lsls	r3, r2, #31
 8005da8:	d52d      	bpl.n	8005e06 <__sflush_r+0xc6>
 8005daa:	2300      	movs	r3, #0
 8005dac:	6063      	str	r3, [r4, #4]
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	6023      	str	r3, [r4, #0]
 8005db2:	04cb      	lsls	r3, r1, #19
 8005db4:	d505      	bpl.n	8005dc2 <__sflush_r+0x82>
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	d102      	bne.n	8005dc0 <__sflush_r+0x80>
 8005dba:	682b      	ldr	r3, [r5, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d100      	bne.n	8005dc2 <__sflush_r+0x82>
 8005dc0:	6560      	str	r0, [r4, #84]	; 0x54
 8005dc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dc4:	602e      	str	r6, [r5, #0]
 8005dc6:	2900      	cmp	r1, #0
 8005dc8:	d0c6      	beq.n	8005d58 <__sflush_r+0x18>
 8005dca:	0023      	movs	r3, r4
 8005dcc:	3344      	adds	r3, #68	; 0x44
 8005dce:	4299      	cmp	r1, r3
 8005dd0:	d002      	beq.n	8005dd8 <__sflush_r+0x98>
 8005dd2:	0028      	movs	r0, r5
 8005dd4:	f000 f9fc 	bl	80061d0 <_free_r>
 8005dd8:	2000      	movs	r0, #0
 8005dda:	6360      	str	r0, [r4, #52]	; 0x34
 8005ddc:	e7bd      	b.n	8005d5a <__sflush_r+0x1a>
 8005dde:	2301      	movs	r3, #1
 8005de0:	0028      	movs	r0, r5
 8005de2:	6a21      	ldr	r1, [r4, #32]
 8005de4:	47b8      	blx	r7
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	d1c5      	bne.n	8005d76 <__sflush_r+0x36>
 8005dea:	682b      	ldr	r3, [r5, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0c2      	beq.n	8005d76 <__sflush_r+0x36>
 8005df0:	2b1d      	cmp	r3, #29
 8005df2:	d001      	beq.n	8005df8 <__sflush_r+0xb8>
 8005df4:	2b16      	cmp	r3, #22
 8005df6:	d101      	bne.n	8005dfc <__sflush_r+0xbc>
 8005df8:	602e      	str	r6, [r5, #0]
 8005dfa:	e7ad      	b.n	8005d58 <__sflush_r+0x18>
 8005dfc:	2340      	movs	r3, #64	; 0x40
 8005dfe:	89a2      	ldrh	r2, [r4, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	e7a9      	b.n	8005d5a <__sflush_r+0x1a>
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	e7fa      	b.n	8005e02 <__sflush_r+0xc2>
 8005e0c:	690f      	ldr	r7, [r1, #16]
 8005e0e:	2f00      	cmp	r7, #0
 8005e10:	d0a2      	beq.n	8005d58 <__sflush_r+0x18>
 8005e12:	680a      	ldr	r2, [r1, #0]
 8005e14:	600f      	str	r7, [r1, #0]
 8005e16:	1bd2      	subs	r2, r2, r7
 8005e18:	9201      	str	r2, [sp, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	079b      	lsls	r3, r3, #30
 8005e1e:	d100      	bne.n	8005e22 <__sflush_r+0xe2>
 8005e20:	694a      	ldr	r2, [r1, #20]
 8005e22:	60a2      	str	r2, [r4, #8]
 8005e24:	9b01      	ldr	r3, [sp, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	dc00      	bgt.n	8005e2c <__sflush_r+0xec>
 8005e2a:	e795      	b.n	8005d58 <__sflush_r+0x18>
 8005e2c:	003a      	movs	r2, r7
 8005e2e:	0028      	movs	r0, r5
 8005e30:	9b01      	ldr	r3, [sp, #4]
 8005e32:	6a21      	ldr	r1, [r4, #32]
 8005e34:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e36:	47b0      	blx	r6
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	dc06      	bgt.n	8005e4a <__sflush_r+0x10a>
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	2001      	movs	r0, #1
 8005e40:	89a2      	ldrh	r2, [r4, #12]
 8005e42:	4240      	negs	r0, r0
 8005e44:	4313      	orrs	r3, r2
 8005e46:	81a3      	strh	r3, [r4, #12]
 8005e48:	e787      	b.n	8005d5a <__sflush_r+0x1a>
 8005e4a:	9b01      	ldr	r3, [sp, #4]
 8005e4c:	183f      	adds	r7, r7, r0
 8005e4e:	1a1b      	subs	r3, r3, r0
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	e7e7      	b.n	8005e24 <__sflush_r+0xe4>
 8005e54:	20400001 	.word	0x20400001

08005e58 <_fflush_r>:
 8005e58:	690b      	ldr	r3, [r1, #16]
 8005e5a:	b570      	push	{r4, r5, r6, lr}
 8005e5c:	0005      	movs	r5, r0
 8005e5e:	000c      	movs	r4, r1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <_fflush_r+0x12>
 8005e64:	2500      	movs	r5, #0
 8005e66:	0028      	movs	r0, r5
 8005e68:	bd70      	pop	{r4, r5, r6, pc}
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d004      	beq.n	8005e78 <_fflush_r+0x20>
 8005e6e:	6983      	ldr	r3, [r0, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <_fflush_r+0x20>
 8005e74:	f000 f892 	bl	8005f9c <__sinit>
 8005e78:	4b14      	ldr	r3, [pc, #80]	; (8005ecc <_fflush_r+0x74>)
 8005e7a:	429c      	cmp	r4, r3
 8005e7c:	d11b      	bne.n	8005eb6 <_fflush_r+0x5e>
 8005e7e:	686c      	ldr	r4, [r5, #4]
 8005e80:	220c      	movs	r2, #12
 8005e82:	5ea3      	ldrsh	r3, [r4, r2]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0ed      	beq.n	8005e64 <_fflush_r+0xc>
 8005e88:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e8a:	07d2      	lsls	r2, r2, #31
 8005e8c:	d404      	bmi.n	8005e98 <_fflush_r+0x40>
 8005e8e:	059b      	lsls	r3, r3, #22
 8005e90:	d402      	bmi.n	8005e98 <_fflush_r+0x40>
 8005e92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e94:	f000 f923 	bl	80060de <__retarget_lock_acquire_recursive>
 8005e98:	0028      	movs	r0, r5
 8005e9a:	0021      	movs	r1, r4
 8005e9c:	f7ff ff50 	bl	8005d40 <__sflush_r>
 8005ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ea2:	0005      	movs	r5, r0
 8005ea4:	07db      	lsls	r3, r3, #31
 8005ea6:	d4de      	bmi.n	8005e66 <_fflush_r+0xe>
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	059b      	lsls	r3, r3, #22
 8005eac:	d4db      	bmi.n	8005e66 <_fflush_r+0xe>
 8005eae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eb0:	f000 f916 	bl	80060e0 <__retarget_lock_release_recursive>
 8005eb4:	e7d7      	b.n	8005e66 <_fflush_r+0xe>
 8005eb6:	4b06      	ldr	r3, [pc, #24]	; (8005ed0 <_fflush_r+0x78>)
 8005eb8:	429c      	cmp	r4, r3
 8005eba:	d101      	bne.n	8005ec0 <_fflush_r+0x68>
 8005ebc:	68ac      	ldr	r4, [r5, #8]
 8005ebe:	e7df      	b.n	8005e80 <_fflush_r+0x28>
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <_fflush_r+0x7c>)
 8005ec2:	429c      	cmp	r4, r3
 8005ec4:	d1dc      	bne.n	8005e80 <_fflush_r+0x28>
 8005ec6:	68ec      	ldr	r4, [r5, #12]
 8005ec8:	e7da      	b.n	8005e80 <_fflush_r+0x28>
 8005eca:	46c0      	nop			; (mov r8, r8)
 8005ecc:	08006ee0 	.word	0x08006ee0
 8005ed0:	08006f00 	.word	0x08006f00
 8005ed4:	08006ec0 	.word	0x08006ec0

08005ed8 <std>:
 8005ed8:	2300      	movs	r3, #0
 8005eda:	b510      	push	{r4, lr}
 8005edc:	0004      	movs	r4, r0
 8005ede:	6003      	str	r3, [r0, #0]
 8005ee0:	6043      	str	r3, [r0, #4]
 8005ee2:	6083      	str	r3, [r0, #8]
 8005ee4:	8181      	strh	r1, [r0, #12]
 8005ee6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ee8:	0019      	movs	r1, r3
 8005eea:	81c2      	strh	r2, [r0, #14]
 8005eec:	6103      	str	r3, [r0, #16]
 8005eee:	6143      	str	r3, [r0, #20]
 8005ef0:	6183      	str	r3, [r0, #24]
 8005ef2:	2208      	movs	r2, #8
 8005ef4:	305c      	adds	r0, #92	; 0x5c
 8005ef6:	f7ff fe39 	bl	8005b6c <memset>
 8005efa:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <std+0x38>)
 8005efc:	6224      	str	r4, [r4, #32]
 8005efe:	6263      	str	r3, [r4, #36]	; 0x24
 8005f00:	4b04      	ldr	r3, [pc, #16]	; (8005f14 <std+0x3c>)
 8005f02:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f04:	4b04      	ldr	r3, [pc, #16]	; (8005f18 <std+0x40>)
 8005f06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f08:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <std+0x44>)
 8005f0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	08006981 	.word	0x08006981
 8005f14:	080069a9 	.word	0x080069a9
 8005f18:	080069e1 	.word	0x080069e1
 8005f1c:	08006a0d 	.word	0x08006a0d

08005f20 <_cleanup_r>:
 8005f20:	b510      	push	{r4, lr}
 8005f22:	4902      	ldr	r1, [pc, #8]	; (8005f2c <_cleanup_r+0xc>)
 8005f24:	f000 f8ba 	bl	800609c <_fwalk_reent>
 8005f28:	bd10      	pop	{r4, pc}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	08005e59 	.word	0x08005e59

08005f30 <__sfmoreglue>:
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	2568      	movs	r5, #104	; 0x68
 8005f34:	1e4a      	subs	r2, r1, #1
 8005f36:	4355      	muls	r5, r2
 8005f38:	000e      	movs	r6, r1
 8005f3a:	0029      	movs	r1, r5
 8005f3c:	3174      	adds	r1, #116	; 0x74
 8005f3e:	f000 f9b3 	bl	80062a8 <_malloc_r>
 8005f42:	1e04      	subs	r4, r0, #0
 8005f44:	d008      	beq.n	8005f58 <__sfmoreglue+0x28>
 8005f46:	2100      	movs	r1, #0
 8005f48:	002a      	movs	r2, r5
 8005f4a:	6001      	str	r1, [r0, #0]
 8005f4c:	6046      	str	r6, [r0, #4]
 8005f4e:	300c      	adds	r0, #12
 8005f50:	60a0      	str	r0, [r4, #8]
 8005f52:	3268      	adds	r2, #104	; 0x68
 8005f54:	f7ff fe0a 	bl	8005b6c <memset>
 8005f58:	0020      	movs	r0, r4
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}

08005f5c <__sfp_lock_acquire>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4802      	ldr	r0, [pc, #8]	; (8005f68 <__sfp_lock_acquire+0xc>)
 8005f60:	f000 f8bd 	bl	80060de <__retarget_lock_acquire_recursive>
 8005f64:	bd10      	pop	{r4, pc}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	20000299 	.word	0x20000299

08005f6c <__sfp_lock_release>:
 8005f6c:	b510      	push	{r4, lr}
 8005f6e:	4802      	ldr	r0, [pc, #8]	; (8005f78 <__sfp_lock_release+0xc>)
 8005f70:	f000 f8b6 	bl	80060e0 <__retarget_lock_release_recursive>
 8005f74:	bd10      	pop	{r4, pc}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	20000299 	.word	0x20000299

08005f7c <__sinit_lock_acquire>:
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	4802      	ldr	r0, [pc, #8]	; (8005f88 <__sinit_lock_acquire+0xc>)
 8005f80:	f000 f8ad 	bl	80060de <__retarget_lock_acquire_recursive>
 8005f84:	bd10      	pop	{r4, pc}
 8005f86:	46c0      	nop			; (mov r8, r8)
 8005f88:	2000029a 	.word	0x2000029a

08005f8c <__sinit_lock_release>:
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	4802      	ldr	r0, [pc, #8]	; (8005f98 <__sinit_lock_release+0xc>)
 8005f90:	f000 f8a6 	bl	80060e0 <__retarget_lock_release_recursive>
 8005f94:	bd10      	pop	{r4, pc}
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	2000029a 	.word	0x2000029a

08005f9c <__sinit>:
 8005f9c:	b513      	push	{r0, r1, r4, lr}
 8005f9e:	0004      	movs	r4, r0
 8005fa0:	f7ff ffec 	bl	8005f7c <__sinit_lock_acquire>
 8005fa4:	69a3      	ldr	r3, [r4, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <__sinit+0x14>
 8005faa:	f7ff ffef 	bl	8005f8c <__sinit_lock_release>
 8005fae:	bd13      	pop	{r0, r1, r4, pc}
 8005fb0:	64a3      	str	r3, [r4, #72]	; 0x48
 8005fb2:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005fb4:	6523      	str	r3, [r4, #80]	; 0x50
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <__sinit+0x68>)
 8005fb8:	4a13      	ldr	r2, [pc, #76]	; (8006008 <__sinit+0x6c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d101      	bne.n	8005fc8 <__sinit+0x2c>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	61a3      	str	r3, [r4, #24]
 8005fc8:	0020      	movs	r0, r4
 8005fca:	f000 f81f 	bl	800600c <__sfp>
 8005fce:	6060      	str	r0, [r4, #4]
 8005fd0:	0020      	movs	r0, r4
 8005fd2:	f000 f81b 	bl	800600c <__sfp>
 8005fd6:	60a0      	str	r0, [r4, #8]
 8005fd8:	0020      	movs	r0, r4
 8005fda:	f000 f817 	bl	800600c <__sfp>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	2104      	movs	r1, #4
 8005fe2:	60e0      	str	r0, [r4, #12]
 8005fe4:	6860      	ldr	r0, [r4, #4]
 8005fe6:	f7ff ff77 	bl	8005ed8 <std>
 8005fea:	2201      	movs	r2, #1
 8005fec:	2109      	movs	r1, #9
 8005fee:	68a0      	ldr	r0, [r4, #8]
 8005ff0:	f7ff ff72 	bl	8005ed8 <std>
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	2112      	movs	r1, #18
 8005ff8:	68e0      	ldr	r0, [r4, #12]
 8005ffa:	f7ff ff6d 	bl	8005ed8 <std>
 8005ffe:	2301      	movs	r3, #1
 8006000:	61a3      	str	r3, [r4, #24]
 8006002:	e7d2      	b.n	8005faa <__sinit+0xe>
 8006004:	08006ebc 	.word	0x08006ebc
 8006008:	08005f21 	.word	0x08005f21

0800600c <__sfp>:
 800600c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600e:	0007      	movs	r7, r0
 8006010:	f7ff ffa4 	bl	8005f5c <__sfp_lock_acquire>
 8006014:	4b1f      	ldr	r3, [pc, #124]	; (8006094 <__sfp+0x88>)
 8006016:	681e      	ldr	r6, [r3, #0]
 8006018:	69b3      	ldr	r3, [r6, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d102      	bne.n	8006024 <__sfp+0x18>
 800601e:	0030      	movs	r0, r6
 8006020:	f7ff ffbc 	bl	8005f9c <__sinit>
 8006024:	3648      	adds	r6, #72	; 0x48
 8006026:	68b4      	ldr	r4, [r6, #8]
 8006028:	6873      	ldr	r3, [r6, #4]
 800602a:	3b01      	subs	r3, #1
 800602c:	d504      	bpl.n	8006038 <__sfp+0x2c>
 800602e:	6833      	ldr	r3, [r6, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d022      	beq.n	800607a <__sfp+0x6e>
 8006034:	6836      	ldr	r6, [r6, #0]
 8006036:	e7f6      	b.n	8006026 <__sfp+0x1a>
 8006038:	220c      	movs	r2, #12
 800603a:	5ea5      	ldrsh	r5, [r4, r2]
 800603c:	2d00      	cmp	r5, #0
 800603e:	d11a      	bne.n	8006076 <__sfp+0x6a>
 8006040:	0020      	movs	r0, r4
 8006042:	4b15      	ldr	r3, [pc, #84]	; (8006098 <__sfp+0x8c>)
 8006044:	3058      	adds	r0, #88	; 0x58
 8006046:	60e3      	str	r3, [r4, #12]
 8006048:	6665      	str	r5, [r4, #100]	; 0x64
 800604a:	f000 f847 	bl	80060dc <__retarget_lock_init_recursive>
 800604e:	f7ff ff8d 	bl	8005f6c <__sfp_lock_release>
 8006052:	0020      	movs	r0, r4
 8006054:	2208      	movs	r2, #8
 8006056:	0029      	movs	r1, r5
 8006058:	6025      	str	r5, [r4, #0]
 800605a:	60a5      	str	r5, [r4, #8]
 800605c:	6065      	str	r5, [r4, #4]
 800605e:	6125      	str	r5, [r4, #16]
 8006060:	6165      	str	r5, [r4, #20]
 8006062:	61a5      	str	r5, [r4, #24]
 8006064:	305c      	adds	r0, #92	; 0x5c
 8006066:	f7ff fd81 	bl	8005b6c <memset>
 800606a:	6365      	str	r5, [r4, #52]	; 0x34
 800606c:	63a5      	str	r5, [r4, #56]	; 0x38
 800606e:	64a5      	str	r5, [r4, #72]	; 0x48
 8006070:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006072:	0020      	movs	r0, r4
 8006074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006076:	3468      	adds	r4, #104	; 0x68
 8006078:	e7d7      	b.n	800602a <__sfp+0x1e>
 800607a:	2104      	movs	r1, #4
 800607c:	0038      	movs	r0, r7
 800607e:	f7ff ff57 	bl	8005f30 <__sfmoreglue>
 8006082:	1e04      	subs	r4, r0, #0
 8006084:	6030      	str	r0, [r6, #0]
 8006086:	d1d5      	bne.n	8006034 <__sfp+0x28>
 8006088:	f7ff ff70 	bl	8005f6c <__sfp_lock_release>
 800608c:	230c      	movs	r3, #12
 800608e:	603b      	str	r3, [r7, #0]
 8006090:	e7ef      	b.n	8006072 <__sfp+0x66>
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	08006ebc 	.word	0x08006ebc
 8006098:	ffff0001 	.word	0xffff0001

0800609c <_fwalk_reent>:
 800609c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800609e:	0004      	movs	r4, r0
 80060a0:	0006      	movs	r6, r0
 80060a2:	2700      	movs	r7, #0
 80060a4:	9101      	str	r1, [sp, #4]
 80060a6:	3448      	adds	r4, #72	; 0x48
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	68a5      	ldr	r5, [r4, #8]
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	9b00      	ldr	r3, [sp, #0]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	d504      	bpl.n	80060c0 <_fwalk_reent+0x24>
 80060b6:	6824      	ldr	r4, [r4, #0]
 80060b8:	2c00      	cmp	r4, #0
 80060ba:	d1f5      	bne.n	80060a8 <_fwalk_reent+0xc>
 80060bc:	0038      	movs	r0, r7
 80060be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060c0:	89ab      	ldrh	r3, [r5, #12]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d908      	bls.n	80060d8 <_fwalk_reent+0x3c>
 80060c6:	220e      	movs	r2, #14
 80060c8:	5eab      	ldrsh	r3, [r5, r2]
 80060ca:	3301      	adds	r3, #1
 80060cc:	d004      	beq.n	80060d8 <_fwalk_reent+0x3c>
 80060ce:	0029      	movs	r1, r5
 80060d0:	0030      	movs	r0, r6
 80060d2:	9b01      	ldr	r3, [sp, #4]
 80060d4:	4798      	blx	r3
 80060d6:	4307      	orrs	r7, r0
 80060d8:	3568      	adds	r5, #104	; 0x68
 80060da:	e7e8      	b.n	80060ae <_fwalk_reent+0x12>

080060dc <__retarget_lock_init_recursive>:
 80060dc:	4770      	bx	lr

080060de <__retarget_lock_acquire_recursive>:
 80060de:	4770      	bx	lr

080060e0 <__retarget_lock_release_recursive>:
 80060e0:	4770      	bx	lr
	...

080060e4 <__swhatbuf_r>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	000e      	movs	r6, r1
 80060e8:	001d      	movs	r5, r3
 80060ea:	230e      	movs	r3, #14
 80060ec:	5ec9      	ldrsh	r1, [r1, r3]
 80060ee:	0014      	movs	r4, r2
 80060f0:	b096      	sub	sp, #88	; 0x58
 80060f2:	2900      	cmp	r1, #0
 80060f4:	da08      	bge.n	8006108 <__swhatbuf_r+0x24>
 80060f6:	220c      	movs	r2, #12
 80060f8:	5eb3      	ldrsh	r3, [r6, r2]
 80060fa:	2200      	movs	r2, #0
 80060fc:	602a      	str	r2, [r5, #0]
 80060fe:	061b      	lsls	r3, r3, #24
 8006100:	d411      	bmi.n	8006126 <__swhatbuf_r+0x42>
 8006102:	2380      	movs	r3, #128	; 0x80
 8006104:	00db      	lsls	r3, r3, #3
 8006106:	e00f      	b.n	8006128 <__swhatbuf_r+0x44>
 8006108:	466a      	mov	r2, sp
 800610a:	f000 fd79 	bl	8006c00 <_fstat_r>
 800610e:	2800      	cmp	r0, #0
 8006110:	dbf1      	blt.n	80060f6 <__swhatbuf_r+0x12>
 8006112:	23f0      	movs	r3, #240	; 0xf0
 8006114:	9901      	ldr	r1, [sp, #4]
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	4019      	ands	r1, r3
 800611a:	4b05      	ldr	r3, [pc, #20]	; (8006130 <__swhatbuf_r+0x4c>)
 800611c:	18c9      	adds	r1, r1, r3
 800611e:	424b      	negs	r3, r1
 8006120:	4159      	adcs	r1, r3
 8006122:	6029      	str	r1, [r5, #0]
 8006124:	e7ed      	b.n	8006102 <__swhatbuf_r+0x1e>
 8006126:	2340      	movs	r3, #64	; 0x40
 8006128:	2000      	movs	r0, #0
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	b016      	add	sp, #88	; 0x58
 800612e:	bd70      	pop	{r4, r5, r6, pc}
 8006130:	ffffe000 	.word	0xffffe000

08006134 <__smakebuf_r>:
 8006134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006136:	2602      	movs	r6, #2
 8006138:	898b      	ldrh	r3, [r1, #12]
 800613a:	0005      	movs	r5, r0
 800613c:	000c      	movs	r4, r1
 800613e:	4233      	tst	r3, r6
 8006140:	d006      	beq.n	8006150 <__smakebuf_r+0x1c>
 8006142:	0023      	movs	r3, r4
 8006144:	3347      	adds	r3, #71	; 0x47
 8006146:	6023      	str	r3, [r4, #0]
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	2301      	movs	r3, #1
 800614c:	6163      	str	r3, [r4, #20]
 800614e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006150:	466a      	mov	r2, sp
 8006152:	ab01      	add	r3, sp, #4
 8006154:	f7ff ffc6 	bl	80060e4 <__swhatbuf_r>
 8006158:	9900      	ldr	r1, [sp, #0]
 800615a:	0007      	movs	r7, r0
 800615c:	0028      	movs	r0, r5
 800615e:	f000 f8a3 	bl	80062a8 <_malloc_r>
 8006162:	2800      	cmp	r0, #0
 8006164:	d108      	bne.n	8006178 <__smakebuf_r+0x44>
 8006166:	220c      	movs	r2, #12
 8006168:	5ea3      	ldrsh	r3, [r4, r2]
 800616a:	059a      	lsls	r2, r3, #22
 800616c:	d4ef      	bmi.n	800614e <__smakebuf_r+0x1a>
 800616e:	2203      	movs	r2, #3
 8006170:	4393      	bics	r3, r2
 8006172:	431e      	orrs	r6, r3
 8006174:	81a6      	strh	r6, [r4, #12]
 8006176:	e7e4      	b.n	8006142 <__smakebuf_r+0xe>
 8006178:	4b0f      	ldr	r3, [pc, #60]	; (80061b8 <__smakebuf_r+0x84>)
 800617a:	62ab      	str	r3, [r5, #40]	; 0x28
 800617c:	2380      	movs	r3, #128	; 0x80
 800617e:	89a2      	ldrh	r2, [r4, #12]
 8006180:	6020      	str	r0, [r4, #0]
 8006182:	4313      	orrs	r3, r2
 8006184:	81a3      	strh	r3, [r4, #12]
 8006186:	9b00      	ldr	r3, [sp, #0]
 8006188:	6120      	str	r0, [r4, #16]
 800618a:	6163      	str	r3, [r4, #20]
 800618c:	9b01      	ldr	r3, [sp, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00d      	beq.n	80061ae <__smakebuf_r+0x7a>
 8006192:	0028      	movs	r0, r5
 8006194:	230e      	movs	r3, #14
 8006196:	5ee1      	ldrsh	r1, [r4, r3]
 8006198:	f000 fd44 	bl	8006c24 <_isatty_r>
 800619c:	2800      	cmp	r0, #0
 800619e:	d006      	beq.n	80061ae <__smakebuf_r+0x7a>
 80061a0:	2203      	movs	r2, #3
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	4393      	bics	r3, r2
 80061a6:	001a      	movs	r2, r3
 80061a8:	2301      	movs	r3, #1
 80061aa:	4313      	orrs	r3, r2
 80061ac:	81a3      	strh	r3, [r4, #12]
 80061ae:	89a0      	ldrh	r0, [r4, #12]
 80061b0:	4307      	orrs	r7, r0
 80061b2:	81a7      	strh	r7, [r4, #12]
 80061b4:	e7cb      	b.n	800614e <__smakebuf_r+0x1a>
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	08005f21 	.word	0x08005f21

080061bc <malloc>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	4b03      	ldr	r3, [pc, #12]	; (80061cc <malloc+0x10>)
 80061c0:	0001      	movs	r1, r0
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	f000 f870 	bl	80062a8 <_malloc_r>
 80061c8:	bd10      	pop	{r4, pc}
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	2000000c 	.word	0x2000000c

080061d0 <_free_r>:
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	0005      	movs	r5, r0
 80061d4:	2900      	cmp	r1, #0
 80061d6:	d010      	beq.n	80061fa <_free_r+0x2a>
 80061d8:	1f0c      	subs	r4, r1, #4
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	da00      	bge.n	80061e2 <_free_r+0x12>
 80061e0:	18e4      	adds	r4, r4, r3
 80061e2:	0028      	movs	r0, r5
 80061e4:	f000 fd50 	bl	8006c88 <__malloc_lock>
 80061e8:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <_free_r+0x90>)
 80061ea:	6813      	ldr	r3, [r2, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <_free_r+0x2c>
 80061f0:	6063      	str	r3, [r4, #4]
 80061f2:	6014      	str	r4, [r2, #0]
 80061f4:	0028      	movs	r0, r5
 80061f6:	f000 fd4f 	bl	8006c98 <__malloc_unlock>
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	d908      	bls.n	8006212 <_free_r+0x42>
 8006200:	6821      	ldr	r1, [r4, #0]
 8006202:	1860      	adds	r0, r4, r1
 8006204:	4283      	cmp	r3, r0
 8006206:	d1f3      	bne.n	80061f0 <_free_r+0x20>
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	1841      	adds	r1, r0, r1
 800620e:	6021      	str	r1, [r4, #0]
 8006210:	e7ee      	b.n	80061f0 <_free_r+0x20>
 8006212:	001a      	movs	r2, r3
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <_free_r+0x4e>
 800621a:	42a3      	cmp	r3, r4
 800621c:	d9f9      	bls.n	8006212 <_free_r+0x42>
 800621e:	6811      	ldr	r1, [r2, #0]
 8006220:	1850      	adds	r0, r2, r1
 8006222:	42a0      	cmp	r0, r4
 8006224:	d10b      	bne.n	800623e <_free_r+0x6e>
 8006226:	6820      	ldr	r0, [r4, #0]
 8006228:	1809      	adds	r1, r1, r0
 800622a:	1850      	adds	r0, r2, r1
 800622c:	6011      	str	r1, [r2, #0]
 800622e:	4283      	cmp	r3, r0
 8006230:	d1e0      	bne.n	80061f4 <_free_r+0x24>
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	1841      	adds	r1, r0, r1
 8006238:	6011      	str	r1, [r2, #0]
 800623a:	6053      	str	r3, [r2, #4]
 800623c:	e7da      	b.n	80061f4 <_free_r+0x24>
 800623e:	42a0      	cmp	r0, r4
 8006240:	d902      	bls.n	8006248 <_free_r+0x78>
 8006242:	230c      	movs	r3, #12
 8006244:	602b      	str	r3, [r5, #0]
 8006246:	e7d5      	b.n	80061f4 <_free_r+0x24>
 8006248:	6821      	ldr	r1, [r4, #0]
 800624a:	1860      	adds	r0, r4, r1
 800624c:	4283      	cmp	r3, r0
 800624e:	d103      	bne.n	8006258 <_free_r+0x88>
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	1841      	adds	r1, r0, r1
 8006256:	6021      	str	r1, [r4, #0]
 8006258:	6063      	str	r3, [r4, #4]
 800625a:	6054      	str	r4, [r2, #4]
 800625c:	e7ca      	b.n	80061f4 <_free_r+0x24>
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	2000029c 	.word	0x2000029c

08006264 <sbrk_aligned>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	4e0f      	ldr	r6, [pc, #60]	; (80062a4 <sbrk_aligned+0x40>)
 8006268:	000d      	movs	r5, r1
 800626a:	6831      	ldr	r1, [r6, #0]
 800626c:	0004      	movs	r4, r0
 800626e:	2900      	cmp	r1, #0
 8006270:	d102      	bne.n	8006278 <sbrk_aligned+0x14>
 8006272:	f000 fb73 	bl	800695c <_sbrk_r>
 8006276:	6030      	str	r0, [r6, #0]
 8006278:	0029      	movs	r1, r5
 800627a:	0020      	movs	r0, r4
 800627c:	f000 fb6e 	bl	800695c <_sbrk_r>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d00a      	beq.n	800629a <sbrk_aligned+0x36>
 8006284:	2303      	movs	r3, #3
 8006286:	1cc5      	adds	r5, r0, #3
 8006288:	439d      	bics	r5, r3
 800628a:	42a8      	cmp	r0, r5
 800628c:	d007      	beq.n	800629e <sbrk_aligned+0x3a>
 800628e:	1a29      	subs	r1, r5, r0
 8006290:	0020      	movs	r0, r4
 8006292:	f000 fb63 	bl	800695c <_sbrk_r>
 8006296:	1c43      	adds	r3, r0, #1
 8006298:	d101      	bne.n	800629e <sbrk_aligned+0x3a>
 800629a:	2501      	movs	r5, #1
 800629c:	426d      	negs	r5, r5
 800629e:	0028      	movs	r0, r5
 80062a0:	bd70      	pop	{r4, r5, r6, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	200002a0 	.word	0x200002a0

080062a8 <_malloc_r>:
 80062a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062aa:	2203      	movs	r2, #3
 80062ac:	1ccb      	adds	r3, r1, #3
 80062ae:	4393      	bics	r3, r2
 80062b0:	3308      	adds	r3, #8
 80062b2:	0006      	movs	r6, r0
 80062b4:	001f      	movs	r7, r3
 80062b6:	2b0c      	cmp	r3, #12
 80062b8:	d232      	bcs.n	8006320 <_malloc_r+0x78>
 80062ba:	270c      	movs	r7, #12
 80062bc:	42b9      	cmp	r1, r7
 80062be:	d831      	bhi.n	8006324 <_malloc_r+0x7c>
 80062c0:	0030      	movs	r0, r6
 80062c2:	f000 fce1 	bl	8006c88 <__malloc_lock>
 80062c6:	4d32      	ldr	r5, [pc, #200]	; (8006390 <_malloc_r+0xe8>)
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	001c      	movs	r4, r3
 80062cc:	2c00      	cmp	r4, #0
 80062ce:	d12e      	bne.n	800632e <_malloc_r+0x86>
 80062d0:	0039      	movs	r1, r7
 80062d2:	0030      	movs	r0, r6
 80062d4:	f7ff ffc6 	bl	8006264 <sbrk_aligned>
 80062d8:	0004      	movs	r4, r0
 80062da:	1c43      	adds	r3, r0, #1
 80062dc:	d11e      	bne.n	800631c <_malloc_r+0x74>
 80062de:	682c      	ldr	r4, [r5, #0]
 80062e0:	0025      	movs	r5, r4
 80062e2:	2d00      	cmp	r5, #0
 80062e4:	d14a      	bne.n	800637c <_malloc_r+0xd4>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	0029      	movs	r1, r5
 80062ea:	18e3      	adds	r3, r4, r3
 80062ec:	0030      	movs	r0, r6
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	f000 fb34 	bl	800695c <_sbrk_r>
 80062f4:	9b01      	ldr	r3, [sp, #4]
 80062f6:	4283      	cmp	r3, r0
 80062f8:	d143      	bne.n	8006382 <_malloc_r+0xda>
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	3703      	adds	r7, #3
 80062fe:	1aff      	subs	r7, r7, r3
 8006300:	2303      	movs	r3, #3
 8006302:	439f      	bics	r7, r3
 8006304:	3708      	adds	r7, #8
 8006306:	2f0c      	cmp	r7, #12
 8006308:	d200      	bcs.n	800630c <_malloc_r+0x64>
 800630a:	270c      	movs	r7, #12
 800630c:	0039      	movs	r1, r7
 800630e:	0030      	movs	r0, r6
 8006310:	f7ff ffa8 	bl	8006264 <sbrk_aligned>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d034      	beq.n	8006382 <_malloc_r+0xda>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	19df      	adds	r7, r3, r7
 800631c:	6027      	str	r7, [r4, #0]
 800631e:	e013      	b.n	8006348 <_malloc_r+0xa0>
 8006320:	2b00      	cmp	r3, #0
 8006322:	dacb      	bge.n	80062bc <_malloc_r+0x14>
 8006324:	230c      	movs	r3, #12
 8006326:	2500      	movs	r5, #0
 8006328:	6033      	str	r3, [r6, #0]
 800632a:	0028      	movs	r0, r5
 800632c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	1bd1      	subs	r1, r2, r7
 8006332:	d420      	bmi.n	8006376 <_malloc_r+0xce>
 8006334:	290b      	cmp	r1, #11
 8006336:	d917      	bls.n	8006368 <_malloc_r+0xc0>
 8006338:	19e2      	adds	r2, r4, r7
 800633a:	6027      	str	r7, [r4, #0]
 800633c:	42a3      	cmp	r3, r4
 800633e:	d111      	bne.n	8006364 <_malloc_r+0xbc>
 8006340:	602a      	str	r2, [r5, #0]
 8006342:	6863      	ldr	r3, [r4, #4]
 8006344:	6011      	str	r1, [r2, #0]
 8006346:	6053      	str	r3, [r2, #4]
 8006348:	0030      	movs	r0, r6
 800634a:	0025      	movs	r5, r4
 800634c:	f000 fca4 	bl	8006c98 <__malloc_unlock>
 8006350:	2207      	movs	r2, #7
 8006352:	350b      	adds	r5, #11
 8006354:	1d23      	adds	r3, r4, #4
 8006356:	4395      	bics	r5, r2
 8006358:	1aea      	subs	r2, r5, r3
 800635a:	429d      	cmp	r5, r3
 800635c:	d0e5      	beq.n	800632a <_malloc_r+0x82>
 800635e:	1b5b      	subs	r3, r3, r5
 8006360:	50a3      	str	r3, [r4, r2]
 8006362:	e7e2      	b.n	800632a <_malloc_r+0x82>
 8006364:	605a      	str	r2, [r3, #4]
 8006366:	e7ec      	b.n	8006342 <_malloc_r+0x9a>
 8006368:	6862      	ldr	r2, [r4, #4]
 800636a:	42a3      	cmp	r3, r4
 800636c:	d101      	bne.n	8006372 <_malloc_r+0xca>
 800636e:	602a      	str	r2, [r5, #0]
 8006370:	e7ea      	b.n	8006348 <_malloc_r+0xa0>
 8006372:	605a      	str	r2, [r3, #4]
 8006374:	e7e8      	b.n	8006348 <_malloc_r+0xa0>
 8006376:	0023      	movs	r3, r4
 8006378:	6864      	ldr	r4, [r4, #4]
 800637a:	e7a7      	b.n	80062cc <_malloc_r+0x24>
 800637c:	002c      	movs	r4, r5
 800637e:	686d      	ldr	r5, [r5, #4]
 8006380:	e7af      	b.n	80062e2 <_malloc_r+0x3a>
 8006382:	230c      	movs	r3, #12
 8006384:	0030      	movs	r0, r6
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	f000 fc86 	bl	8006c98 <__malloc_unlock>
 800638c:	e7cd      	b.n	800632a <_malloc_r+0x82>
 800638e:	46c0      	nop			; (mov r8, r8)
 8006390:	2000029c 	.word	0x2000029c

08006394 <__sfputc_r>:
 8006394:	6893      	ldr	r3, [r2, #8]
 8006396:	b510      	push	{r4, lr}
 8006398:	3b01      	subs	r3, #1
 800639a:	6093      	str	r3, [r2, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	da04      	bge.n	80063aa <__sfputc_r+0x16>
 80063a0:	6994      	ldr	r4, [r2, #24]
 80063a2:	42a3      	cmp	r3, r4
 80063a4:	db07      	blt.n	80063b6 <__sfputc_r+0x22>
 80063a6:	290a      	cmp	r1, #10
 80063a8:	d005      	beq.n	80063b6 <__sfputc_r+0x22>
 80063aa:	6813      	ldr	r3, [r2, #0]
 80063ac:	1c58      	adds	r0, r3, #1
 80063ae:	6010      	str	r0, [r2, #0]
 80063b0:	7019      	strb	r1, [r3, #0]
 80063b2:	0008      	movs	r0, r1
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	f000 fb2f 	bl	8006a18 <__swbuf_r>
 80063ba:	0001      	movs	r1, r0
 80063bc:	e7f9      	b.n	80063b2 <__sfputc_r+0x1e>

080063be <__sfputs_r>:
 80063be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c0:	0006      	movs	r6, r0
 80063c2:	000f      	movs	r7, r1
 80063c4:	0014      	movs	r4, r2
 80063c6:	18d5      	adds	r5, r2, r3
 80063c8:	42ac      	cmp	r4, r5
 80063ca:	d101      	bne.n	80063d0 <__sfputs_r+0x12>
 80063cc:	2000      	movs	r0, #0
 80063ce:	e007      	b.n	80063e0 <__sfputs_r+0x22>
 80063d0:	7821      	ldrb	r1, [r4, #0]
 80063d2:	003a      	movs	r2, r7
 80063d4:	0030      	movs	r0, r6
 80063d6:	f7ff ffdd 	bl	8006394 <__sfputc_r>
 80063da:	3401      	adds	r4, #1
 80063dc:	1c43      	adds	r3, r0, #1
 80063de:	d1f3      	bne.n	80063c8 <__sfputs_r+0xa>
 80063e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063e4 <_vfiprintf_r>:
 80063e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e6:	b0a1      	sub	sp, #132	; 0x84
 80063e8:	0006      	movs	r6, r0
 80063ea:	000c      	movs	r4, r1
 80063ec:	001f      	movs	r7, r3
 80063ee:	9203      	str	r2, [sp, #12]
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d004      	beq.n	80063fe <_vfiprintf_r+0x1a>
 80063f4:	6983      	ldr	r3, [r0, #24]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <_vfiprintf_r+0x1a>
 80063fa:	f7ff fdcf 	bl	8005f9c <__sinit>
 80063fe:	4b8e      	ldr	r3, [pc, #568]	; (8006638 <_vfiprintf_r+0x254>)
 8006400:	429c      	cmp	r4, r3
 8006402:	d11c      	bne.n	800643e <_vfiprintf_r+0x5a>
 8006404:	6874      	ldr	r4, [r6, #4]
 8006406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006408:	07db      	lsls	r3, r3, #31
 800640a:	d405      	bmi.n	8006418 <_vfiprintf_r+0x34>
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	059b      	lsls	r3, r3, #22
 8006410:	d402      	bmi.n	8006418 <_vfiprintf_r+0x34>
 8006412:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006414:	f7ff fe63 	bl	80060de <__retarget_lock_acquire_recursive>
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	071b      	lsls	r3, r3, #28
 800641c:	d502      	bpl.n	8006424 <_vfiprintf_r+0x40>
 800641e:	6923      	ldr	r3, [r4, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11d      	bne.n	8006460 <_vfiprintf_r+0x7c>
 8006424:	0021      	movs	r1, r4
 8006426:	0030      	movs	r0, r6
 8006428:	f000 fb60 	bl	8006aec <__swsetup_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	d017      	beq.n	8006460 <_vfiprintf_r+0x7c>
 8006430:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006432:	07db      	lsls	r3, r3, #31
 8006434:	d50d      	bpl.n	8006452 <_vfiprintf_r+0x6e>
 8006436:	2001      	movs	r0, #1
 8006438:	4240      	negs	r0, r0
 800643a:	b021      	add	sp, #132	; 0x84
 800643c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643e:	4b7f      	ldr	r3, [pc, #508]	; (800663c <_vfiprintf_r+0x258>)
 8006440:	429c      	cmp	r4, r3
 8006442:	d101      	bne.n	8006448 <_vfiprintf_r+0x64>
 8006444:	68b4      	ldr	r4, [r6, #8]
 8006446:	e7de      	b.n	8006406 <_vfiprintf_r+0x22>
 8006448:	4b7d      	ldr	r3, [pc, #500]	; (8006640 <_vfiprintf_r+0x25c>)
 800644a:	429c      	cmp	r4, r3
 800644c:	d1db      	bne.n	8006406 <_vfiprintf_r+0x22>
 800644e:	68f4      	ldr	r4, [r6, #12]
 8006450:	e7d9      	b.n	8006406 <_vfiprintf_r+0x22>
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	059b      	lsls	r3, r3, #22
 8006456:	d4ee      	bmi.n	8006436 <_vfiprintf_r+0x52>
 8006458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800645a:	f7ff fe41 	bl	80060e0 <__retarget_lock_release_recursive>
 800645e:	e7ea      	b.n	8006436 <_vfiprintf_r+0x52>
 8006460:	2300      	movs	r3, #0
 8006462:	ad08      	add	r5, sp, #32
 8006464:	616b      	str	r3, [r5, #20]
 8006466:	3320      	adds	r3, #32
 8006468:	766b      	strb	r3, [r5, #25]
 800646a:	3310      	adds	r3, #16
 800646c:	76ab      	strb	r3, [r5, #26]
 800646e:	9707      	str	r7, [sp, #28]
 8006470:	9f03      	ldr	r7, [sp, #12]
 8006472:	783b      	ldrb	r3, [r7, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <_vfiprintf_r+0x98>
 8006478:	2b25      	cmp	r3, #37	; 0x25
 800647a:	d14e      	bne.n	800651a <_vfiprintf_r+0x136>
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	1afb      	subs	r3, r7, r3
 8006480:	9305      	str	r3, [sp, #20]
 8006482:	9b03      	ldr	r3, [sp, #12]
 8006484:	429f      	cmp	r7, r3
 8006486:	d00d      	beq.n	80064a4 <_vfiprintf_r+0xc0>
 8006488:	9b05      	ldr	r3, [sp, #20]
 800648a:	0021      	movs	r1, r4
 800648c:	0030      	movs	r0, r6
 800648e:	9a03      	ldr	r2, [sp, #12]
 8006490:	f7ff ff95 	bl	80063be <__sfputs_r>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d100      	bne.n	800649a <_vfiprintf_r+0xb6>
 8006498:	e0b5      	b.n	8006606 <_vfiprintf_r+0x222>
 800649a:	696a      	ldr	r2, [r5, #20]
 800649c:	9b05      	ldr	r3, [sp, #20]
 800649e:	4694      	mov	ip, r2
 80064a0:	4463      	add	r3, ip
 80064a2:	616b      	str	r3, [r5, #20]
 80064a4:	783b      	ldrb	r3, [r7, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d100      	bne.n	80064ac <_vfiprintf_r+0xc8>
 80064aa:	e0ac      	b.n	8006606 <_vfiprintf_r+0x222>
 80064ac:	2201      	movs	r2, #1
 80064ae:	1c7b      	adds	r3, r7, #1
 80064b0:	9303      	str	r3, [sp, #12]
 80064b2:	2300      	movs	r3, #0
 80064b4:	4252      	negs	r2, r2
 80064b6:	606a      	str	r2, [r5, #4]
 80064b8:	a904      	add	r1, sp, #16
 80064ba:	3254      	adds	r2, #84	; 0x54
 80064bc:	1852      	adds	r2, r2, r1
 80064be:	602b      	str	r3, [r5, #0]
 80064c0:	60eb      	str	r3, [r5, #12]
 80064c2:	60ab      	str	r3, [r5, #8]
 80064c4:	7013      	strb	r3, [r2, #0]
 80064c6:	65ab      	str	r3, [r5, #88]	; 0x58
 80064c8:	9b03      	ldr	r3, [sp, #12]
 80064ca:	2205      	movs	r2, #5
 80064cc:	7819      	ldrb	r1, [r3, #0]
 80064ce:	485d      	ldr	r0, [pc, #372]	; (8006644 <_vfiprintf_r+0x260>)
 80064d0:	f000 fbce 	bl	8006c70 <memchr>
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	1c5f      	adds	r7, r3, #1
 80064d8:	2800      	cmp	r0, #0
 80064da:	d120      	bne.n	800651e <_vfiprintf_r+0x13a>
 80064dc:	682a      	ldr	r2, [r5, #0]
 80064de:	06d3      	lsls	r3, r2, #27
 80064e0:	d504      	bpl.n	80064ec <_vfiprintf_r+0x108>
 80064e2:	2353      	movs	r3, #83	; 0x53
 80064e4:	a904      	add	r1, sp, #16
 80064e6:	185b      	adds	r3, r3, r1
 80064e8:	2120      	movs	r1, #32
 80064ea:	7019      	strb	r1, [r3, #0]
 80064ec:	0713      	lsls	r3, r2, #28
 80064ee:	d504      	bpl.n	80064fa <_vfiprintf_r+0x116>
 80064f0:	2353      	movs	r3, #83	; 0x53
 80064f2:	a904      	add	r1, sp, #16
 80064f4:	185b      	adds	r3, r3, r1
 80064f6:	212b      	movs	r1, #43	; 0x2b
 80064f8:	7019      	strb	r1, [r3, #0]
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006500:	d016      	beq.n	8006530 <_vfiprintf_r+0x14c>
 8006502:	2100      	movs	r1, #0
 8006504:	68eb      	ldr	r3, [r5, #12]
 8006506:	9f03      	ldr	r7, [sp, #12]
 8006508:	783a      	ldrb	r2, [r7, #0]
 800650a:	1c78      	adds	r0, r7, #1
 800650c:	3a30      	subs	r2, #48	; 0x30
 800650e:	4684      	mov	ip, r0
 8006510:	2a09      	cmp	r2, #9
 8006512:	d94f      	bls.n	80065b4 <_vfiprintf_r+0x1d0>
 8006514:	2900      	cmp	r1, #0
 8006516:	d111      	bne.n	800653c <_vfiprintf_r+0x158>
 8006518:	e017      	b.n	800654a <_vfiprintf_r+0x166>
 800651a:	3701      	adds	r7, #1
 800651c:	e7a9      	b.n	8006472 <_vfiprintf_r+0x8e>
 800651e:	4b49      	ldr	r3, [pc, #292]	; (8006644 <_vfiprintf_r+0x260>)
 8006520:	682a      	ldr	r2, [r5, #0]
 8006522:	1ac0      	subs	r0, r0, r3
 8006524:	2301      	movs	r3, #1
 8006526:	4083      	lsls	r3, r0
 8006528:	4313      	orrs	r3, r2
 800652a:	602b      	str	r3, [r5, #0]
 800652c:	9703      	str	r7, [sp, #12]
 800652e:	e7cb      	b.n	80064c8 <_vfiprintf_r+0xe4>
 8006530:	9b07      	ldr	r3, [sp, #28]
 8006532:	1d19      	adds	r1, r3, #4
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	9107      	str	r1, [sp, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	db01      	blt.n	8006540 <_vfiprintf_r+0x15c>
 800653c:	930b      	str	r3, [sp, #44]	; 0x2c
 800653e:	e004      	b.n	800654a <_vfiprintf_r+0x166>
 8006540:	425b      	negs	r3, r3
 8006542:	60eb      	str	r3, [r5, #12]
 8006544:	2302      	movs	r3, #2
 8006546:	4313      	orrs	r3, r2
 8006548:	602b      	str	r3, [r5, #0]
 800654a:	783b      	ldrb	r3, [r7, #0]
 800654c:	2b2e      	cmp	r3, #46	; 0x2e
 800654e:	d10a      	bne.n	8006566 <_vfiprintf_r+0x182>
 8006550:	787b      	ldrb	r3, [r7, #1]
 8006552:	2b2a      	cmp	r3, #42	; 0x2a
 8006554:	d137      	bne.n	80065c6 <_vfiprintf_r+0x1e2>
 8006556:	9b07      	ldr	r3, [sp, #28]
 8006558:	3702      	adds	r7, #2
 800655a:	1d1a      	adds	r2, r3, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	9207      	str	r2, [sp, #28]
 8006560:	2b00      	cmp	r3, #0
 8006562:	db2d      	blt.n	80065c0 <_vfiprintf_r+0x1dc>
 8006564:	9309      	str	r3, [sp, #36]	; 0x24
 8006566:	2203      	movs	r2, #3
 8006568:	7839      	ldrb	r1, [r7, #0]
 800656a:	4837      	ldr	r0, [pc, #220]	; (8006648 <_vfiprintf_r+0x264>)
 800656c:	f000 fb80 	bl	8006c70 <memchr>
 8006570:	2800      	cmp	r0, #0
 8006572:	d007      	beq.n	8006584 <_vfiprintf_r+0x1a0>
 8006574:	4b34      	ldr	r3, [pc, #208]	; (8006648 <_vfiprintf_r+0x264>)
 8006576:	682a      	ldr	r2, [r5, #0]
 8006578:	1ac0      	subs	r0, r0, r3
 800657a:	2340      	movs	r3, #64	; 0x40
 800657c:	4083      	lsls	r3, r0
 800657e:	4313      	orrs	r3, r2
 8006580:	3701      	adds	r7, #1
 8006582:	602b      	str	r3, [r5, #0]
 8006584:	7839      	ldrb	r1, [r7, #0]
 8006586:	1c7b      	adds	r3, r7, #1
 8006588:	2206      	movs	r2, #6
 800658a:	4830      	ldr	r0, [pc, #192]	; (800664c <_vfiprintf_r+0x268>)
 800658c:	9303      	str	r3, [sp, #12]
 800658e:	7629      	strb	r1, [r5, #24]
 8006590:	f000 fb6e 	bl	8006c70 <memchr>
 8006594:	2800      	cmp	r0, #0
 8006596:	d045      	beq.n	8006624 <_vfiprintf_r+0x240>
 8006598:	4b2d      	ldr	r3, [pc, #180]	; (8006650 <_vfiprintf_r+0x26c>)
 800659a:	2b00      	cmp	r3, #0
 800659c:	d127      	bne.n	80065ee <_vfiprintf_r+0x20a>
 800659e:	2207      	movs	r2, #7
 80065a0:	9b07      	ldr	r3, [sp, #28]
 80065a2:	3307      	adds	r3, #7
 80065a4:	4393      	bics	r3, r2
 80065a6:	3308      	adds	r3, #8
 80065a8:	9307      	str	r3, [sp, #28]
 80065aa:	696b      	ldr	r3, [r5, #20]
 80065ac:	9a04      	ldr	r2, [sp, #16]
 80065ae:	189b      	adds	r3, r3, r2
 80065b0:	616b      	str	r3, [r5, #20]
 80065b2:	e75d      	b.n	8006470 <_vfiprintf_r+0x8c>
 80065b4:	210a      	movs	r1, #10
 80065b6:	434b      	muls	r3, r1
 80065b8:	4667      	mov	r7, ip
 80065ba:	189b      	adds	r3, r3, r2
 80065bc:	3909      	subs	r1, #9
 80065be:	e7a3      	b.n	8006508 <_vfiprintf_r+0x124>
 80065c0:	2301      	movs	r3, #1
 80065c2:	425b      	negs	r3, r3
 80065c4:	e7ce      	b.n	8006564 <_vfiprintf_r+0x180>
 80065c6:	2300      	movs	r3, #0
 80065c8:	001a      	movs	r2, r3
 80065ca:	3701      	adds	r7, #1
 80065cc:	606b      	str	r3, [r5, #4]
 80065ce:	7839      	ldrb	r1, [r7, #0]
 80065d0:	1c78      	adds	r0, r7, #1
 80065d2:	3930      	subs	r1, #48	; 0x30
 80065d4:	4684      	mov	ip, r0
 80065d6:	2909      	cmp	r1, #9
 80065d8:	d903      	bls.n	80065e2 <_vfiprintf_r+0x1fe>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0c3      	beq.n	8006566 <_vfiprintf_r+0x182>
 80065de:	9209      	str	r2, [sp, #36]	; 0x24
 80065e0:	e7c1      	b.n	8006566 <_vfiprintf_r+0x182>
 80065e2:	230a      	movs	r3, #10
 80065e4:	435a      	muls	r2, r3
 80065e6:	4667      	mov	r7, ip
 80065e8:	1852      	adds	r2, r2, r1
 80065ea:	3b09      	subs	r3, #9
 80065ec:	e7ef      	b.n	80065ce <_vfiprintf_r+0x1ea>
 80065ee:	ab07      	add	r3, sp, #28
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	0022      	movs	r2, r4
 80065f4:	0029      	movs	r1, r5
 80065f6:	0030      	movs	r0, r6
 80065f8:	4b16      	ldr	r3, [pc, #88]	; (8006654 <_vfiprintf_r+0x270>)
 80065fa:	e000      	b.n	80065fe <_vfiprintf_r+0x21a>
 80065fc:	bf00      	nop
 80065fe:	9004      	str	r0, [sp, #16]
 8006600:	9b04      	ldr	r3, [sp, #16]
 8006602:	3301      	adds	r3, #1
 8006604:	d1d1      	bne.n	80065aa <_vfiprintf_r+0x1c6>
 8006606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006608:	07db      	lsls	r3, r3, #31
 800660a:	d405      	bmi.n	8006618 <_vfiprintf_r+0x234>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	059b      	lsls	r3, r3, #22
 8006610:	d402      	bmi.n	8006618 <_vfiprintf_r+0x234>
 8006612:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006614:	f7ff fd64 	bl	80060e0 <__retarget_lock_release_recursive>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	065b      	lsls	r3, r3, #25
 800661c:	d500      	bpl.n	8006620 <_vfiprintf_r+0x23c>
 800661e:	e70a      	b.n	8006436 <_vfiprintf_r+0x52>
 8006620:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006622:	e70a      	b.n	800643a <_vfiprintf_r+0x56>
 8006624:	ab07      	add	r3, sp, #28
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	0022      	movs	r2, r4
 800662a:	0029      	movs	r1, r5
 800662c:	0030      	movs	r0, r6
 800662e:	4b09      	ldr	r3, [pc, #36]	; (8006654 <_vfiprintf_r+0x270>)
 8006630:	f000 f882 	bl	8006738 <_printf_i>
 8006634:	e7e3      	b.n	80065fe <_vfiprintf_r+0x21a>
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	08006ee0 	.word	0x08006ee0
 800663c:	08006f00 	.word	0x08006f00
 8006640:	08006ec0 	.word	0x08006ec0
 8006644:	08006f20 	.word	0x08006f20
 8006648:	08006f26 	.word	0x08006f26
 800664c:	08006f2a 	.word	0x08006f2a
 8006650:	00000000 	.word	0x00000000
 8006654:	080063bf 	.word	0x080063bf

08006658 <_printf_common>:
 8006658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800665a:	0015      	movs	r5, r2
 800665c:	9301      	str	r3, [sp, #4]
 800665e:	688a      	ldr	r2, [r1, #8]
 8006660:	690b      	ldr	r3, [r1, #16]
 8006662:	000c      	movs	r4, r1
 8006664:	9000      	str	r0, [sp, #0]
 8006666:	4293      	cmp	r3, r2
 8006668:	da00      	bge.n	800666c <_printf_common+0x14>
 800666a:	0013      	movs	r3, r2
 800666c:	0022      	movs	r2, r4
 800666e:	602b      	str	r3, [r5, #0]
 8006670:	3243      	adds	r2, #67	; 0x43
 8006672:	7812      	ldrb	r2, [r2, #0]
 8006674:	2a00      	cmp	r2, #0
 8006676:	d001      	beq.n	800667c <_printf_common+0x24>
 8006678:	3301      	adds	r3, #1
 800667a:	602b      	str	r3, [r5, #0]
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	069b      	lsls	r3, r3, #26
 8006680:	d502      	bpl.n	8006688 <_printf_common+0x30>
 8006682:	682b      	ldr	r3, [r5, #0]
 8006684:	3302      	adds	r3, #2
 8006686:	602b      	str	r3, [r5, #0]
 8006688:	6822      	ldr	r2, [r4, #0]
 800668a:	2306      	movs	r3, #6
 800668c:	0017      	movs	r7, r2
 800668e:	401f      	ands	r7, r3
 8006690:	421a      	tst	r2, r3
 8006692:	d027      	beq.n	80066e4 <_printf_common+0x8c>
 8006694:	0023      	movs	r3, r4
 8006696:	3343      	adds	r3, #67	; 0x43
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	1e5a      	subs	r2, r3, #1
 800669c:	4193      	sbcs	r3, r2
 800669e:	6822      	ldr	r2, [r4, #0]
 80066a0:	0692      	lsls	r2, r2, #26
 80066a2:	d430      	bmi.n	8006706 <_printf_common+0xae>
 80066a4:	0022      	movs	r2, r4
 80066a6:	9901      	ldr	r1, [sp, #4]
 80066a8:	9800      	ldr	r0, [sp, #0]
 80066aa:	9e08      	ldr	r6, [sp, #32]
 80066ac:	3243      	adds	r2, #67	; 0x43
 80066ae:	47b0      	blx	r6
 80066b0:	1c43      	adds	r3, r0, #1
 80066b2:	d025      	beq.n	8006700 <_printf_common+0xa8>
 80066b4:	2306      	movs	r3, #6
 80066b6:	6820      	ldr	r0, [r4, #0]
 80066b8:	682a      	ldr	r2, [r5, #0]
 80066ba:	68e1      	ldr	r1, [r4, #12]
 80066bc:	2500      	movs	r5, #0
 80066be:	4003      	ands	r3, r0
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d103      	bne.n	80066cc <_printf_common+0x74>
 80066c4:	1a8d      	subs	r5, r1, r2
 80066c6:	43eb      	mvns	r3, r5
 80066c8:	17db      	asrs	r3, r3, #31
 80066ca:	401d      	ands	r5, r3
 80066cc:	68a3      	ldr	r3, [r4, #8]
 80066ce:	6922      	ldr	r2, [r4, #16]
 80066d0:	4293      	cmp	r3, r2
 80066d2:	dd01      	ble.n	80066d8 <_printf_common+0x80>
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	18ed      	adds	r5, r5, r3
 80066d8:	2700      	movs	r7, #0
 80066da:	42bd      	cmp	r5, r7
 80066dc:	d120      	bne.n	8006720 <_printf_common+0xc8>
 80066de:	2000      	movs	r0, #0
 80066e0:	e010      	b.n	8006704 <_printf_common+0xac>
 80066e2:	3701      	adds	r7, #1
 80066e4:	68e3      	ldr	r3, [r4, #12]
 80066e6:	682a      	ldr	r2, [r5, #0]
 80066e8:	1a9b      	subs	r3, r3, r2
 80066ea:	42bb      	cmp	r3, r7
 80066ec:	ddd2      	ble.n	8006694 <_printf_common+0x3c>
 80066ee:	0022      	movs	r2, r4
 80066f0:	2301      	movs	r3, #1
 80066f2:	9901      	ldr	r1, [sp, #4]
 80066f4:	9800      	ldr	r0, [sp, #0]
 80066f6:	9e08      	ldr	r6, [sp, #32]
 80066f8:	3219      	adds	r2, #25
 80066fa:	47b0      	blx	r6
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d1f0      	bne.n	80066e2 <_printf_common+0x8a>
 8006700:	2001      	movs	r0, #1
 8006702:	4240      	negs	r0, r0
 8006704:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006706:	2030      	movs	r0, #48	; 0x30
 8006708:	18e1      	adds	r1, r4, r3
 800670a:	3143      	adds	r1, #67	; 0x43
 800670c:	7008      	strb	r0, [r1, #0]
 800670e:	0021      	movs	r1, r4
 8006710:	1c5a      	adds	r2, r3, #1
 8006712:	3145      	adds	r1, #69	; 0x45
 8006714:	7809      	ldrb	r1, [r1, #0]
 8006716:	18a2      	adds	r2, r4, r2
 8006718:	3243      	adds	r2, #67	; 0x43
 800671a:	3302      	adds	r3, #2
 800671c:	7011      	strb	r1, [r2, #0]
 800671e:	e7c1      	b.n	80066a4 <_printf_common+0x4c>
 8006720:	0022      	movs	r2, r4
 8006722:	2301      	movs	r3, #1
 8006724:	9901      	ldr	r1, [sp, #4]
 8006726:	9800      	ldr	r0, [sp, #0]
 8006728:	9e08      	ldr	r6, [sp, #32]
 800672a:	321a      	adds	r2, #26
 800672c:	47b0      	blx	r6
 800672e:	1c43      	adds	r3, r0, #1
 8006730:	d0e6      	beq.n	8006700 <_printf_common+0xa8>
 8006732:	3701      	adds	r7, #1
 8006734:	e7d1      	b.n	80066da <_printf_common+0x82>
	...

08006738 <_printf_i>:
 8006738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800673a:	b08b      	sub	sp, #44	; 0x2c
 800673c:	9206      	str	r2, [sp, #24]
 800673e:	000a      	movs	r2, r1
 8006740:	3243      	adds	r2, #67	; 0x43
 8006742:	9307      	str	r3, [sp, #28]
 8006744:	9005      	str	r0, [sp, #20]
 8006746:	9204      	str	r2, [sp, #16]
 8006748:	7e0a      	ldrb	r2, [r1, #24]
 800674a:	000c      	movs	r4, r1
 800674c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800674e:	2a78      	cmp	r2, #120	; 0x78
 8006750:	d807      	bhi.n	8006762 <_printf_i+0x2a>
 8006752:	2a62      	cmp	r2, #98	; 0x62
 8006754:	d809      	bhi.n	800676a <_printf_i+0x32>
 8006756:	2a00      	cmp	r2, #0
 8006758:	d100      	bne.n	800675c <_printf_i+0x24>
 800675a:	e0c1      	b.n	80068e0 <_printf_i+0x1a8>
 800675c:	2a58      	cmp	r2, #88	; 0x58
 800675e:	d100      	bne.n	8006762 <_printf_i+0x2a>
 8006760:	e08c      	b.n	800687c <_printf_i+0x144>
 8006762:	0026      	movs	r6, r4
 8006764:	3642      	adds	r6, #66	; 0x42
 8006766:	7032      	strb	r2, [r6, #0]
 8006768:	e022      	b.n	80067b0 <_printf_i+0x78>
 800676a:	0010      	movs	r0, r2
 800676c:	3863      	subs	r0, #99	; 0x63
 800676e:	2815      	cmp	r0, #21
 8006770:	d8f7      	bhi.n	8006762 <_printf_i+0x2a>
 8006772:	f7f9 fcc9 	bl	8000108 <__gnu_thumb1_case_shi>
 8006776:	0016      	.short	0x0016
 8006778:	fff6001f 	.word	0xfff6001f
 800677c:	fff6fff6 	.word	0xfff6fff6
 8006780:	001ffff6 	.word	0x001ffff6
 8006784:	fff6fff6 	.word	0xfff6fff6
 8006788:	fff6fff6 	.word	0xfff6fff6
 800678c:	003600a8 	.word	0x003600a8
 8006790:	fff6009a 	.word	0xfff6009a
 8006794:	00b9fff6 	.word	0x00b9fff6
 8006798:	0036fff6 	.word	0x0036fff6
 800679c:	fff6fff6 	.word	0xfff6fff6
 80067a0:	009e      	.short	0x009e
 80067a2:	0026      	movs	r6, r4
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	3642      	adds	r6, #66	; 0x42
 80067a8:	1d11      	adds	r1, r2, #4
 80067aa:	6019      	str	r1, [r3, #0]
 80067ac:	6813      	ldr	r3, [r2, #0]
 80067ae:	7033      	strb	r3, [r6, #0]
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0a7      	b.n	8006904 <_printf_i+0x1cc>
 80067b4:	6808      	ldr	r0, [r1, #0]
 80067b6:	6819      	ldr	r1, [r3, #0]
 80067b8:	1d0a      	adds	r2, r1, #4
 80067ba:	0605      	lsls	r5, r0, #24
 80067bc:	d50b      	bpl.n	80067d6 <_printf_i+0x9e>
 80067be:	680d      	ldr	r5, [r1, #0]
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	2d00      	cmp	r5, #0
 80067c4:	da03      	bge.n	80067ce <_printf_i+0x96>
 80067c6:	232d      	movs	r3, #45	; 0x2d
 80067c8:	9a04      	ldr	r2, [sp, #16]
 80067ca:	426d      	negs	r5, r5
 80067cc:	7013      	strb	r3, [r2, #0]
 80067ce:	4b61      	ldr	r3, [pc, #388]	; (8006954 <_printf_i+0x21c>)
 80067d0:	270a      	movs	r7, #10
 80067d2:	9303      	str	r3, [sp, #12]
 80067d4:	e01b      	b.n	800680e <_printf_i+0xd6>
 80067d6:	680d      	ldr	r5, [r1, #0]
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	0641      	lsls	r1, r0, #25
 80067dc:	d5f1      	bpl.n	80067c2 <_printf_i+0x8a>
 80067de:	b22d      	sxth	r5, r5
 80067e0:	e7ef      	b.n	80067c2 <_printf_i+0x8a>
 80067e2:	680d      	ldr	r5, [r1, #0]
 80067e4:	6819      	ldr	r1, [r3, #0]
 80067e6:	1d08      	adds	r0, r1, #4
 80067e8:	6018      	str	r0, [r3, #0]
 80067ea:	062e      	lsls	r6, r5, #24
 80067ec:	d501      	bpl.n	80067f2 <_printf_i+0xba>
 80067ee:	680d      	ldr	r5, [r1, #0]
 80067f0:	e003      	b.n	80067fa <_printf_i+0xc2>
 80067f2:	066d      	lsls	r5, r5, #25
 80067f4:	d5fb      	bpl.n	80067ee <_printf_i+0xb6>
 80067f6:	680d      	ldr	r5, [r1, #0]
 80067f8:	b2ad      	uxth	r5, r5
 80067fa:	4b56      	ldr	r3, [pc, #344]	; (8006954 <_printf_i+0x21c>)
 80067fc:	2708      	movs	r7, #8
 80067fe:	9303      	str	r3, [sp, #12]
 8006800:	2a6f      	cmp	r2, #111	; 0x6f
 8006802:	d000      	beq.n	8006806 <_printf_i+0xce>
 8006804:	3702      	adds	r7, #2
 8006806:	0023      	movs	r3, r4
 8006808:	2200      	movs	r2, #0
 800680a:	3343      	adds	r3, #67	; 0x43
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	6863      	ldr	r3, [r4, #4]
 8006810:	60a3      	str	r3, [r4, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	db03      	blt.n	800681e <_printf_i+0xe6>
 8006816:	2204      	movs	r2, #4
 8006818:	6821      	ldr	r1, [r4, #0]
 800681a:	4391      	bics	r1, r2
 800681c:	6021      	str	r1, [r4, #0]
 800681e:	2d00      	cmp	r5, #0
 8006820:	d102      	bne.n	8006828 <_printf_i+0xf0>
 8006822:	9e04      	ldr	r6, [sp, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00c      	beq.n	8006842 <_printf_i+0x10a>
 8006828:	9e04      	ldr	r6, [sp, #16]
 800682a:	0028      	movs	r0, r5
 800682c:	0039      	movs	r1, r7
 800682e:	f7f9 fcfb 	bl	8000228 <__aeabi_uidivmod>
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	3e01      	subs	r6, #1
 8006836:	5c5b      	ldrb	r3, [r3, r1]
 8006838:	7033      	strb	r3, [r6, #0]
 800683a:	002b      	movs	r3, r5
 800683c:	0005      	movs	r5, r0
 800683e:	429f      	cmp	r7, r3
 8006840:	d9f3      	bls.n	800682a <_printf_i+0xf2>
 8006842:	2f08      	cmp	r7, #8
 8006844:	d109      	bne.n	800685a <_printf_i+0x122>
 8006846:	6823      	ldr	r3, [r4, #0]
 8006848:	07db      	lsls	r3, r3, #31
 800684a:	d506      	bpl.n	800685a <_printf_i+0x122>
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	6922      	ldr	r2, [r4, #16]
 8006850:	4293      	cmp	r3, r2
 8006852:	dc02      	bgt.n	800685a <_printf_i+0x122>
 8006854:	2330      	movs	r3, #48	; 0x30
 8006856:	3e01      	subs	r6, #1
 8006858:	7033      	strb	r3, [r6, #0]
 800685a:	9b04      	ldr	r3, [sp, #16]
 800685c:	1b9b      	subs	r3, r3, r6
 800685e:	6123      	str	r3, [r4, #16]
 8006860:	9b07      	ldr	r3, [sp, #28]
 8006862:	0021      	movs	r1, r4
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	9805      	ldr	r0, [sp, #20]
 8006868:	9b06      	ldr	r3, [sp, #24]
 800686a:	aa09      	add	r2, sp, #36	; 0x24
 800686c:	f7ff fef4 	bl	8006658 <_printf_common>
 8006870:	1c43      	adds	r3, r0, #1
 8006872:	d14c      	bne.n	800690e <_printf_i+0x1d6>
 8006874:	2001      	movs	r0, #1
 8006876:	4240      	negs	r0, r0
 8006878:	b00b      	add	sp, #44	; 0x2c
 800687a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687c:	3145      	adds	r1, #69	; 0x45
 800687e:	700a      	strb	r2, [r1, #0]
 8006880:	4a34      	ldr	r2, [pc, #208]	; (8006954 <_printf_i+0x21c>)
 8006882:	9203      	str	r2, [sp, #12]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	6821      	ldr	r1, [r4, #0]
 8006888:	ca20      	ldmia	r2!, {r5}
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	0608      	lsls	r0, r1, #24
 800688e:	d516      	bpl.n	80068be <_printf_i+0x186>
 8006890:	07cb      	lsls	r3, r1, #31
 8006892:	d502      	bpl.n	800689a <_printf_i+0x162>
 8006894:	2320      	movs	r3, #32
 8006896:	4319      	orrs	r1, r3
 8006898:	6021      	str	r1, [r4, #0]
 800689a:	2710      	movs	r7, #16
 800689c:	2d00      	cmp	r5, #0
 800689e:	d1b2      	bne.n	8006806 <_printf_i+0xce>
 80068a0:	2320      	movs	r3, #32
 80068a2:	6822      	ldr	r2, [r4, #0]
 80068a4:	439a      	bics	r2, r3
 80068a6:	6022      	str	r2, [r4, #0]
 80068a8:	e7ad      	b.n	8006806 <_printf_i+0xce>
 80068aa:	2220      	movs	r2, #32
 80068ac:	6809      	ldr	r1, [r1, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	6022      	str	r2, [r4, #0]
 80068b2:	0022      	movs	r2, r4
 80068b4:	2178      	movs	r1, #120	; 0x78
 80068b6:	3245      	adds	r2, #69	; 0x45
 80068b8:	7011      	strb	r1, [r2, #0]
 80068ba:	4a27      	ldr	r2, [pc, #156]	; (8006958 <_printf_i+0x220>)
 80068bc:	e7e1      	b.n	8006882 <_printf_i+0x14a>
 80068be:	0648      	lsls	r0, r1, #25
 80068c0:	d5e6      	bpl.n	8006890 <_printf_i+0x158>
 80068c2:	b2ad      	uxth	r5, r5
 80068c4:	e7e4      	b.n	8006890 <_printf_i+0x158>
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	680d      	ldr	r5, [r1, #0]
 80068ca:	1d10      	adds	r0, r2, #4
 80068cc:	6949      	ldr	r1, [r1, #20]
 80068ce:	6018      	str	r0, [r3, #0]
 80068d0:	6813      	ldr	r3, [r2, #0]
 80068d2:	062e      	lsls	r6, r5, #24
 80068d4:	d501      	bpl.n	80068da <_printf_i+0x1a2>
 80068d6:	6019      	str	r1, [r3, #0]
 80068d8:	e002      	b.n	80068e0 <_printf_i+0x1a8>
 80068da:	066d      	lsls	r5, r5, #25
 80068dc:	d5fb      	bpl.n	80068d6 <_printf_i+0x19e>
 80068de:	8019      	strh	r1, [r3, #0]
 80068e0:	2300      	movs	r3, #0
 80068e2:	9e04      	ldr	r6, [sp, #16]
 80068e4:	6123      	str	r3, [r4, #16]
 80068e6:	e7bb      	b.n	8006860 <_printf_i+0x128>
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	1d11      	adds	r1, r2, #4
 80068ec:	6019      	str	r1, [r3, #0]
 80068ee:	6816      	ldr	r6, [r2, #0]
 80068f0:	2100      	movs	r1, #0
 80068f2:	0030      	movs	r0, r6
 80068f4:	6862      	ldr	r2, [r4, #4]
 80068f6:	f000 f9bb 	bl	8006c70 <memchr>
 80068fa:	2800      	cmp	r0, #0
 80068fc:	d001      	beq.n	8006902 <_printf_i+0x1ca>
 80068fe:	1b80      	subs	r0, r0, r6
 8006900:	6060      	str	r0, [r4, #4]
 8006902:	6863      	ldr	r3, [r4, #4]
 8006904:	6123      	str	r3, [r4, #16]
 8006906:	2300      	movs	r3, #0
 8006908:	9a04      	ldr	r2, [sp, #16]
 800690a:	7013      	strb	r3, [r2, #0]
 800690c:	e7a8      	b.n	8006860 <_printf_i+0x128>
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	0032      	movs	r2, r6
 8006912:	9906      	ldr	r1, [sp, #24]
 8006914:	9805      	ldr	r0, [sp, #20]
 8006916:	9d07      	ldr	r5, [sp, #28]
 8006918:	47a8      	blx	r5
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	d0aa      	beq.n	8006874 <_printf_i+0x13c>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	079b      	lsls	r3, r3, #30
 8006922:	d415      	bmi.n	8006950 <_printf_i+0x218>
 8006924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006926:	68e0      	ldr	r0, [r4, #12]
 8006928:	4298      	cmp	r0, r3
 800692a:	daa5      	bge.n	8006878 <_printf_i+0x140>
 800692c:	0018      	movs	r0, r3
 800692e:	e7a3      	b.n	8006878 <_printf_i+0x140>
 8006930:	0022      	movs	r2, r4
 8006932:	2301      	movs	r3, #1
 8006934:	9906      	ldr	r1, [sp, #24]
 8006936:	9805      	ldr	r0, [sp, #20]
 8006938:	9e07      	ldr	r6, [sp, #28]
 800693a:	3219      	adds	r2, #25
 800693c:	47b0      	blx	r6
 800693e:	1c43      	adds	r3, r0, #1
 8006940:	d098      	beq.n	8006874 <_printf_i+0x13c>
 8006942:	3501      	adds	r5, #1
 8006944:	68e3      	ldr	r3, [r4, #12]
 8006946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006948:	1a9b      	subs	r3, r3, r2
 800694a:	42ab      	cmp	r3, r5
 800694c:	dcf0      	bgt.n	8006930 <_printf_i+0x1f8>
 800694e:	e7e9      	b.n	8006924 <_printf_i+0x1ec>
 8006950:	2500      	movs	r5, #0
 8006952:	e7f7      	b.n	8006944 <_printf_i+0x20c>
 8006954:	08006f31 	.word	0x08006f31
 8006958:	08006f42 	.word	0x08006f42

0800695c <_sbrk_r>:
 800695c:	2300      	movs	r3, #0
 800695e:	b570      	push	{r4, r5, r6, lr}
 8006960:	4d06      	ldr	r5, [pc, #24]	; (800697c <_sbrk_r+0x20>)
 8006962:	0004      	movs	r4, r0
 8006964:	0008      	movs	r0, r1
 8006966:	602b      	str	r3, [r5, #0]
 8006968:	f7fa ff0c 	bl	8001784 <_sbrk>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d103      	bne.n	8006978 <_sbrk_r+0x1c>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d000      	beq.n	8006978 <_sbrk_r+0x1c>
 8006976:	6023      	str	r3, [r4, #0]
 8006978:	bd70      	pop	{r4, r5, r6, pc}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	200002a4 	.word	0x200002a4

08006980 <__sread>:
 8006980:	b570      	push	{r4, r5, r6, lr}
 8006982:	000c      	movs	r4, r1
 8006984:	250e      	movs	r5, #14
 8006986:	5f49      	ldrsh	r1, [r1, r5]
 8006988:	f000 f98e 	bl	8006ca8 <_read_r>
 800698c:	2800      	cmp	r0, #0
 800698e:	db03      	blt.n	8006998 <__sread+0x18>
 8006990:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006992:	181b      	adds	r3, r3, r0
 8006994:	6563      	str	r3, [r4, #84]	; 0x54
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	4a02      	ldr	r2, [pc, #8]	; (80069a4 <__sread+0x24>)
 800699c:	4013      	ands	r3, r2
 800699e:	81a3      	strh	r3, [r4, #12]
 80069a0:	e7f9      	b.n	8006996 <__sread+0x16>
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	ffffefff 	.word	0xffffefff

080069a8 <__swrite>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	001f      	movs	r7, r3
 80069ac:	898b      	ldrh	r3, [r1, #12]
 80069ae:	0005      	movs	r5, r0
 80069b0:	000c      	movs	r4, r1
 80069b2:	0016      	movs	r6, r2
 80069b4:	05db      	lsls	r3, r3, #23
 80069b6:	d505      	bpl.n	80069c4 <__swrite+0x1c>
 80069b8:	230e      	movs	r3, #14
 80069ba:	5ec9      	ldrsh	r1, [r1, r3]
 80069bc:	2200      	movs	r2, #0
 80069be:	2302      	movs	r3, #2
 80069c0:	f000 f942 	bl	8006c48 <_lseek_r>
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	4a05      	ldr	r2, [pc, #20]	; (80069dc <__swrite+0x34>)
 80069c8:	0028      	movs	r0, r5
 80069ca:	4013      	ands	r3, r2
 80069cc:	81a3      	strh	r3, [r4, #12]
 80069ce:	0032      	movs	r2, r6
 80069d0:	230e      	movs	r3, #14
 80069d2:	5ee1      	ldrsh	r1, [r4, r3]
 80069d4:	003b      	movs	r3, r7
 80069d6:	f000 f875 	bl	8006ac4 <_write_r>
 80069da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069dc:	ffffefff 	.word	0xffffefff

080069e0 <__sseek>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	000c      	movs	r4, r1
 80069e4:	250e      	movs	r5, #14
 80069e6:	5f49      	ldrsh	r1, [r1, r5]
 80069e8:	f000 f92e 	bl	8006c48 <_lseek_r>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	1c42      	adds	r2, r0, #1
 80069f0:	d103      	bne.n	80069fa <__sseek+0x1a>
 80069f2:	4a05      	ldr	r2, [pc, #20]	; (8006a08 <__sseek+0x28>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	bd70      	pop	{r4, r5, r6, pc}
 80069fa:	2280      	movs	r2, #128	; 0x80
 80069fc:	0152      	lsls	r2, r2, #5
 80069fe:	4313      	orrs	r3, r2
 8006a00:	81a3      	strh	r3, [r4, #12]
 8006a02:	6560      	str	r0, [r4, #84]	; 0x54
 8006a04:	e7f8      	b.n	80069f8 <__sseek+0x18>
 8006a06:	46c0      	nop			; (mov r8, r8)
 8006a08:	ffffefff 	.word	0xffffefff

08006a0c <__sclose>:
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	230e      	movs	r3, #14
 8006a10:	5ec9      	ldrsh	r1, [r1, r3]
 8006a12:	f000 f8e3 	bl	8006bdc <_close_r>
 8006a16:	bd10      	pop	{r4, pc}

08006a18 <__swbuf_r>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	0005      	movs	r5, r0
 8006a1c:	000e      	movs	r6, r1
 8006a1e:	0014      	movs	r4, r2
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d004      	beq.n	8006a2e <__swbuf_r+0x16>
 8006a24:	6983      	ldr	r3, [r0, #24]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <__swbuf_r+0x16>
 8006a2a:	f7ff fab7 	bl	8005f9c <__sinit>
 8006a2e:	4b22      	ldr	r3, [pc, #136]	; (8006ab8 <__swbuf_r+0xa0>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	d12e      	bne.n	8006a92 <__swbuf_r+0x7a>
 8006a34:	686c      	ldr	r4, [r5, #4]
 8006a36:	69a3      	ldr	r3, [r4, #24]
 8006a38:	60a3      	str	r3, [r4, #8]
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	071b      	lsls	r3, r3, #28
 8006a3e:	d532      	bpl.n	8006aa6 <__swbuf_r+0x8e>
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d02f      	beq.n	8006aa6 <__swbuf_r+0x8e>
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	6922      	ldr	r2, [r4, #16]
 8006a4a:	b2f7      	uxtb	r7, r6
 8006a4c:	1a98      	subs	r0, r3, r2
 8006a4e:	6963      	ldr	r3, [r4, #20]
 8006a50:	b2f6      	uxtb	r6, r6
 8006a52:	4283      	cmp	r3, r0
 8006a54:	dc05      	bgt.n	8006a62 <__swbuf_r+0x4a>
 8006a56:	0021      	movs	r1, r4
 8006a58:	0028      	movs	r0, r5
 8006a5a:	f7ff f9fd 	bl	8005e58 <_fflush_r>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d127      	bne.n	8006ab2 <__swbuf_r+0x9a>
 8006a62:	68a3      	ldr	r3, [r4, #8]
 8006a64:	3001      	adds	r0, #1
 8006a66:	3b01      	subs	r3, #1
 8006a68:	60a3      	str	r3, [r4, #8]
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	6022      	str	r2, [r4, #0]
 8006a70:	701f      	strb	r7, [r3, #0]
 8006a72:	6963      	ldr	r3, [r4, #20]
 8006a74:	4283      	cmp	r3, r0
 8006a76:	d004      	beq.n	8006a82 <__swbuf_r+0x6a>
 8006a78:	89a3      	ldrh	r3, [r4, #12]
 8006a7a:	07db      	lsls	r3, r3, #31
 8006a7c:	d507      	bpl.n	8006a8e <__swbuf_r+0x76>
 8006a7e:	2e0a      	cmp	r6, #10
 8006a80:	d105      	bne.n	8006a8e <__swbuf_r+0x76>
 8006a82:	0021      	movs	r1, r4
 8006a84:	0028      	movs	r0, r5
 8006a86:	f7ff f9e7 	bl	8005e58 <_fflush_r>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d111      	bne.n	8006ab2 <__swbuf_r+0x9a>
 8006a8e:	0030      	movs	r0, r6
 8006a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <__swbuf_r+0xa4>)
 8006a94:	429c      	cmp	r4, r3
 8006a96:	d101      	bne.n	8006a9c <__swbuf_r+0x84>
 8006a98:	68ac      	ldr	r4, [r5, #8]
 8006a9a:	e7cc      	b.n	8006a36 <__swbuf_r+0x1e>
 8006a9c:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <__swbuf_r+0xa8>)
 8006a9e:	429c      	cmp	r4, r3
 8006aa0:	d1c9      	bne.n	8006a36 <__swbuf_r+0x1e>
 8006aa2:	68ec      	ldr	r4, [r5, #12]
 8006aa4:	e7c7      	b.n	8006a36 <__swbuf_r+0x1e>
 8006aa6:	0021      	movs	r1, r4
 8006aa8:	0028      	movs	r0, r5
 8006aaa:	f000 f81f 	bl	8006aec <__swsetup_r>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d0c9      	beq.n	8006a46 <__swbuf_r+0x2e>
 8006ab2:	2601      	movs	r6, #1
 8006ab4:	4276      	negs	r6, r6
 8006ab6:	e7ea      	b.n	8006a8e <__swbuf_r+0x76>
 8006ab8:	08006ee0 	.word	0x08006ee0
 8006abc:	08006f00 	.word	0x08006f00
 8006ac0:	08006ec0 	.word	0x08006ec0

08006ac4 <_write_r>:
 8006ac4:	b570      	push	{r4, r5, r6, lr}
 8006ac6:	0004      	movs	r4, r0
 8006ac8:	0008      	movs	r0, r1
 8006aca:	0011      	movs	r1, r2
 8006acc:	001a      	movs	r2, r3
 8006ace:	2300      	movs	r3, #0
 8006ad0:	4d05      	ldr	r5, [pc, #20]	; (8006ae8 <_write_r+0x24>)
 8006ad2:	602b      	str	r3, [r5, #0]
 8006ad4:	f7f9 fd20 	bl	8000518 <_write>
 8006ad8:	1c43      	adds	r3, r0, #1
 8006ada:	d103      	bne.n	8006ae4 <_write_r+0x20>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d000      	beq.n	8006ae4 <_write_r+0x20>
 8006ae2:	6023      	str	r3, [r4, #0]
 8006ae4:	bd70      	pop	{r4, r5, r6, pc}
 8006ae6:	46c0      	nop			; (mov r8, r8)
 8006ae8:	200002a4 	.word	0x200002a4

08006aec <__swsetup_r>:
 8006aec:	4b37      	ldr	r3, [pc, #220]	; (8006bcc <__swsetup_r+0xe0>)
 8006aee:	b570      	push	{r4, r5, r6, lr}
 8006af0:	681d      	ldr	r5, [r3, #0]
 8006af2:	0006      	movs	r6, r0
 8006af4:	000c      	movs	r4, r1
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	d005      	beq.n	8006b06 <__swsetup_r+0x1a>
 8006afa:	69ab      	ldr	r3, [r5, #24]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d102      	bne.n	8006b06 <__swsetup_r+0x1a>
 8006b00:	0028      	movs	r0, r5
 8006b02:	f7ff fa4b 	bl	8005f9c <__sinit>
 8006b06:	4b32      	ldr	r3, [pc, #200]	; (8006bd0 <__swsetup_r+0xe4>)
 8006b08:	429c      	cmp	r4, r3
 8006b0a:	d10f      	bne.n	8006b2c <__swsetup_r+0x40>
 8006b0c:	686c      	ldr	r4, [r5, #4]
 8006b0e:	230c      	movs	r3, #12
 8006b10:	5ee2      	ldrsh	r2, [r4, r3]
 8006b12:	b293      	uxth	r3, r2
 8006b14:	0711      	lsls	r1, r2, #28
 8006b16:	d42d      	bmi.n	8006b74 <__swsetup_r+0x88>
 8006b18:	06d9      	lsls	r1, r3, #27
 8006b1a:	d411      	bmi.n	8006b40 <__swsetup_r+0x54>
 8006b1c:	2309      	movs	r3, #9
 8006b1e:	2001      	movs	r0, #1
 8006b20:	6033      	str	r3, [r6, #0]
 8006b22:	3337      	adds	r3, #55	; 0x37
 8006b24:	4313      	orrs	r3, r2
 8006b26:	81a3      	strh	r3, [r4, #12]
 8006b28:	4240      	negs	r0, r0
 8006b2a:	bd70      	pop	{r4, r5, r6, pc}
 8006b2c:	4b29      	ldr	r3, [pc, #164]	; (8006bd4 <__swsetup_r+0xe8>)
 8006b2e:	429c      	cmp	r4, r3
 8006b30:	d101      	bne.n	8006b36 <__swsetup_r+0x4a>
 8006b32:	68ac      	ldr	r4, [r5, #8]
 8006b34:	e7eb      	b.n	8006b0e <__swsetup_r+0x22>
 8006b36:	4b28      	ldr	r3, [pc, #160]	; (8006bd8 <__swsetup_r+0xec>)
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	d1e8      	bne.n	8006b0e <__swsetup_r+0x22>
 8006b3c:	68ec      	ldr	r4, [r5, #12]
 8006b3e:	e7e6      	b.n	8006b0e <__swsetup_r+0x22>
 8006b40:	075b      	lsls	r3, r3, #29
 8006b42:	d513      	bpl.n	8006b6c <__swsetup_r+0x80>
 8006b44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b46:	2900      	cmp	r1, #0
 8006b48:	d008      	beq.n	8006b5c <__swsetup_r+0x70>
 8006b4a:	0023      	movs	r3, r4
 8006b4c:	3344      	adds	r3, #68	; 0x44
 8006b4e:	4299      	cmp	r1, r3
 8006b50:	d002      	beq.n	8006b58 <__swsetup_r+0x6c>
 8006b52:	0030      	movs	r0, r6
 8006b54:	f7ff fb3c 	bl	80061d0 <_free_r>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	6363      	str	r3, [r4, #52]	; 0x34
 8006b5c:	2224      	movs	r2, #36	; 0x24
 8006b5e:	89a3      	ldrh	r3, [r4, #12]
 8006b60:	4393      	bics	r3, r2
 8006b62:	81a3      	strh	r3, [r4, #12]
 8006b64:	2300      	movs	r3, #0
 8006b66:	6063      	str	r3, [r4, #4]
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	6023      	str	r3, [r4, #0]
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	89a2      	ldrh	r2, [r4, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	81a3      	strh	r3, [r4, #12]
 8006b74:	6923      	ldr	r3, [r4, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10b      	bne.n	8006b92 <__swsetup_r+0xa6>
 8006b7a:	21a0      	movs	r1, #160	; 0xa0
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	0089      	lsls	r1, r1, #2
 8006b82:	0092      	lsls	r2, r2, #2
 8006b84:	400b      	ands	r3, r1
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d003      	beq.n	8006b92 <__swsetup_r+0xa6>
 8006b8a:	0021      	movs	r1, r4
 8006b8c:	0030      	movs	r0, r6
 8006b8e:	f7ff fad1 	bl	8006134 <__smakebuf_r>
 8006b92:	220c      	movs	r2, #12
 8006b94:	5ea3      	ldrsh	r3, [r4, r2]
 8006b96:	2001      	movs	r0, #1
 8006b98:	001a      	movs	r2, r3
 8006b9a:	b299      	uxth	r1, r3
 8006b9c:	4002      	ands	r2, r0
 8006b9e:	4203      	tst	r3, r0
 8006ba0:	d00f      	beq.n	8006bc2 <__swsetup_r+0xd6>
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	60a2      	str	r2, [r4, #8]
 8006ba6:	6962      	ldr	r2, [r4, #20]
 8006ba8:	4252      	negs	r2, r2
 8006baa:	61a2      	str	r2, [r4, #24]
 8006bac:	2000      	movs	r0, #0
 8006bae:	6922      	ldr	r2, [r4, #16]
 8006bb0:	4282      	cmp	r2, r0
 8006bb2:	d1ba      	bne.n	8006b2a <__swsetup_r+0x3e>
 8006bb4:	060a      	lsls	r2, r1, #24
 8006bb6:	d5b8      	bpl.n	8006b2a <__swsetup_r+0x3e>
 8006bb8:	2240      	movs	r2, #64	; 0x40
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	3801      	subs	r0, #1
 8006bc0:	e7b3      	b.n	8006b2a <__swsetup_r+0x3e>
 8006bc2:	0788      	lsls	r0, r1, #30
 8006bc4:	d400      	bmi.n	8006bc8 <__swsetup_r+0xdc>
 8006bc6:	6962      	ldr	r2, [r4, #20]
 8006bc8:	60a2      	str	r2, [r4, #8]
 8006bca:	e7ef      	b.n	8006bac <__swsetup_r+0xc0>
 8006bcc:	2000000c 	.word	0x2000000c
 8006bd0:	08006ee0 	.word	0x08006ee0
 8006bd4:	08006f00 	.word	0x08006f00
 8006bd8:	08006ec0 	.word	0x08006ec0

08006bdc <_close_r>:
 8006bdc:	2300      	movs	r3, #0
 8006bde:	b570      	push	{r4, r5, r6, lr}
 8006be0:	4d06      	ldr	r5, [pc, #24]	; (8006bfc <_close_r+0x20>)
 8006be2:	0004      	movs	r4, r0
 8006be4:	0008      	movs	r0, r1
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	f7f9 fcc4 	bl	8000574 <_close>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d103      	bne.n	8006bf8 <_close_r+0x1c>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d000      	beq.n	8006bf8 <_close_r+0x1c>
 8006bf6:	6023      	str	r3, [r4, #0]
 8006bf8:	bd70      	pop	{r4, r5, r6, pc}
 8006bfa:	46c0      	nop			; (mov r8, r8)
 8006bfc:	200002a4 	.word	0x200002a4

08006c00 <_fstat_r>:
 8006c00:	2300      	movs	r3, #0
 8006c02:	b570      	push	{r4, r5, r6, lr}
 8006c04:	4d06      	ldr	r5, [pc, #24]	; (8006c20 <_fstat_r+0x20>)
 8006c06:	0004      	movs	r4, r0
 8006c08:	0008      	movs	r0, r1
 8006c0a:	0011      	movs	r1, r2
 8006c0c:	602b      	str	r3, [r5, #0]
 8006c0e:	f7f9 fd03 	bl	8000618 <_fstat>
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	d103      	bne.n	8006c1e <_fstat_r+0x1e>
 8006c16:	682b      	ldr	r3, [r5, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d000      	beq.n	8006c1e <_fstat_r+0x1e>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
 8006c20:	200002a4 	.word	0x200002a4

08006c24 <_isatty_r>:
 8006c24:	2300      	movs	r3, #0
 8006c26:	b570      	push	{r4, r5, r6, lr}
 8006c28:	4d06      	ldr	r5, [pc, #24]	; (8006c44 <_isatty_r+0x20>)
 8006c2a:	0004      	movs	r4, r0
 8006c2c:	0008      	movs	r0, r1
 8006c2e:	602b      	str	r3, [r5, #0]
 8006c30:	f7f9 fc5c 	bl	80004ec <_isatty>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d103      	bne.n	8006c40 <_isatty_r+0x1c>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d000      	beq.n	8006c40 <_isatty_r+0x1c>
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	bd70      	pop	{r4, r5, r6, pc}
 8006c42:	46c0      	nop			; (mov r8, r8)
 8006c44:	200002a4 	.word	0x200002a4

08006c48 <_lseek_r>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	0004      	movs	r4, r0
 8006c4c:	0008      	movs	r0, r1
 8006c4e:	0011      	movs	r1, r2
 8006c50:	001a      	movs	r2, r3
 8006c52:	2300      	movs	r3, #0
 8006c54:	4d05      	ldr	r5, [pc, #20]	; (8006c6c <_lseek_r+0x24>)
 8006c56:	602b      	str	r3, [r5, #0]
 8006c58:	f7f9 fca3 	bl	80005a2 <_lseek>
 8006c5c:	1c43      	adds	r3, r0, #1
 8006c5e:	d103      	bne.n	8006c68 <_lseek_r+0x20>
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d000      	beq.n	8006c68 <_lseek_r+0x20>
 8006c66:	6023      	str	r3, [r4, #0]
 8006c68:	bd70      	pop	{r4, r5, r6, pc}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	200002a4 	.word	0x200002a4

08006c70 <memchr>:
 8006c70:	b2c9      	uxtb	r1, r1
 8006c72:	1882      	adds	r2, r0, r2
 8006c74:	4290      	cmp	r0, r2
 8006c76:	d101      	bne.n	8006c7c <memchr+0xc>
 8006c78:	2000      	movs	r0, #0
 8006c7a:	4770      	bx	lr
 8006c7c:	7803      	ldrb	r3, [r0, #0]
 8006c7e:	428b      	cmp	r3, r1
 8006c80:	d0fb      	beq.n	8006c7a <memchr+0xa>
 8006c82:	3001      	adds	r0, #1
 8006c84:	e7f6      	b.n	8006c74 <memchr+0x4>
	...

08006c88 <__malloc_lock>:
 8006c88:	b510      	push	{r4, lr}
 8006c8a:	4802      	ldr	r0, [pc, #8]	; (8006c94 <__malloc_lock+0xc>)
 8006c8c:	f7ff fa27 	bl	80060de <__retarget_lock_acquire_recursive>
 8006c90:	bd10      	pop	{r4, pc}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	20000298 	.word	0x20000298

08006c98 <__malloc_unlock>:
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	4802      	ldr	r0, [pc, #8]	; (8006ca4 <__malloc_unlock+0xc>)
 8006c9c:	f7ff fa20 	bl	80060e0 <__retarget_lock_release_recursive>
 8006ca0:	bd10      	pop	{r4, pc}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	20000298 	.word	0x20000298

08006ca8 <_read_r>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	0004      	movs	r4, r0
 8006cac:	0008      	movs	r0, r1
 8006cae:	0011      	movs	r1, r2
 8006cb0:	001a      	movs	r2, r3
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	4d05      	ldr	r5, [pc, #20]	; (8006ccc <_read_r+0x24>)
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7f9 fc84 	bl	80005c4 <_read>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d103      	bne.n	8006cc8 <_read_r+0x20>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d000      	beq.n	8006cc8 <_read_r+0x20>
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	bd70      	pop	{r4, r5, r6, pc}
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	200002a4 	.word	0x200002a4

08006cd0 <_init>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	46c0      	nop			; (mov r8, r8)
 8006cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd6:	bc08      	pop	{r3}
 8006cd8:	469e      	mov	lr, r3
 8006cda:	4770      	bx	lr

08006cdc <_fini>:
 8006cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cde:	46c0      	nop			; (mov r8, r8)
 8006ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce2:	bc08      	pop	{r3}
 8006ce4:	469e      	mov	lr, r3
 8006ce6:	4770      	bx	lr
